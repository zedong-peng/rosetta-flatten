-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity optical_flow_tensor_weight_y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_product_dout : IN STD_LOGIC_VECTOR (191 downto 0);
    out_product_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    out_product_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    out_product_empty_n : IN STD_LOGIC;
    out_product_read : OUT STD_LOGIC;
    tensor_y_din : OUT STD_LOGIC_VECTOR (191 downto 0);
    tensor_y_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    tensor_y_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    tensor_y_full_n : IN STD_LOGIC;
    tensor_y_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of optical_flow_tensor_weight_y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv9_1B4 : STD_LOGIC_VECTOR (8 downto 0) := "110110100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_6D400 : STD_LOGIC_VECTOR (18 downto 0) := "1101101010000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv51_2982A : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000101001100000101010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv51_2CF76 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000101100111101110110";
    constant ap_const_lv13_3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000011";
    constant ap_const_lv13_4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_const_lv13_5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000101";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln265_reg_1257 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_1_reg_1261 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op79_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal select_ln265_2_reg_1265 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_2_reg_1265_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal out_product_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tensor_y_blk_n : STD_LOGIC;
    signal tmp_val_V_24_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln265_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln265_1_fu_427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_2_fu_463_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_3_fu_477_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_3_reg_1269 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_3_reg_1269_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln911_fu_513_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln911_reg_1279 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_val_val_V_addr_reg_1288 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_val_val_V_1_addr_reg_1294 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_val_val_V_addr_1_reg_1300 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal buf_val_val_V_1_addr_1_reg_1306 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_val_val_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_val_V_30_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_val_V_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_val_V_36_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_val_V_addr_2_reg_1347 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal buf_val_val_V_1_addr_2_reg_1353 : STD_LOGIC_VECTOR (12 downto 0);
    signal acc_val_V_1_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_val_V_addr_3_reg_1364 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal buf_val_val_V_1_addr_3_reg_1370 : STD_LOGIC_VECTOR (12 downto 0);
    signal acc_val_V_2_reg_1376 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_val_V_addr_4_reg_1381 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal buf_val_val_V_1_addr_4_reg_1387 : STD_LOGIC_VECTOR (12 downto 0);
    signal acc_val_V_3_reg_1393 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_val_V_addr_5_reg_1398 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal buf_val_val_V_1_addr_5_reg_1404 : STD_LOGIC_VECTOR (12 downto 0);
    signal acc_val_V_4_reg_1410 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_val_V_5_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal buf_val_val_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_val_val_V_ce0 : STD_LOGIC;
    signal buf_val_val_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_val_val_V_ce1 : STD_LOGIC;
    signal buf_val_val_V_we1 : STD_LOGIC;
    signal buf_val_val_V_1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_val_val_V_1_ce0 : STD_LOGIC;
    signal buf_val_val_V_1_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal buf_val_val_V_1_ce1 : STD_LOGIC;
    signal buf_val_val_V_1_we1 : STD_LOGIC;
    signal buf_val_val_V_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_val_V_24_phi_fu_264_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_val_V_fu_557_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_val_V_24_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln911_1_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln911_2_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_3_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln911_4_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln911_5_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln911_6_fu_914_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal c_fu_122 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln267_fu_525_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (10 downto 0);
    signal r_fu_126 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln265_4_fu_485_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_r_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_130 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln265_1_fu_388_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal tmp_14_fu_360_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp6_i_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln265_fu_409_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln265_fu_397_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal cmp6_i_mid1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_435_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp56_i_mid1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp56_i3_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp24_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_mid1_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_42_fu_417_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_501_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_493_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln911_fu_509_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal or_ln911_fu_546_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln911_fu_612_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_3_fu_627_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_3_fu_627_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_3_fu_633_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_15_fu_655_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_15_fu_655_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_1_fu_643_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_1_fu_661_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_9_fu_667_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_27_fu_689_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_27_fu_689_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_7_fu_677_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_7_fu_695_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal add_ln911_1_fu_711_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_5_fu_726_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_5_fu_726_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_4_fu_732_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_17_fu_754_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_17_fu_754_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_2_fu_742_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_2_fu_760_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_s_fu_766_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_29_fu_788_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_29_fu_788_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_8_fu_776_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_8_fu_794_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal add_ln911_2_fu_810_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_7_fu_825_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_7_fu_825_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_5_fu_831_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_19_fu_853_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_19_fu_853_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_3_fu_841_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_3_fu_859_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_10_fu_865_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_31_fu_887_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_31_fu_887_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_9_fu_875_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_9_fu_893_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal add_ln911_3_fu_909_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_9_fu_924_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_9_fu_924_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_6_fu_930_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_21_fu_952_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_21_fu_952_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_4_fu_940_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_4_fu_958_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_11_fu_964_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_33_fu_986_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_33_fu_986_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_11_fu_974_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_10_fu_992_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal r_V_11_fu_1012_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_11_fu_1012_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_7_fu_1018_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_23_fu_1040_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_23_fu_1040_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_5_fu_1028_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_5_fu_1046_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_12_fu_1052_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_35_fu_1074_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_35_fu_1074_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_10_fu_1062_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_11_fu_1080_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal r_V_1_fu_1099_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_1_fu_1099_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_2_fu_1105_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_13_fu_1126_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_13_fu_1126_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_fu_1115_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_fu_1132_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal tmp_8_fu_1138_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_25_fu_1160_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_25_fu_1160_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal lhs_6_fu_1148_p3 : STD_LOGIC_VECTOR (50 downto 0);
    signal ret_V_6_fu_1166_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal acc_val_V_fu_1172_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_val_V_11_fu_1182_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_val_V_10_fu_1188_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_val_V_9_fu_1194_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_val_V_8_fu_1200_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_val_V_7_fu_1206_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_val_V_6_fu_1212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_61 : BOOLEAN;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_74 : BOOLEAN;
    signal ap_enable_state2_pp0_iter0_stage1 : BOOLEAN;
    signal ap_enable_operation_78 : BOOLEAN;
    signal ap_enable_operation_62 : BOOLEAN;
    signal ap_enable_operation_76 : BOOLEAN;
    signal ap_enable_operation_88 : BOOLEAN;
    signal ap_predicate_op75_load_state2 : BOOLEAN;
    signal ap_enable_operation_75 : BOOLEAN;
    signal ap_predicate_op93_load_state3 : BOOLEAN;
    signal ap_enable_operation_93 : BOOLEAN;
    signal ap_enable_state3_pp0_iter0_stage2 : BOOLEAN;
    signal ap_enable_operation_97 : BOOLEAN;
    signal ap_enable_operation_77 : BOOLEAN;
    signal ap_enable_operation_95 : BOOLEAN;
    signal ap_enable_operation_99 : BOOLEAN;
    signal ap_predicate_op94_load_state3 : BOOLEAN;
    signal ap_enable_operation_94 : BOOLEAN;
    signal ap_predicate_op117_load_state4 : BOOLEAN;
    signal ap_enable_operation_117 : BOOLEAN;
    signal ap_enable_state4_pp0_iter0_stage3 : BOOLEAN;
    signal ap_enable_operation_121 : BOOLEAN;
    signal ap_enable_operation_96 : BOOLEAN;
    signal ap_enable_operation_119 : BOOLEAN;
    signal ap_enable_operation_123 : BOOLEAN;
    signal ap_predicate_op118_load_state4 : BOOLEAN;
    signal ap_enable_operation_118 : BOOLEAN;
    signal ap_predicate_op141_load_state5 : BOOLEAN;
    signal ap_enable_operation_141 : BOOLEAN;
    signal ap_enable_state5_pp0_iter0_stage4 : BOOLEAN;
    signal ap_enable_operation_145 : BOOLEAN;
    signal ap_enable_operation_120 : BOOLEAN;
    signal ap_enable_operation_143 : BOOLEAN;
    signal ap_enable_operation_147 : BOOLEAN;
    signal ap_predicate_op142_load_state5 : BOOLEAN;
    signal ap_enable_operation_142 : BOOLEAN;
    signal ap_predicate_op165_load_state6 : BOOLEAN;
    signal ap_enable_operation_165 : BOOLEAN;
    signal ap_enable_state6_pp0_iter0_stage5 : BOOLEAN;
    signal ap_enable_operation_169 : BOOLEAN;
    signal ap_enable_operation_144 : BOOLEAN;
    signal ap_enable_operation_167 : BOOLEAN;
    signal ap_enable_operation_171 : BOOLEAN;
    signal ap_predicate_op166_load_state6 : BOOLEAN;
    signal ap_enable_operation_166 : BOOLEAN;
    signal ap_predicate_op189_load_state7 : BOOLEAN;
    signal ap_enable_operation_189 : BOOLEAN;
    signal ap_enable_state7_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_191 : BOOLEAN;
    signal ap_enable_operation_168 : BOOLEAN;
    signal ap_enable_operation_190 : BOOLEAN;
    signal ap_enable_operation_193 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_180 : BOOLEAN;
    signal ap_condition_1065 : BOOLEAN;
    signal ap_condition_291 : BOOLEAN;
    signal ap_condition_174 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component optical_flow_mul_32s_19ns_51_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component optical_flow_tensor_weight_y_buf_val_val_V_RAM_S2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component optical_flow_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    buf_val_val_V_U : component optical_flow_tensor_weight_y_buf_val_val_V_RAM_S2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_val_V_address0,
        ce0 => buf_val_val_V_ce0,
        q0 => buf_val_val_V_q0,
        address1 => buf_val_val_V_address1,
        ce1 => buf_val_val_V_ce1,
        we1 => buf_val_val_V_we1,
        d1 => buf_val_val_V_1_q0);

    buf_val_val_V_1_U : component optical_flow_tensor_weight_y_buf_val_val_V_RAM_S2P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 6144,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_val_V_1_address0,
        ce0 => buf_val_val_V_1_ce0,
        q0 => buf_val_val_V_1_q0,
        address1 => buf_val_val_V_1_address1,
        ce1 => buf_val_val_V_1_ce1,
        we1 => buf_val_val_V_1_we1,
        d1 => buf_val_val_V_1_d1);

    mul_32s_19ns_51_1_1_U89 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_q0,
        din1 => r_V_3_fu_627_p1,
        dout => r_V_3_fu_627_p2);

    mul_32s_19ns_51_1_1_U90 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_1_q0,
        din1 => r_V_15_fu_655_p1,
        dout => r_V_15_fu_655_p2);

    mul_32s_19ns_51_1_1_U91 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273,
        din1 => r_V_27_fu_689_p1,
        dout => r_V_27_fu_689_p2);

    mul_32s_19ns_51_1_1_U92 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_q0,
        din1 => r_V_5_fu_726_p1,
        dout => r_V_5_fu_726_p2);

    mul_32s_19ns_51_1_1_U93 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_1_q0,
        din1 => r_V_17_fu_754_p1,
        dout => r_V_17_fu_754_p2);

    mul_32s_19ns_51_1_1_U94 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285,
        din1 => r_V_29_fu_788_p1,
        dout => r_V_29_fu_788_p2);

    mul_32s_19ns_51_1_1_U95 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_q0,
        din1 => r_V_7_fu_825_p1,
        dout => r_V_7_fu_825_p2);

    mul_32s_19ns_51_1_1_U96 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_1_q0,
        din1 => r_V_19_fu_853_p1,
        dout => r_V_19_fu_853_p2);

    mul_32s_19ns_51_1_1_U97 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297,
        din1 => r_V_31_fu_887_p1,
        dout => r_V_31_fu_887_p2);

    mul_32s_19ns_51_1_1_U98 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_q0,
        din1 => r_V_9_fu_924_p1,
        dout => r_V_9_fu_924_p2);

    mul_32s_19ns_51_1_1_U99 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_1_q0,
        din1 => r_V_21_fu_952_p1,
        dout => r_V_21_fu_952_p2);

    mul_32s_19ns_51_1_1_U100 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309,
        din1 => r_V_33_fu_986_p1,
        dout => r_V_33_fu_986_p2);

    mul_32s_19ns_51_1_1_U101 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_q0,
        din1 => r_V_11_fu_1012_p1,
        dout => r_V_11_fu_1012_p2);

    mul_32s_19ns_51_1_1_U102 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => buf_val_val_V_1_q0,
        din1 => r_V_23_fu_1040_p1,
        dout => r_V_23_fu_1040_p2);

    mul_32s_19ns_51_1_1_U103 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321,
        din1 => r_V_35_fu_1074_p1,
        dout => r_V_35_fu_1074_p2);

    mul_32s_19ns_51_1_1_U104 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => tmp_val_V_30_reg_1312,
        din1 => r_V_1_fu_1099_p1,
        dout => r_V_1_fu_1099_p2);

    mul_32s_19ns_51_1_1_U105 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => tmp_val_V_36_reg_1317,
        din1 => r_V_13_fu_1126_p1,
        dout => r_V_13_fu_1126_p2);

    mul_32s_19ns_51_1_1_U106 : component optical_flow_mul_32s_19ns_51_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        din0 => tmp_val_V_24_reg_260,
        din1 => r_V_25_fu_1160_p1,
        dout => r_V_25_fu_1160_p2);

    flow_control_loop_pipe_U : component optical_flow_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1065)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_180)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273 <= out_product_dout(63 downto 32);
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1065)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_180)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285 <= out_product_dout(95 downto 64);
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1065)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_180)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297 <= out_product_dout(127 downto 96);
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1065)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_180)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309 <= out_product_dout(159 downto 128);
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1065)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_180)) then 
                    ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321 <= out_product_dout(191 downto 160);
                end if;
            end if; 
        end if;
    end process;

    c_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_291)) then
                if ((icmp_ln265_fu_382_p2 = ap_const_lv1_0)) then 
                    c_fu_122 <= add_ln267_fu_525_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_122 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_291)) then
                if ((icmp_ln265_fu_382_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_130 <= add_ln265_1_fu_388_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_130 <= ap_const_lv19_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_291)) then
                if ((icmp_ln265_fu_382_p2 = ap_const_lv1_0)) then 
                    r_fu_126 <= select_ln265_4_fu_485_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_126 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    tmp_val_V_24_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_174)) then
                if (((select_ln265_1_reg_1261 = ap_const_lv1_1) and (icmp_ln265_reg_1257 = ap_const_lv1_0))) then 
                    tmp_val_V_24_reg_260 <= tmp_val_V_fu_557_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    tmp_val_V_24_reg_260 <= ap_phi_reg_pp0_iter0_tmp_val_V_24_reg_260;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (select_ln265_3_reg_1269 = ap_const_lv1_1))) then
                acc_val_V_1_reg_1359 <= ret_V_7_fu_695_p2(50 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (select_ln265_3_reg_1269 = ap_const_lv1_1))) then
                acc_val_V_2_reg_1376 <= ret_V_8_fu_794_p2(50 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (select_ln265_3_reg_1269 = ap_const_lv1_1))) then
                acc_val_V_3_reg_1393 <= ret_V_9_fu_893_p2(50 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (select_ln265_3_reg_1269 = ap_const_lv1_1))) then
                acc_val_V_4_reg_1410 <= ret_V_10_fu_992_p2(50 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (select_ln265_3_reg_1269 = ap_const_lv1_1))) then
                acc_val_V_5_reg_1415 <= ret_V_11_fu_1080_p2(50 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321 <= ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    buf_val_val_V_1_addr_1_reg_1306(12 downto 1) <= zext_ln911_2_fu_551_p1(13 - 1 downto 0)(12 downto 1);
                    buf_val_val_V_addr_1_reg_1300(12 downto 1) <= zext_ln911_2_fu_551_p1(13 - 1 downto 0)(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    buf_val_val_V_1_addr_2_reg_1353(12 downto 1) <= zext_ln911_3_fu_617_p1(13 - 1 downto 0)(12 downto 1);
                    buf_val_val_V_addr_2_reg_1347(12 downto 1) <= zext_ln911_3_fu_617_p1(13 - 1 downto 0)(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    buf_val_val_V_1_addr_3_reg_1370(12 downto 1) <= zext_ln911_4_fu_716_p1(13 - 1 downto 0)(12 downto 1);
                    buf_val_val_V_addr_3_reg_1364(12 downto 1) <= zext_ln911_4_fu_716_p1(13 - 1 downto 0)(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    buf_val_val_V_1_addr_4_reg_1387(12 downto 1) <= zext_ln911_5_fu_815_p1(13 - 1 downto 0)(12 downto 1);
                    buf_val_val_V_addr_4_reg_1381(12 downto 1) <= zext_ln911_5_fu_815_p1(13 - 1 downto 0)(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                    buf_val_val_V_1_addr_5_reg_1404(12 downto 1) <= zext_ln911_6_fu_914_p1(13 - 1 downto 0)(12 downto 1);
                    buf_val_val_V_addr_5_reg_1398(12 downto 1) <= zext_ln911_6_fu_914_p1(13 - 1 downto 0)(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln265_fu_382_p2 = ap_const_lv1_0))) then
                    buf_val_val_V_1_addr_reg_1294(12 downto 1) <= zext_ln911_1_fu_519_p1(13 - 1 downto 0)(12 downto 1);
                    buf_val_val_V_addr_reg_1288(12 downto 1) <= zext_ln911_1_fu_519_p1(13 - 1 downto 0)(12 downto 1);
                select_ln265_1_reg_1261 <= select_ln265_1_fu_427_p3;
                select_ln265_2_reg_1265 <= select_ln265_2_fu_463_p3;
                select_ln265_3_reg_1269 <= select_ln265_3_fu_477_p3;
                    sub_ln911_reg_1279(12 downto 1) <= sub_ln911_fu_513_p2(12 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln265_reg_1257 <= icmp_ln265_fu_382_p2;
                select_ln265_2_reg_1265_pp0_iter1_reg <= select_ln265_2_reg_1265;
                select_ln265_3_reg_1269_pp0_iter1_reg <= select_ln265_3_reg_1269;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_val_V_30_reg_1312 <= buf_val_val_V_q0;
                tmp_val_V_36_reg_1317 <= buf_val_val_V_1_q0;
            end if;
        end if;
    end process;
    sub_ln911_reg_1279(0) <= '0';
    buf_val_val_V_addr_reg_1288(0) <= '0';
    buf_val_val_V_1_addr_reg_1294(0) <= '0';
    buf_val_val_V_addr_1_reg_1300(0) <= '1';
    buf_val_val_V_1_addr_1_reg_1306(0) <= '1';
    buf_val_val_V_addr_2_reg_1347(0) <= '0';
    buf_val_val_V_1_addr_2_reg_1353(0) <= '0';
    buf_val_val_V_addr_3_reg_1364(0) <= '1';
    buf_val_val_V_1_addr_3_reg_1370(0) <= '1';
    buf_val_val_V_addr_4_reg_1381(0) <= '0';
    buf_val_val_V_1_addr_4_reg_1387(0) <= '0';
    buf_val_val_V_addr_5_reg_1398(0) <= '1';
    buf_val_val_V_1_addr_5_reg_1404(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to1 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    acc_val_V_10_fu_1188_p3 <= 
        acc_val_V_4_reg_1410 when (select_ln265_3_reg_1269_pp0_iter1_reg(0) = '1') else 
        ap_const_lv32_0;
    acc_val_V_11_fu_1182_p3 <= 
        acc_val_V_5_reg_1415 when (select_ln265_3_reg_1269_pp0_iter1_reg(0) = '1') else 
        ap_const_lv32_0;
    acc_val_V_6_fu_1212_p3 <= 
        acc_val_V_fu_1172_p4 when (select_ln265_3_reg_1269_pp0_iter1_reg(0) = '1') else 
        ap_const_lv32_0;
    acc_val_V_7_fu_1206_p3 <= 
        acc_val_V_1_reg_1359 when (select_ln265_3_reg_1269_pp0_iter1_reg(0) = '1') else 
        ap_const_lv32_0;
    acc_val_V_8_fu_1200_p3 <= 
        acc_val_V_2_reg_1376 when (select_ln265_3_reg_1269_pp0_iter1_reg(0) = '1') else 
        ap_const_lv32_0;
    acc_val_V_9_fu_1194_p3 <= 
        acc_val_V_3_reg_1393 when (select_ln265_3_reg_1269_pp0_iter1_reg(0) = '1') else 
        ap_const_lv32_0;
    acc_val_V_fu_1172_p4 <= ret_V_6_fu_1166_p2(50 downto 19);
    add_ln265_1_fu_388_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv19_1));
    add_ln265_fu_397_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv9_1));
    add_ln267_fu_525_p2 <= std_logic_vector(unsigned(select_ln265_fu_409_p3) + unsigned(ap_const_lv11_1));
    add_ln911_1_fu_711_p2 <= std_logic_vector(unsigned(sub_ln911_reg_1279) + unsigned(ap_const_lv13_3));
    add_ln911_2_fu_810_p2 <= std_logic_vector(unsigned(sub_ln911_reg_1279) + unsigned(ap_const_lv13_4));
    add_ln911_3_fu_909_p2 <= std_logic_vector(unsigned(sub_ln911_reg_1279) + unsigned(ap_const_lv13_5));
    add_ln911_fu_612_p2 <= std_logic_vector(unsigned(sub_ln911_reg_1279) + unsigned(ap_const_lv13_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage5 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage5_subdone)) or ((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)) or ((ap_ST_fsm_pp0_stage4 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage4_subdone)) or ((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage3_subdone)) or ((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage2_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, out_product_empty_n, ap_predicate_op79_read_state2, tensor_y_full_n, select_ln265_2_reg_1265_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_01001 <= (((select_ln265_2_reg_1265_pp0_iter1_reg = ap_const_lv1_0) and (tensor_y_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_predicate_op79_read_state2 = ap_const_boolean_1) and (out_product_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, out_product_empty_n, ap_predicate_op79_read_state2, tensor_y_full_n, select_ln265_2_reg_1265_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_11001 <= (((select_ln265_2_reg_1265_pp0_iter1_reg = ap_const_lv1_0) and (tensor_y_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_predicate_op79_read_state2 = ap_const_boolean_1) and (out_product_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, out_product_empty_n, ap_predicate_op79_read_state2, tensor_y_full_n, select_ln265_2_reg_1265_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_subdone <= (((select_ln265_2_reg_1265_pp0_iter1_reg = ap_const_lv1_0) and (tensor_y_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_predicate_op79_read_state2 = ap_const_boolean_1) and (out_product_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage2_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage2_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(out_product_empty_n, ap_predicate_op79_read_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((ap_predicate_op79_read_state2 = ap_const_boolean_1) and (out_product_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage1_iter1_assign_proc : process(tensor_y_full_n, select_ln265_2_reg_1265_pp0_iter1_reg)
    begin
                ap_block_state8_pp0_stage1_iter1 <= ((select_ln265_2_reg_1265_pp0_iter1_reg = ap_const_lv1_0) and (tensor_y_full_n = ap_const_logic_0));
    end process;


    ap_condition_1065_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln265_fu_382_p2, ap_block_pp0_stage0_11001, select_ln265_1_fu_427_p3)
    begin
                ap_condition_1065 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (select_ln265_1_fu_427_p3 = ap_const_lv1_0) and (icmp_ln265_fu_382_p2 = ap_const_lv1_0));
    end process;


    ap_condition_174_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_174 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_180_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln265_reg_1257, select_ln265_1_reg_1261, ap_block_pp0_stage1_11001)
    begin
                ap_condition_180 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln265_1_reg_1261 = ap_const_lv1_1) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_291_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_291 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln265_reg_1257, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln265_reg_1257 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_117_assign_proc : process(ap_predicate_op117_load_state4)
    begin
                ap_enable_operation_117 <= (ap_predicate_op117_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_118_assign_proc : process(ap_predicate_op118_load_state4)
    begin
                ap_enable_operation_118 <= (ap_predicate_op118_load_state4 = ap_const_boolean_1);
    end process;


    ap_enable_operation_119_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_119 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_120_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_120 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_121_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_121 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_123_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_123 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_141_assign_proc : process(ap_predicate_op141_load_state5)
    begin
                ap_enable_operation_141 <= (ap_predicate_op141_load_state5 = ap_const_boolean_1);
    end process;


    ap_enable_operation_142_assign_proc : process(ap_predicate_op142_load_state5)
    begin
                ap_enable_operation_142 <= (ap_predicate_op142_load_state5 = ap_const_boolean_1);
    end process;


    ap_enable_operation_143_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_143 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_144_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_144 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_145_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_145 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_147_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_147 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_165_assign_proc : process(ap_predicate_op165_load_state6)
    begin
                ap_enable_operation_165 <= (ap_predicate_op165_load_state6 = ap_const_boolean_1);
    end process;


    ap_enable_operation_166_assign_proc : process(ap_predicate_op166_load_state6)
    begin
                ap_enable_operation_166 <= (ap_predicate_op166_load_state6 = ap_const_boolean_1);
    end process;


    ap_enable_operation_167_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_167 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_168_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_168 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_169_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_169 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_171_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_171 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_189_assign_proc : process(ap_predicate_op189_load_state7)
    begin
                ap_enable_operation_189 <= (ap_predicate_op189_load_state7 = ap_const_boolean_1);
    end process;


    ap_enable_operation_190_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_190 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_191_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_191 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;

        ap_enable_operation_193 <= (ap_const_boolean_1 = ap_const_boolean_1);

    ap_enable_operation_61_assign_proc : process(icmp_ln265_fu_382_p2)
    begin
                ap_enable_operation_61 <= (icmp_ln265_fu_382_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_62_assign_proc : process(icmp_ln265_fu_382_p2)
    begin
                ap_enable_operation_62 <= (icmp_ln265_fu_382_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_74_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_74 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_75_assign_proc : process(ap_predicate_op75_load_state2)
    begin
                ap_enable_operation_75 <= (ap_predicate_op75_load_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_76_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_76 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_77_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_77 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_78_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_78 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_88_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_88 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_93_assign_proc : process(ap_predicate_op93_load_state3)
    begin
                ap_enable_operation_93 <= (ap_predicate_op93_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_94_assign_proc : process(ap_predicate_op94_load_state3)
    begin
                ap_enable_operation_94 <= (ap_predicate_op94_load_state3 = ap_const_boolean_1);
    end process;


    ap_enable_operation_95_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_95 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_96_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_96 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_97_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_97 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;


    ap_enable_operation_99_assign_proc : process(icmp_ln265_reg_1257)
    begin
                ap_enable_operation_99 <= (icmp_ln265_reg_1257 = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state2_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1)
    begin
                ap_enable_state2_pp0_iter0_stage1 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state3_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2)
    begin
                ap_enable_state3_pp0_iter0_stage2 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_enable_state4_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3)
    begin
                ap_enable_state4_pp0_iter0_stage3 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_enable_state5_pp0_iter0_stage4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4)
    begin
                ap_enable_state5_pp0_iter0_stage4 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_enable_state6_pp0_iter0_stage5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5)
    begin
                ap_enable_state6_pp0_iter0_stage5 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5));
    end process;


    ap_enable_state7_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state7_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_phi_mux_tmp_val_V_24_phi_fu_264_p4_assign_proc : process(icmp_ln265_reg_1257, select_ln265_1_reg_1261, tmp_val_V_fu_557_p1)
    begin
        if (((select_ln265_1_reg_1261 = ap_const_lv1_1) and (icmp_ln265_reg_1257 = ap_const_lv1_0))) then 
            ap_phi_mux_tmp_val_V_24_phi_fu_264_p4 <= tmp_val_V_fu_557_p1;
        else 
            ap_phi_mux_tmp_val_V_24_phi_fu_264_p4 <= ap_const_lv32_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_val_V_24_reg_260 <= ap_const_lv32_0;

    ap_predicate_op117_load_state4_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op117_load_state4 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op118_load_state4_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op118_load_state4 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op141_load_state5_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op141_load_state5 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op142_load_state5_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op142_load_state5 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op165_load_state6_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op165_load_state6 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op166_load_state6_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op166_load_state6 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op189_load_state7_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op189_load_state7 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op75_load_state2_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op75_load_state2 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op79_read_state2_assign_proc : process(icmp_ln265_reg_1257, select_ln265_1_reg_1261)
    begin
                ap_predicate_op79_read_state2 <= ((select_ln265_1_reg_1261 = ap_const_lv1_1) and (icmp_ln265_reg_1257 = ap_const_lv1_0));
    end process;


    ap_predicate_op93_load_state3_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op93_load_state3 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;


    ap_predicate_op94_load_state3_assign_proc : process(icmp_ln265_reg_1257, select_ln265_3_reg_1269)
    begin
                ap_predicate_op94_load_state3 <= ((icmp_ln265_reg_1257 = ap_const_lv1_0) and (select_ln265_3_reg_1269 = ap_const_lv1_1));
    end process;

    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, c_fu_122, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_122;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_130)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_130;
        end if; 
    end process;


    ap_sig_allocacmp_r_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, r_fu_126)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_1 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_r_1 <= r_fu_126;
        end if; 
    end process;


    buf_val_val_V_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, zext_ln911_1_fu_519_p1, ap_block_pp0_stage0, zext_ln911_2_fu_551_p1, zext_ln911_3_fu_617_p1, ap_block_pp0_stage2, zext_ln911_4_fu_716_p1, ap_block_pp0_stage3, zext_ln911_5_fu_815_p1, ap_block_pp0_stage4, zext_ln911_6_fu_914_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                buf_val_val_V_1_address0 <= zext_ln911_6_fu_914_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                buf_val_val_V_1_address0 <= zext_ln911_5_fu_815_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                buf_val_val_V_1_address0 <= zext_ln911_4_fu_716_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                buf_val_val_V_1_address0 <= zext_ln911_3_fu_617_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                buf_val_val_V_1_address0 <= zext_ln911_2_fu_551_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                buf_val_val_V_1_address0 <= zext_ln911_1_fu_519_p1(13 - 1 downto 0);
            else 
                buf_val_val_V_1_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            buf_val_val_V_1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    buf_val_val_V_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, buf_val_val_V_1_addr_reg_1294, buf_val_val_V_1_addr_1_reg_1306, ap_CS_fsm_pp0_stage2, buf_val_val_V_1_addr_2_reg_1353, ap_CS_fsm_pp0_stage3, buf_val_val_V_1_addr_3_reg_1370, ap_CS_fsm_pp0_stage4, buf_val_val_V_1_addr_4_reg_1387, buf_val_val_V_1_addr_5_reg_1404, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_val_val_V_1_address1 <= buf_val_val_V_1_addr_5_reg_1404;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            buf_val_val_V_1_address1 <= buf_val_val_V_1_addr_4_reg_1387;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            buf_val_val_V_1_address1 <= buf_val_val_V_1_addr_3_reg_1370;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            buf_val_val_V_1_address1 <= buf_val_val_V_1_addr_2_reg_1353;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            buf_val_val_V_1_address1 <= buf_val_val_V_1_addr_1_reg_1306;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buf_val_val_V_1_address1 <= buf_val_val_V_1_addr_reg_1294;
        else 
            buf_val_val_V_1_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    buf_val_val_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_val_val_V_1_ce0 <= ap_const_logic_1;
        else 
            buf_val_val_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_val_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_val_val_V_1_ce1 <= ap_const_logic_1;
        else 
            buf_val_val_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_val_V_1_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_phi_mux_tmp_val_V_24_phi_fu_264_p4, ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273, ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285, ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297, ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309, ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_val_val_V_1_d1 <= ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            buf_val_val_V_1_d1 <= ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            buf_val_val_V_1_d1 <= ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            buf_val_val_V_1_d1 <= ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            buf_val_val_V_1_d1 <= ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buf_val_val_V_1_d1 <= ap_phi_mux_tmp_val_V_24_phi_fu_264_p4;
        else 
            buf_val_val_V_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_val_val_V_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln265_reg_1257, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_val_val_V_1_we1 <= ap_const_logic_1;
        else 
            buf_val_val_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_val_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, zext_ln911_1_fu_519_p1, ap_block_pp0_stage0, zext_ln911_2_fu_551_p1, zext_ln911_3_fu_617_p1, ap_block_pp0_stage2, zext_ln911_4_fu_716_p1, ap_block_pp0_stage3, zext_ln911_5_fu_815_p1, ap_block_pp0_stage4, zext_ln911_6_fu_914_p1, ap_block_pp0_stage5)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                buf_val_val_V_address0 <= zext_ln911_6_fu_914_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                buf_val_val_V_address0 <= zext_ln911_5_fu_815_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                buf_val_val_V_address0 <= zext_ln911_4_fu_716_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                buf_val_val_V_address0 <= zext_ln911_3_fu_617_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                buf_val_val_V_address0 <= zext_ln911_2_fu_551_p1(13 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                buf_val_val_V_address0 <= zext_ln911_1_fu_519_p1(13 - 1 downto 0);
            else 
                buf_val_val_V_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            buf_val_val_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    buf_val_val_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, buf_val_val_V_addr_reg_1288, buf_val_val_V_addr_1_reg_1300, buf_val_val_V_addr_2_reg_1347, ap_CS_fsm_pp0_stage2, buf_val_val_V_addr_3_reg_1364, ap_CS_fsm_pp0_stage3, buf_val_val_V_addr_4_reg_1381, ap_CS_fsm_pp0_stage4, buf_val_val_V_addr_5_reg_1398, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            buf_val_val_V_address1 <= buf_val_val_V_addr_5_reg_1398;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            buf_val_val_V_address1 <= buf_val_val_V_addr_4_reg_1381;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            buf_val_val_V_address1 <= buf_val_val_V_addr_3_reg_1364;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            buf_val_val_V_address1 <= buf_val_val_V_addr_2_reg_1347;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            buf_val_val_V_address1 <= buf_val_val_V_addr_1_reg_1300;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            buf_val_val_V_address1 <= buf_val_val_V_addr_reg_1288;
        else 
            buf_val_val_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    buf_val_val_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_val_val_V_ce0 <= ap_const_logic_1;
        else 
            buf_val_val_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_val_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_val_val_V_ce1 <= ap_const_logic_1;
        else 
            buf_val_val_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_val_V_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln265_reg_1257, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln265_reg_1257 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            buf_val_val_V_we1 <= ap_const_logic_1;
        else 
            buf_val_val_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    cmp56_i3_fu_457_p2 <= "1" when (ap_sig_allocacmp_r_1 = ap_const_lv9_0) else "0";
    cmp56_i_mid1_fu_451_p2 <= "1" when (add_ln265_fu_397_p2 = ap_const_lv9_0) else "0";
    cmp6_i_fu_354_p2 <= "1" when (unsigned(ap_sig_allocacmp_r_1) < unsigned(ap_const_lv9_1B4)) else "0";
    cmp6_i_mid1_fu_421_p2 <= "1" when (unsigned(add_ln265_fu_397_p2) < unsigned(ap_const_lv9_1B4)) else "0";
    empty_42_fu_417_p1 <= select_ln265_fu_409_p3(10 - 1 downto 0);
    icmp24_fu_445_p2 <= "0" when (tmp_15_fu_435_p4 = ap_const_lv8_0) else "1";
    icmp_fu_370_p2 <= "0" when (tmp_14_fu_360_p4 = ap_const_lv8_0) else "1";
    icmp_ln265_fu_382_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv19_6D400) else "0";
    icmp_ln267_fu_403_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv11_400) else "0";
    lhs_10_fu_1062_p3 <= (tmp_12_fu_1052_p4 & ap_const_lv19_0);
    lhs_11_fu_974_p3 <= (tmp_11_fu_964_p4 & ap_const_lv19_0);
    lhs_1_fu_643_p3 <= (tmp_3_fu_633_p4 & ap_const_lv19_0);
    lhs_2_fu_742_p3 <= (tmp_4_fu_732_p4 & ap_const_lv19_0);
    lhs_3_fu_841_p3 <= (tmp_5_fu_831_p4 & ap_const_lv19_0);
    lhs_4_fu_940_p3 <= (tmp_6_fu_930_p4 & ap_const_lv19_0);
    lhs_5_fu_1028_p3 <= (tmp_7_fu_1018_p4 & ap_const_lv19_0);
    lhs_6_fu_1148_p3 <= (tmp_8_fu_1138_p4 & ap_const_lv19_0);
    lhs_7_fu_677_p3 <= (tmp_9_fu_667_p4 & ap_const_lv19_0);
    lhs_8_fu_776_p3 <= (tmp_s_fu_766_p4 & ap_const_lv19_0);
    lhs_9_fu_875_p3 <= (tmp_10_fu_865_p4 & ap_const_lv19_0);
    lhs_fu_1115_p3 <= (tmp_2_fu_1105_p4 & ap_const_lv19_0);
    or_ln911_fu_546_p2 <= (sub_ln911_reg_1279 or ap_const_lv13_1);

    out_product_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, out_product_empty_n, ap_predicate_op79_read_state2, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_predicate_op79_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_product_blk_n <= out_product_empty_n;
        else 
            out_product_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_product_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op79_read_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_predicate_op79_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            out_product_read <= ap_const_logic_1;
        else 
            out_product_read <= ap_const_logic_0;
        end if; 
    end process;

    r_V_11_fu_1012_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_13_fu_1126_p1 <= ap_const_lv51_2CF76(19 - 1 downto 0);
    r_V_15_fu_655_p1 <= ap_const_lv51_2CF76(19 - 1 downto 0);
    r_V_17_fu_754_p1 <= ap_const_lv51_2CF76(19 - 1 downto 0);
    r_V_19_fu_853_p1 <= ap_const_lv51_2CF76(19 - 1 downto 0);
    r_V_1_fu_1099_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_21_fu_952_p1 <= ap_const_lv51_2CF76(19 - 1 downto 0);
    r_V_23_fu_1040_p1 <= ap_const_lv51_2CF76(19 - 1 downto 0);
    r_V_25_fu_1160_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_27_fu_689_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_29_fu_788_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_31_fu_887_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_33_fu_986_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_35_fu_1074_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_3_fu_627_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_5_fu_726_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_7_fu_825_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);
    r_V_9_fu_924_p1 <= ap_const_lv51_2982A(19 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_10_fu_992_p2 <= std_logic_vector(unsigned(r_V_33_fu_986_p2) + unsigned(lhs_11_fu_974_p3));
    ret_V_11_fu_1080_p2 <= std_logic_vector(unsigned(r_V_35_fu_1074_p2) + unsigned(lhs_10_fu_1062_p3));
    ret_V_1_fu_661_p2 <= std_logic_vector(unsigned(r_V_15_fu_655_p2) + unsigned(lhs_1_fu_643_p3));
    ret_V_2_fu_760_p2 <= std_logic_vector(unsigned(r_V_17_fu_754_p2) + unsigned(lhs_2_fu_742_p3));
    ret_V_3_fu_859_p2 <= std_logic_vector(unsigned(r_V_19_fu_853_p2) + unsigned(lhs_3_fu_841_p3));
    ret_V_4_fu_958_p2 <= std_logic_vector(unsigned(r_V_21_fu_952_p2) + unsigned(lhs_4_fu_940_p3));
    ret_V_5_fu_1046_p2 <= std_logic_vector(unsigned(r_V_23_fu_1040_p2) + unsigned(lhs_5_fu_1028_p3));
    ret_V_6_fu_1166_p2 <= std_logic_vector(unsigned(r_V_25_fu_1160_p2) + unsigned(lhs_6_fu_1148_p3));
    ret_V_7_fu_695_p2 <= std_logic_vector(unsigned(r_V_27_fu_689_p2) + unsigned(lhs_7_fu_677_p3));
    ret_V_8_fu_794_p2 <= std_logic_vector(unsigned(r_V_29_fu_788_p2) + unsigned(lhs_8_fu_776_p3));
    ret_V_9_fu_893_p2 <= std_logic_vector(unsigned(r_V_31_fu_887_p2) + unsigned(lhs_9_fu_875_p3));
    ret_V_fu_1132_p2 <= std_logic_vector(unsigned(r_V_13_fu_1126_p2) + unsigned(lhs_fu_1115_p3));
    sel_tmp_fu_376_p2 <= (icmp_fu_370_p2 and cmp6_i_fu_354_p2);
    sel_tmp_mid1_fu_471_p2 <= (icmp24_fu_445_p2 and cmp6_i_mid1_fu_421_p2);
    select_ln265_1_fu_427_p3 <= 
        cmp6_i_mid1_fu_421_p2 when (icmp_ln267_fu_403_p2(0) = '1') else 
        cmp6_i_fu_354_p2;
    select_ln265_2_fu_463_p3 <= 
        cmp56_i_mid1_fu_451_p2 when (icmp_ln267_fu_403_p2(0) = '1') else 
        cmp56_i3_fu_457_p2;
    select_ln265_3_fu_477_p3 <= 
        sel_tmp_mid1_fu_471_p2 when (icmp_ln267_fu_403_p2(0) = '1') else 
        sel_tmp_fu_376_p2;
    select_ln265_4_fu_485_p3 <= 
        add_ln265_fu_397_p2 when (icmp_ln267_fu_403_p2(0) = '1') else 
        ap_sig_allocacmp_r_1;
    select_ln265_fu_409_p3 <= 
        ap_const_lv11_0 when (icmp_ln267_fu_403_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln911_fu_513_p2 <= std_logic_vector(unsigned(tmp_fu_493_p3) - unsigned(zext_ln911_fu_509_p1));

    tensor_y_blk_n_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, tensor_y_full_n, select_ln265_2_reg_1265_pp0_iter1_reg, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (select_ln265_2_reg_1265_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            tensor_y_blk_n <= tensor_y_full_n;
        else 
            tensor_y_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tensor_y_din <= (((((acc_val_V_11_fu_1182_p3 & acc_val_V_10_fu_1188_p3) & acc_val_V_9_fu_1194_p3) & acc_val_V_8_fu_1200_p3) & acc_val_V_7_fu_1206_p3) & acc_val_V_6_fu_1212_p3);

    tensor_y_write_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, select_ln265_2_reg_1265_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (select_ln265_2_reg_1265_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            tensor_y_write <= ap_const_logic_1;
        else 
            tensor_y_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_865_p4 <= ret_V_3_fu_859_p2(50 downto 19);
    tmp_11_fu_964_p4 <= ret_V_4_fu_958_p2(50 downto 19);
    tmp_12_fu_1052_p4 <= ret_V_5_fu_1046_p2(50 downto 19);
    tmp_14_fu_360_p4 <= ap_sig_allocacmp_r_1(8 downto 1);
    tmp_15_fu_435_p4 <= add_ln265_fu_397_p2(8 downto 1);
    tmp_1_fu_501_p3 <= (select_ln265_fu_409_p3 & ap_const_lv1_0);
    tmp_2_fu_1105_p4 <= r_V_1_fu_1099_p2(50 downto 19);
    tmp_3_fu_633_p4 <= r_V_3_fu_627_p2(50 downto 19);
    tmp_4_fu_732_p4 <= r_V_5_fu_726_p2(50 downto 19);
    tmp_5_fu_831_p4 <= r_V_7_fu_825_p2(50 downto 19);
    tmp_6_fu_930_p4 <= r_V_9_fu_924_p2(50 downto 19);
    tmp_7_fu_1018_p4 <= r_V_11_fu_1012_p2(50 downto 19);
    tmp_8_fu_1138_p4 <= ret_V_fu_1132_p2(50 downto 19);
    tmp_9_fu_667_p4 <= ret_V_1_fu_661_p2(50 downto 19);
    tmp_fu_493_p3 <= (empty_42_fu_417_p1 & ap_const_lv3_0);
    tmp_s_fu_766_p4 <= ret_V_2_fu_760_p2(50 downto 19);
    tmp_val_V_fu_557_p1 <= out_product_dout(32 - 1 downto 0);
    zext_ln911_1_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln911_fu_513_p2),64));
    zext_ln911_2_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln911_fu_546_p2),64));
    zext_ln911_3_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln911_fu_612_p2),64));
    zext_ln911_4_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln911_1_fu_711_p2),64));
    zext_ln911_5_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln911_2_fu_810_p2),64));
    zext_ln911_6_fu_914_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln911_3_fu_909_p2),64));
    zext_ln911_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_501_p3),13));
end behav;

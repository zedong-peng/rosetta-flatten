-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity optical_flow_Loop_FRAMES_CP_OUTER_proc1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    frame1_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
    frame1_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame1_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame1_a_V_full_n : IN STD_LOGIC;
    frame1_a_V_write : OUT STD_LOGIC;
    frame2_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
    frame2_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame2_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame2_a_V_full_n : IN STD_LOGIC;
    frame2_a_V_write : OUT STD_LOGIC;
    frame3_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
    frame3_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame3_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame3_a_V_full_n : IN STD_LOGIC;
    frame3_a_V_write : OUT STD_LOGIC;
    frame4_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
    frame4_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame4_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame4_a_V_full_n : IN STD_LOGIC;
    frame4_a_V_write : OUT STD_LOGIC;
    frame5_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
    frame5_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame5_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame5_a_V_full_n : IN STD_LOGIC;
    frame5_a_V_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    frames_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frames_ce0 : OUT STD_LOGIC;
    frames_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of optical_flow_Loop_FRAMES_CP_OUTER_proc1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_6D000 : STD_LOGIC_VECTOR (18 downto 0) := "1101101000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln451_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal frame1_a_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal frame2_a_V_blk_n : STD_LOGIC;
    signal frame3_a_V_blk_n : STD_LOGIC;
    signal frame4_a_V_blk_n : STD_LOGIC;
    signal frame5_a_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln458_1_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_80 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln453_fu_227_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (10 downto 0);
    signal r_fu_84 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln451_1_fu_196_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_r_load : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_88 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln451_1_fu_164_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln453_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln451_fu_176_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln451_fu_188_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_204_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln458_fu_212_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln458_fu_216_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_V_fu_248_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_205_fu_257_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_206_fu_272_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_207_fu_287_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_208_fu_302_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_143 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component optical_flow_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component optical_flow_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_143)) then
                if ((icmp_ln451_fu_158_p2 = ap_const_lv1_0)) then 
                    c_fu_80 <= add_ln453_fu_227_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_80 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_143)) then
                if ((icmp_ln451_fu_158_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_88 <= add_ln451_1_fu_164_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_88 <= ap_const_lv19_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_143)) then
                if ((icmp_ln451_fu_158_p2 = ap_const_lv1_0)) then 
                    r_fu_84 <= select_ln451_1_fu_196_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_84 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln451_1_fu_164_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv19_1));
    add_ln451_fu_176_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_load) + unsigned(ap_const_lv9_1));
    add_ln453_fu_227_p2 <= std_logic_vector(unsigned(select_ln451_fu_188_p3) + unsigned(ap_const_lv11_1));
    add_ln458_fu_216_p2 <= std_logic_vector(unsigned(tmp_fu_204_p3) + unsigned(zext_ln458_fu_212_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, frame1_a_V_full_n, frame2_a_V_full_n, frame3_a_V_full_n, frame4_a_V_full_n, frame5_a_V_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((frame5_a_V_full_n = ap_const_logic_0) or (frame4_a_V_full_n = ap_const_logic_0) or (frame3_a_V_full_n = ap_const_logic_0) or (frame2_a_V_full_n = ap_const_logic_0) or (frame1_a_V_full_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, frame1_a_V_full_n, frame2_a_V_full_n, frame3_a_V_full_n, frame4_a_V_full_n, frame5_a_V_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((frame5_a_V_full_n = ap_const_logic_0) or (frame4_a_V_full_n = ap_const_logic_0) or (frame3_a_V_full_n = ap_const_logic_0) or (frame2_a_V_full_n = ap_const_logic_0) or (frame1_a_V_full_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_done_reg, frame1_a_V_full_n, frame2_a_V_full_n, frame3_a_V_full_n, frame4_a_V_full_n, frame5_a_V_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((frame5_a_V_full_n = ap_const_logic_0) or (frame4_a_V_full_n = ap_const_logic_0) or (frame3_a_V_full_n = ap_const_logic_0) or (frame2_a_V_full_n = ap_const_logic_0) or (frame1_a_V_full_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(frame1_a_V_full_n, frame2_a_V_full_n, frame3_a_V_full_n, frame4_a_V_full_n, frame5_a_V_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((frame5_a_V_full_n = ap_const_logic_0) or (frame4_a_V_full_n = ap_const_logic_0) or (frame3_a_V_full_n = ap_const_logic_0) or (frame2_a_V_full_n = ap_const_logic_0) or (frame1_a_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_143_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_143 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln451_fu_158_p2, ap_start_int)
    begin
        if (((icmp_ln451_fu_158_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, c_fu_80, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_88, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_r_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_84, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_r_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_r_load <= r_fu_84;
        end if; 
    end process;


    frame1_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame1_a_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame1_a_V_blk_n <= frame1_a_V_full_n;
        else 
            frame1_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame1_a_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_248_p1),17));

    frame1_a_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame1_a_V_write <= ap_const_logic_1;
        else 
            frame1_a_V_write <= ap_const_logic_0;
        end if; 
    end process;


    frame2_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame2_a_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame2_a_V_blk_n <= frame2_a_V_full_n;
        else 
            frame2_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame2_a_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_205_fu_257_p4),17));

    frame2_a_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame2_a_V_write <= ap_const_logic_1;
        else 
            frame2_a_V_write <= ap_const_logic_0;
        end if; 
    end process;


    frame3_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame3_a_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame3_a_V_blk_n <= frame3_a_V_full_n;
        else 
            frame3_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame3_a_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_206_fu_272_p4),17));

    frame3_a_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame3_a_V_write <= ap_const_logic_1;
        else 
            frame3_a_V_write <= ap_const_logic_0;
        end if; 
    end process;


    frame4_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame4_a_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame4_a_V_blk_n <= frame4_a_V_full_n;
        else 
            frame4_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame4_a_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_207_fu_287_p4),17));

    frame4_a_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame4_a_V_write <= ap_const_logic_1;
        else 
            frame4_a_V_write <= ap_const_logic_0;
        end if; 
    end process;


    frame5_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame5_a_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame5_a_V_blk_n <= frame5_a_V_full_n;
        else 
            frame5_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame5_a_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_208_fu_302_p4),17));

    frame5_a_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame5_a_V_write <= ap_const_logic_1;
        else 
            frame5_a_V_write <= ap_const_logic_0;
        end if; 
    end process;

    frames_address0 <= zext_ln458_1_fu_222_p1(19 - 1 downto 0);

    frames_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frames_ce0 <= ap_const_logic_1;
        else 
            frames_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln451_fu_158_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv19_6D000) else "0";
    icmp_ln453_fu_182_p2 <= "1" when (ap_sig_allocacmp_c_load = ap_const_lv11_400) else "0";
    r_V_205_fu_257_p4 <= frames_q0(15 downto 8);
    r_V_206_fu_272_p4 <= frames_q0(23 downto 16);
    r_V_207_fu_287_p4 <= frames_q0(31 downto 24);
    r_V_208_fu_302_p4 <= frames_q0(39 downto 32);
    r_V_fu_248_p1 <= frames_q0(8 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln451_1_fu_196_p3 <= 
        add_ln451_fu_176_p2 when (icmp_ln453_fu_182_p2(0) = '1') else 
        ap_sig_allocacmp_r_load;
    select_ln451_fu_188_p3 <= 
        ap_const_lv11_0 when (icmp_ln453_fu_182_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_204_p3 <= (select_ln451_1_fu_196_p3 & ap_const_lv10_0);
    zext_ln458_1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln458_fu_216_p2),64));
    zext_ln458_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln451_fu_188_p3),19));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity optical_flow is
port (
    frames_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frames_ce0 : OUT STD_LOGIC;
    frames_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    frames_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    frames_we0 : OUT STD_LOGIC;
    frames_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    frames_ce1 : OUT STD_LOGIC;
    frames_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    frames_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    frames_we1 : OUT STD_LOGIC;
    outputs_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    outputs_ce0 : OUT STD_LOGIC;
    outputs_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    outputs_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    outputs_we0 : OUT STD_LOGIC;
    outputs_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    outputs_ce1 : OUT STD_LOGIC;
    outputs_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    outputs_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    outputs_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of optical_flow is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "optical_flow_optical_flow,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.275500,HLS_SYN_LAT=2685018,HLS_SYN_TPT=2684932,HLS_SYN_MEM=114,HLS_SYN_DSP=0,HLS_SYN_FF=25638,HLS_SYN_LUT=25219,HLS_VERSION=2022_2}";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Loop_FRAMES_CP_OUTER_proc1_U0_ap_start : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_start_full_n : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_ap_done : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_ap_continue : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_ap_idle : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_ap_ready : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame1_a_V_din : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame1_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame2_a_V_din : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame2_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame3_a_V_din : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame3_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame4_a_V_din : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame4_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame5_a_V_din : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frame5_a_V_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_start_out : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_start_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frames_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal Loop_FRAMES_CP_OUTER_proc1_U0_frames_ce0 : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_start : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_done : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_continue : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_idle : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_ready : STD_LOGIC;
    signal gradient_xy_calc_U0_frame3_a_V_read : STD_LOGIC;
    signal gradient_xy_calc_U0_gradient_x_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_xy_calc_U0_gradient_x_V_write : STD_LOGIC;
    signal gradient_xy_calc_U0_gradient_y_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_xy_calc_U0_gradient_y_V_write : STD_LOGIC;
    signal gradient_xy_calc_U0_start_out : STD_LOGIC;
    signal gradient_xy_calc_U0_start_write : STD_LOGIC;
    signal gradient_z_calc_U0_ap_start : STD_LOGIC;
    signal gradient_z_calc_U0_ap_done : STD_LOGIC;
    signal gradient_z_calc_U0_ap_continue : STD_LOGIC;
    signal gradient_z_calc_U0_ap_idle : STD_LOGIC;
    signal gradient_z_calc_U0_ap_ready : STD_LOGIC;
    signal gradient_z_calc_U0_frame1_a_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame2_a_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame4_a_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame5_a_V_read : STD_LOGIC;
    signal gradient_z_calc_U0_gradient_z_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_z_calc_U0_gradient_z_V_write : STD_LOGIC;
    signal gradient_weight_y_U0_ap_start : STD_LOGIC;
    signal gradient_weight_y_U0_ap_done : STD_LOGIC;
    signal gradient_weight_y_U0_ap_continue : STD_LOGIC;
    signal gradient_weight_y_U0_ap_idle : STD_LOGIC;
    signal gradient_weight_y_U0_ap_ready : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_x_V_read : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_y_V_read : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_z_V_read : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_x_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_y_U0_y_filtered_x_V_write : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_y_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_y_U0_y_filtered_y_V_write : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_z_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_y_U0_y_filtered_z_V_write : STD_LOGIC;
    signal gradient_weight_y_U0_start_out : STD_LOGIC;
    signal gradient_weight_y_U0_start_write : STD_LOGIC;
    signal gradient_weight_x_U0_ap_start : STD_LOGIC;
    signal gradient_weight_x_U0_ap_done : STD_LOGIC;
    signal gradient_weight_x_U0_ap_continue : STD_LOGIC;
    signal gradient_weight_x_U0_ap_idle : STD_LOGIC;
    signal gradient_weight_x_U0_ap_ready : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_x_V_read : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_y_V_read : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_z_V_read : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_x_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_x_V_write : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_y_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_y_V_write : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_z_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_z_V_write : STD_LOGIC;
    signal gradient_weight_x_U0_start_out : STD_LOGIC;
    signal gradient_weight_x_U0_start_write : STD_LOGIC;
    signal outer_product_U0_ap_start : STD_LOGIC;
    signal outer_product_U0_ap_done : STD_LOGIC;
    signal outer_product_U0_ap_continue : STD_LOGIC;
    signal outer_product_U0_ap_idle : STD_LOGIC;
    signal outer_product_U0_ap_ready : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_x_V_read : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_y_V_read : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_z_V_read : STD_LOGIC;
    signal outer_product_U0_out_product_din : STD_LOGIC_VECTOR (191 downto 0);
    signal outer_product_U0_out_product_write : STD_LOGIC;
    signal outer_product_U0_start_out : STD_LOGIC;
    signal outer_product_U0_start_write : STD_LOGIC;
    signal tensor_weight_y_U0_ap_start : STD_LOGIC;
    signal tensor_weight_y_U0_ap_done : STD_LOGIC;
    signal tensor_weight_y_U0_ap_continue : STD_LOGIC;
    signal tensor_weight_y_U0_ap_idle : STD_LOGIC;
    signal tensor_weight_y_U0_ap_ready : STD_LOGIC;
    signal tensor_weight_y_U0_out_product_read : STD_LOGIC;
    signal tensor_weight_y_U0_tensor_y_din : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_weight_y_U0_tensor_y_write : STD_LOGIC;
    signal tensor_weight_y_U0_start_out : STD_LOGIC;
    signal tensor_weight_y_U0_start_write : STD_LOGIC;
    signal tensor_weight_x_U0_ap_start : STD_LOGIC;
    signal tensor_weight_x_U0_ap_done : STD_LOGIC;
    signal tensor_weight_x_U0_ap_continue : STD_LOGIC;
    signal tensor_weight_x_U0_ap_idle : STD_LOGIC;
    signal tensor_weight_x_U0_ap_ready : STD_LOGIC;
    signal tensor_weight_x_U0_tensor_y_read : STD_LOGIC;
    signal tensor_weight_x_U0_tensor_din : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_weight_x_U0_tensor_write : STD_LOGIC;
    signal tensor_weight_x_U0_start_out : STD_LOGIC;
    signal tensor_weight_x_U0_start_write : STD_LOGIC;
    signal flow_calc_U0_ap_start : STD_LOGIC;
    signal flow_calc_U0_ap_done : STD_LOGIC;
    signal flow_calc_U0_ap_continue : STD_LOGIC;
    signal flow_calc_U0_ap_idle : STD_LOGIC;
    signal flow_calc_U0_ap_ready : STD_LOGIC;
    signal flow_calc_U0_tensor_read : STD_LOGIC;
    signal flow_calc_U0_outputs_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal flow_calc_U0_outputs_ce0 : STD_LOGIC;
    signal flow_calc_U0_outputs_we0 : STD_LOGIC;
    signal flow_calc_U0_outputs_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal frame1_a_V_full_n : STD_LOGIC;
    signal frame1_a_V_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal frame1_a_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal frame1_a_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal frame1_a_V_empty_n : STD_LOGIC;
    signal frame2_a_V_full_n : STD_LOGIC;
    signal frame2_a_V_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal frame2_a_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal frame2_a_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal frame2_a_V_empty_n : STD_LOGIC;
    signal frame3_a_V_full_n : STD_LOGIC;
    signal frame3_a_V_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal frame3_a_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal frame3_a_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal frame3_a_V_empty_n : STD_LOGIC;
    signal frame4_a_V_full_n : STD_LOGIC;
    signal frame4_a_V_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal frame4_a_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal frame4_a_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal frame4_a_V_empty_n : STD_LOGIC;
    signal frame5_a_V_full_n : STD_LOGIC;
    signal frame5_a_V_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal frame5_a_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal frame5_a_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal frame5_a_V_empty_n : STD_LOGIC;
    signal gradient_x_V_full_n : STD_LOGIC;
    signal gradient_x_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_x_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal gradient_x_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal gradient_x_V_empty_n : STD_LOGIC;
    signal gradient_y_V_full_n : STD_LOGIC;
    signal gradient_y_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_y_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal gradient_y_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal gradient_y_V_empty_n : STD_LOGIC;
    signal gradient_z_V_full_n : STD_LOGIC;
    signal gradient_z_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_z_V_num_data_valid : STD_LOGIC_VECTOR (12 downto 0);
    signal gradient_z_V_fifo_cap : STD_LOGIC_VECTOR (12 downto 0);
    signal gradient_z_V_empty_n : STD_LOGIC;
    signal y_filtered_x_V_full_n : STD_LOGIC;
    signal y_filtered_x_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_x_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal y_filtered_x_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal y_filtered_x_V_empty_n : STD_LOGIC;
    signal y_filtered_y_V_full_n : STD_LOGIC;
    signal y_filtered_y_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_y_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal y_filtered_y_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal y_filtered_y_V_empty_n : STD_LOGIC;
    signal y_filtered_z_V_full_n : STD_LOGIC;
    signal y_filtered_z_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_z_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal y_filtered_z_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal y_filtered_z_V_empty_n : STD_LOGIC;
    signal filtered_gradient_x_V_full_n : STD_LOGIC;
    signal filtered_gradient_x_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_x_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal filtered_gradient_x_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal filtered_gradient_x_V_empty_n : STD_LOGIC;
    signal filtered_gradient_y_V_full_n : STD_LOGIC;
    signal filtered_gradient_y_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_y_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal filtered_gradient_y_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal filtered_gradient_y_V_empty_n : STD_LOGIC;
    signal filtered_gradient_z_V_full_n : STD_LOGIC;
    signal filtered_gradient_z_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_z_V_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal filtered_gradient_z_V_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal filtered_gradient_z_V_empty_n : STD_LOGIC;
    signal out_product_full_n : STD_LOGIC;
    signal out_product_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal out_product_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal out_product_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal out_product_empty_n : STD_LOGIC;
    signal tensor_y_full_n : STD_LOGIC;
    signal tensor_y_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_y_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal tensor_y_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal tensor_y_empty_n : STD_LOGIC;
    signal tensor_full_n : STD_LOGIC;
    signal tensor_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal tensor_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal tensor_empty_n : STD_LOGIC;
    signal start_for_gradient_xy_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_xy_calc_U0_full_n : STD_LOGIC;
    signal start_for_gradient_xy_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_xy_calc_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_z_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_z_calc_U0_full_n : STD_LOGIC;
    signal start_for_gradient_z_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_z_calc_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_weight_y_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_y_U0_full_n : STD_LOGIC;
    signal start_for_gradient_weight_y_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_y_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_weight_x_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_x_U0_full_n : STD_LOGIC;
    signal start_for_gradient_weight_x_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_x_U0_empty_n : STD_LOGIC;
    signal start_for_outer_product_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_outer_product_U0_full_n : STD_LOGIC;
    signal start_for_outer_product_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_outer_product_U0_empty_n : STD_LOGIC;
    signal start_for_tensor_weight_y_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_y_U0_full_n : STD_LOGIC;
    signal start_for_tensor_weight_y_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_y_U0_empty_n : STD_LOGIC;
    signal start_for_tensor_weight_x_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_x_U0_full_n : STD_LOGIC;
    signal start_for_tensor_weight_x_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_x_U0_empty_n : STD_LOGIC;
    signal start_for_flow_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_flow_calc_U0_full_n : STD_LOGIC;
    signal start_for_flow_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_flow_calc_U0_empty_n : STD_LOGIC;

    component optical_flow_Loop_FRAMES_CP_OUTER_proc1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        frame1_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        frame1_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame1_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame1_a_V_full_n : IN STD_LOGIC;
        frame1_a_V_write : OUT STD_LOGIC;
        frame2_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        frame2_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame2_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame2_a_V_full_n : IN STD_LOGIC;
        frame2_a_V_write : OUT STD_LOGIC;
        frame3_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        frame3_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame3_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame3_a_V_full_n : IN STD_LOGIC;
        frame3_a_V_write : OUT STD_LOGIC;
        frame4_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        frame4_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame4_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame4_a_V_full_n : IN STD_LOGIC;
        frame4_a_V_write : OUT STD_LOGIC;
        frame5_a_V_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        frame5_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame5_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame5_a_V_full_n : IN STD_LOGIC;
        frame5_a_V_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        frames_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        frames_ce0 : OUT STD_LOGIC;
        frames_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component optical_flow_gradient_xy_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        frame3_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        frame3_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame3_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame3_a_V_empty_n : IN STD_LOGIC;
        frame3_a_V_read : OUT STD_LOGIC;
        gradient_x_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_x_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        gradient_x_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        gradient_x_V_full_n : IN STD_LOGIC;
        gradient_x_V_write : OUT STD_LOGIC;
        gradient_y_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_y_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        gradient_y_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        gradient_y_V_full_n : IN STD_LOGIC;
        gradient_y_V_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component optical_flow_gradient_z_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        frame1_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        frame1_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame1_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame1_a_V_empty_n : IN STD_LOGIC;
        frame1_a_V_read : OUT STD_LOGIC;
        frame2_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        frame2_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame2_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame2_a_V_empty_n : IN STD_LOGIC;
        frame2_a_V_read : OUT STD_LOGIC;
        frame4_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        frame4_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame4_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame4_a_V_empty_n : IN STD_LOGIC;
        frame4_a_V_read : OUT STD_LOGIC;
        frame5_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        frame5_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        frame5_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        frame5_a_V_empty_n : IN STD_LOGIC;
        frame5_a_V_read : OUT STD_LOGIC;
        gradient_z_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_z_V_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        gradient_z_V_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        gradient_z_V_full_n : IN STD_LOGIC;
        gradient_z_V_write : OUT STD_LOGIC );
    end component;


    component optical_flow_gradient_weight_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gradient_x_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_x_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        gradient_x_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        gradient_x_V_empty_n : IN STD_LOGIC;
        gradient_x_V_read : OUT STD_LOGIC;
        gradient_y_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_y_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        gradient_y_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        gradient_y_V_empty_n : IN STD_LOGIC;
        gradient_y_V_read : OUT STD_LOGIC;
        gradient_z_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_z_V_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
        gradient_z_V_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
        gradient_z_V_empty_n : IN STD_LOGIC;
        gradient_z_V_read : OUT STD_LOGIC;
        y_filtered_x_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_x_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_x_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_x_V_full_n : IN STD_LOGIC;
        y_filtered_x_V_write : OUT STD_LOGIC;
        y_filtered_y_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_y_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_y_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_y_V_full_n : IN STD_LOGIC;
        y_filtered_y_V_write : OUT STD_LOGIC;
        y_filtered_z_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_z_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_z_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_z_V_full_n : IN STD_LOGIC;
        y_filtered_z_V_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component optical_flow_gradient_weight_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_filtered_x_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_x_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_x_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_x_V_empty_n : IN STD_LOGIC;
        y_filtered_x_V_read : OUT STD_LOGIC;
        y_filtered_y_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_y_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_y_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_y_V_empty_n : IN STD_LOGIC;
        y_filtered_y_V_read : OUT STD_LOGIC;
        y_filtered_z_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_z_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_z_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        y_filtered_z_V_empty_n : IN STD_LOGIC;
        y_filtered_z_V_read : OUT STD_LOGIC;
        filtered_gradient_x_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_x_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_x_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_x_V_full_n : IN STD_LOGIC;
        filtered_gradient_x_V_write : OUT STD_LOGIC;
        filtered_gradient_y_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_y_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_y_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_y_V_full_n : IN STD_LOGIC;
        filtered_gradient_y_V_write : OUT STD_LOGIC;
        filtered_gradient_z_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_z_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_z_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_z_V_full_n : IN STD_LOGIC;
        filtered_gradient_z_V_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component optical_flow_outer_product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        filtered_gradient_x_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_x_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_x_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_x_V_empty_n : IN STD_LOGIC;
        filtered_gradient_x_V_read : OUT STD_LOGIC;
        filtered_gradient_y_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_y_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_y_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_y_V_empty_n : IN STD_LOGIC;
        filtered_gradient_y_V_read : OUT STD_LOGIC;
        filtered_gradient_z_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_z_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_z_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        filtered_gradient_z_V_empty_n : IN STD_LOGIC;
        filtered_gradient_z_V_read : OUT STD_LOGIC;
        out_product_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        out_product_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        out_product_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        out_product_full_n : IN STD_LOGIC;
        out_product_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component optical_flow_tensor_weight_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_product_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        out_product_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        out_product_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        out_product_empty_n : IN STD_LOGIC;
        out_product_read : OUT STD_LOGIC;
        tensor_y_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        tensor_y_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        tensor_y_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        tensor_y_full_n : IN STD_LOGIC;
        tensor_y_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component optical_flow_tensor_weight_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tensor_y_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        tensor_y_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        tensor_y_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        tensor_y_empty_n : IN STD_LOGIC;
        tensor_y_read : OUT STD_LOGIC;
        tensor_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        tensor_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        tensor_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        tensor_full_n : IN STD_LOGIC;
        tensor_write : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC );
    end component;


    component optical_flow_flow_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        tensor_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        tensor_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        tensor_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        tensor_empty_n : IN STD_LOGIC;
        tensor_read : OUT STD_LOGIC;
        outputs_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        outputs_ce0 : OUT STD_LOGIC;
        outputs_we0 : OUT STD_LOGIC;
        outputs_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component optical_flow_fifo_w17_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (16 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (16 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_fifo_w32_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_fifo_w32_d4096_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_fifo_w192_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (191 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (191 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_start_for_gradient_xy_calc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_start_for_gradient_z_calc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_start_for_gradient_weight_y_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_start_for_gradient_weight_x_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_start_for_outer_product_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_start_for_tensor_weight_y_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_start_for_tensor_weight_x_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component optical_flow_start_for_flow_calc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Loop_FRAMES_CP_OUTER_proc1_U0 : component optical_flow_Loop_FRAMES_CP_OUTER_proc1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_FRAMES_CP_OUTER_proc1_U0_ap_start,
        start_full_n => Loop_FRAMES_CP_OUTER_proc1_U0_start_full_n,
        ap_done => Loop_FRAMES_CP_OUTER_proc1_U0_ap_done,
        ap_continue => Loop_FRAMES_CP_OUTER_proc1_U0_ap_continue,
        ap_idle => Loop_FRAMES_CP_OUTER_proc1_U0_ap_idle,
        ap_ready => Loop_FRAMES_CP_OUTER_proc1_U0_ap_ready,
        frame1_a_V_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame1_a_V_din,
        frame1_a_V_num_data_valid => frame1_a_V_num_data_valid,
        frame1_a_V_fifo_cap => frame1_a_V_fifo_cap,
        frame1_a_V_full_n => frame1_a_V_full_n,
        frame1_a_V_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame1_a_V_write,
        frame2_a_V_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame2_a_V_din,
        frame2_a_V_num_data_valid => frame2_a_V_num_data_valid,
        frame2_a_V_fifo_cap => frame2_a_V_fifo_cap,
        frame2_a_V_full_n => frame2_a_V_full_n,
        frame2_a_V_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame2_a_V_write,
        frame3_a_V_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame3_a_V_din,
        frame3_a_V_num_data_valid => frame3_a_V_num_data_valid,
        frame3_a_V_fifo_cap => frame3_a_V_fifo_cap,
        frame3_a_V_full_n => frame3_a_V_full_n,
        frame3_a_V_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame3_a_V_write,
        frame4_a_V_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame4_a_V_din,
        frame4_a_V_num_data_valid => frame4_a_V_num_data_valid,
        frame4_a_V_fifo_cap => frame4_a_V_fifo_cap,
        frame4_a_V_full_n => frame4_a_V_full_n,
        frame4_a_V_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame4_a_V_write,
        frame5_a_V_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame5_a_V_din,
        frame5_a_V_num_data_valid => frame5_a_V_num_data_valid,
        frame5_a_V_fifo_cap => frame5_a_V_fifo_cap,
        frame5_a_V_full_n => frame5_a_V_full_n,
        frame5_a_V_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame5_a_V_write,
        start_out => Loop_FRAMES_CP_OUTER_proc1_U0_start_out,
        start_write => Loop_FRAMES_CP_OUTER_proc1_U0_start_write,
        frames_address0 => Loop_FRAMES_CP_OUTER_proc1_U0_frames_address0,
        frames_ce0 => Loop_FRAMES_CP_OUTER_proc1_U0_frames_ce0,
        frames_q0 => frames_q0);

    gradient_xy_calc_U0 : component optical_flow_gradient_xy_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gradient_xy_calc_U0_ap_start,
        start_full_n => start_for_gradient_weight_y_U0_full_n,
        ap_done => gradient_xy_calc_U0_ap_done,
        ap_continue => gradient_xy_calc_U0_ap_continue,
        ap_idle => gradient_xy_calc_U0_ap_idle,
        ap_ready => gradient_xy_calc_U0_ap_ready,
        frame3_a_V_dout => frame3_a_V_dout,
        frame3_a_V_num_data_valid => frame3_a_V_num_data_valid,
        frame3_a_V_fifo_cap => frame3_a_V_fifo_cap,
        frame3_a_V_empty_n => frame3_a_V_empty_n,
        frame3_a_V_read => gradient_xy_calc_U0_frame3_a_V_read,
        gradient_x_V_din => gradient_xy_calc_U0_gradient_x_V_din,
        gradient_x_V_num_data_valid => gradient_x_V_num_data_valid,
        gradient_x_V_fifo_cap => gradient_x_V_fifo_cap,
        gradient_x_V_full_n => gradient_x_V_full_n,
        gradient_x_V_write => gradient_xy_calc_U0_gradient_x_V_write,
        gradient_y_V_din => gradient_xy_calc_U0_gradient_y_V_din,
        gradient_y_V_num_data_valid => gradient_y_V_num_data_valid,
        gradient_y_V_fifo_cap => gradient_y_V_fifo_cap,
        gradient_y_V_full_n => gradient_y_V_full_n,
        gradient_y_V_write => gradient_xy_calc_U0_gradient_y_V_write,
        start_out => gradient_xy_calc_U0_start_out,
        start_write => gradient_xy_calc_U0_start_write);

    gradient_z_calc_U0 : component optical_flow_gradient_z_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gradient_z_calc_U0_ap_start,
        ap_done => gradient_z_calc_U0_ap_done,
        ap_continue => gradient_z_calc_U0_ap_continue,
        ap_idle => gradient_z_calc_U0_ap_idle,
        ap_ready => gradient_z_calc_U0_ap_ready,
        frame1_a_V_dout => frame1_a_V_dout,
        frame1_a_V_num_data_valid => frame1_a_V_num_data_valid,
        frame1_a_V_fifo_cap => frame1_a_V_fifo_cap,
        frame1_a_V_empty_n => frame1_a_V_empty_n,
        frame1_a_V_read => gradient_z_calc_U0_frame1_a_V_read,
        frame2_a_V_dout => frame2_a_V_dout,
        frame2_a_V_num_data_valid => frame2_a_V_num_data_valid,
        frame2_a_V_fifo_cap => frame2_a_V_fifo_cap,
        frame2_a_V_empty_n => frame2_a_V_empty_n,
        frame2_a_V_read => gradient_z_calc_U0_frame2_a_V_read,
        frame4_a_V_dout => frame4_a_V_dout,
        frame4_a_V_num_data_valid => frame4_a_V_num_data_valid,
        frame4_a_V_fifo_cap => frame4_a_V_fifo_cap,
        frame4_a_V_empty_n => frame4_a_V_empty_n,
        frame4_a_V_read => gradient_z_calc_U0_frame4_a_V_read,
        frame5_a_V_dout => frame5_a_V_dout,
        frame5_a_V_num_data_valid => frame5_a_V_num_data_valid,
        frame5_a_V_fifo_cap => frame5_a_V_fifo_cap,
        frame5_a_V_empty_n => frame5_a_V_empty_n,
        frame5_a_V_read => gradient_z_calc_U0_frame5_a_V_read,
        gradient_z_V_din => gradient_z_calc_U0_gradient_z_V_din,
        gradient_z_V_num_data_valid => gradient_z_V_num_data_valid,
        gradient_z_V_fifo_cap => gradient_z_V_fifo_cap,
        gradient_z_V_full_n => gradient_z_V_full_n,
        gradient_z_V_write => gradient_z_calc_U0_gradient_z_V_write);

    gradient_weight_y_U0 : component optical_flow_gradient_weight_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gradient_weight_y_U0_ap_start,
        start_full_n => start_for_gradient_weight_x_U0_full_n,
        ap_done => gradient_weight_y_U0_ap_done,
        ap_continue => gradient_weight_y_U0_ap_continue,
        ap_idle => gradient_weight_y_U0_ap_idle,
        ap_ready => gradient_weight_y_U0_ap_ready,
        gradient_x_V_dout => gradient_x_V_dout,
        gradient_x_V_num_data_valid => gradient_x_V_num_data_valid,
        gradient_x_V_fifo_cap => gradient_x_V_fifo_cap,
        gradient_x_V_empty_n => gradient_x_V_empty_n,
        gradient_x_V_read => gradient_weight_y_U0_gradient_x_V_read,
        gradient_y_V_dout => gradient_y_V_dout,
        gradient_y_V_num_data_valid => gradient_y_V_num_data_valid,
        gradient_y_V_fifo_cap => gradient_y_V_fifo_cap,
        gradient_y_V_empty_n => gradient_y_V_empty_n,
        gradient_y_V_read => gradient_weight_y_U0_gradient_y_V_read,
        gradient_z_V_dout => gradient_z_V_dout,
        gradient_z_V_num_data_valid => gradient_z_V_num_data_valid,
        gradient_z_V_fifo_cap => gradient_z_V_fifo_cap,
        gradient_z_V_empty_n => gradient_z_V_empty_n,
        gradient_z_V_read => gradient_weight_y_U0_gradient_z_V_read,
        y_filtered_x_V_din => gradient_weight_y_U0_y_filtered_x_V_din,
        y_filtered_x_V_num_data_valid => y_filtered_x_V_num_data_valid,
        y_filtered_x_V_fifo_cap => y_filtered_x_V_fifo_cap,
        y_filtered_x_V_full_n => y_filtered_x_V_full_n,
        y_filtered_x_V_write => gradient_weight_y_U0_y_filtered_x_V_write,
        y_filtered_y_V_din => gradient_weight_y_U0_y_filtered_y_V_din,
        y_filtered_y_V_num_data_valid => y_filtered_y_V_num_data_valid,
        y_filtered_y_V_fifo_cap => y_filtered_y_V_fifo_cap,
        y_filtered_y_V_full_n => y_filtered_y_V_full_n,
        y_filtered_y_V_write => gradient_weight_y_U0_y_filtered_y_V_write,
        y_filtered_z_V_din => gradient_weight_y_U0_y_filtered_z_V_din,
        y_filtered_z_V_num_data_valid => y_filtered_z_V_num_data_valid,
        y_filtered_z_V_fifo_cap => y_filtered_z_V_fifo_cap,
        y_filtered_z_V_full_n => y_filtered_z_V_full_n,
        y_filtered_z_V_write => gradient_weight_y_U0_y_filtered_z_V_write,
        start_out => gradient_weight_y_U0_start_out,
        start_write => gradient_weight_y_U0_start_write);

    gradient_weight_x_U0 : component optical_flow_gradient_weight_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gradient_weight_x_U0_ap_start,
        start_full_n => start_for_outer_product_U0_full_n,
        ap_done => gradient_weight_x_U0_ap_done,
        ap_continue => gradient_weight_x_U0_ap_continue,
        ap_idle => gradient_weight_x_U0_ap_idle,
        ap_ready => gradient_weight_x_U0_ap_ready,
        y_filtered_x_V_dout => y_filtered_x_V_dout,
        y_filtered_x_V_num_data_valid => y_filtered_x_V_num_data_valid,
        y_filtered_x_V_fifo_cap => y_filtered_x_V_fifo_cap,
        y_filtered_x_V_empty_n => y_filtered_x_V_empty_n,
        y_filtered_x_V_read => gradient_weight_x_U0_y_filtered_x_V_read,
        y_filtered_y_V_dout => y_filtered_y_V_dout,
        y_filtered_y_V_num_data_valid => y_filtered_y_V_num_data_valid,
        y_filtered_y_V_fifo_cap => y_filtered_y_V_fifo_cap,
        y_filtered_y_V_empty_n => y_filtered_y_V_empty_n,
        y_filtered_y_V_read => gradient_weight_x_U0_y_filtered_y_V_read,
        y_filtered_z_V_dout => y_filtered_z_V_dout,
        y_filtered_z_V_num_data_valid => y_filtered_z_V_num_data_valid,
        y_filtered_z_V_fifo_cap => y_filtered_z_V_fifo_cap,
        y_filtered_z_V_empty_n => y_filtered_z_V_empty_n,
        y_filtered_z_V_read => gradient_weight_x_U0_y_filtered_z_V_read,
        filtered_gradient_x_V_din => gradient_weight_x_U0_filtered_gradient_x_V_din,
        filtered_gradient_x_V_num_data_valid => filtered_gradient_x_V_num_data_valid,
        filtered_gradient_x_V_fifo_cap => filtered_gradient_x_V_fifo_cap,
        filtered_gradient_x_V_full_n => filtered_gradient_x_V_full_n,
        filtered_gradient_x_V_write => gradient_weight_x_U0_filtered_gradient_x_V_write,
        filtered_gradient_y_V_din => gradient_weight_x_U0_filtered_gradient_y_V_din,
        filtered_gradient_y_V_num_data_valid => filtered_gradient_y_V_num_data_valid,
        filtered_gradient_y_V_fifo_cap => filtered_gradient_y_V_fifo_cap,
        filtered_gradient_y_V_full_n => filtered_gradient_y_V_full_n,
        filtered_gradient_y_V_write => gradient_weight_x_U0_filtered_gradient_y_V_write,
        filtered_gradient_z_V_din => gradient_weight_x_U0_filtered_gradient_z_V_din,
        filtered_gradient_z_V_num_data_valid => filtered_gradient_z_V_num_data_valid,
        filtered_gradient_z_V_fifo_cap => filtered_gradient_z_V_fifo_cap,
        filtered_gradient_z_V_full_n => filtered_gradient_z_V_full_n,
        filtered_gradient_z_V_write => gradient_weight_x_U0_filtered_gradient_z_V_write,
        start_out => gradient_weight_x_U0_start_out,
        start_write => gradient_weight_x_U0_start_write);

    outer_product_U0 : component optical_flow_outer_product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => outer_product_U0_ap_start,
        start_full_n => start_for_tensor_weight_y_U0_full_n,
        ap_done => outer_product_U0_ap_done,
        ap_continue => outer_product_U0_ap_continue,
        ap_idle => outer_product_U0_ap_idle,
        ap_ready => outer_product_U0_ap_ready,
        filtered_gradient_x_V_dout => filtered_gradient_x_V_dout,
        filtered_gradient_x_V_num_data_valid => filtered_gradient_x_V_num_data_valid,
        filtered_gradient_x_V_fifo_cap => filtered_gradient_x_V_fifo_cap,
        filtered_gradient_x_V_empty_n => filtered_gradient_x_V_empty_n,
        filtered_gradient_x_V_read => outer_product_U0_filtered_gradient_x_V_read,
        filtered_gradient_y_V_dout => filtered_gradient_y_V_dout,
        filtered_gradient_y_V_num_data_valid => filtered_gradient_y_V_num_data_valid,
        filtered_gradient_y_V_fifo_cap => filtered_gradient_y_V_fifo_cap,
        filtered_gradient_y_V_empty_n => filtered_gradient_y_V_empty_n,
        filtered_gradient_y_V_read => outer_product_U0_filtered_gradient_y_V_read,
        filtered_gradient_z_V_dout => filtered_gradient_z_V_dout,
        filtered_gradient_z_V_num_data_valid => filtered_gradient_z_V_num_data_valid,
        filtered_gradient_z_V_fifo_cap => filtered_gradient_z_V_fifo_cap,
        filtered_gradient_z_V_empty_n => filtered_gradient_z_V_empty_n,
        filtered_gradient_z_V_read => outer_product_U0_filtered_gradient_z_V_read,
        out_product_din => outer_product_U0_out_product_din,
        out_product_num_data_valid => out_product_num_data_valid,
        out_product_fifo_cap => out_product_fifo_cap,
        out_product_full_n => out_product_full_n,
        out_product_write => outer_product_U0_out_product_write,
        start_out => outer_product_U0_start_out,
        start_write => outer_product_U0_start_write);

    tensor_weight_y_U0 : component optical_flow_tensor_weight_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => tensor_weight_y_U0_ap_start,
        start_full_n => start_for_tensor_weight_x_U0_full_n,
        ap_done => tensor_weight_y_U0_ap_done,
        ap_continue => tensor_weight_y_U0_ap_continue,
        ap_idle => tensor_weight_y_U0_ap_idle,
        ap_ready => tensor_weight_y_U0_ap_ready,
        out_product_dout => out_product_dout,
        out_product_num_data_valid => out_product_num_data_valid,
        out_product_fifo_cap => out_product_fifo_cap,
        out_product_empty_n => out_product_empty_n,
        out_product_read => tensor_weight_y_U0_out_product_read,
        tensor_y_din => tensor_weight_y_U0_tensor_y_din,
        tensor_y_num_data_valid => tensor_y_num_data_valid,
        tensor_y_fifo_cap => tensor_y_fifo_cap,
        tensor_y_full_n => tensor_y_full_n,
        tensor_y_write => tensor_weight_y_U0_tensor_y_write,
        start_out => tensor_weight_y_U0_start_out,
        start_write => tensor_weight_y_U0_start_write);

    tensor_weight_x_U0 : component optical_flow_tensor_weight_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => tensor_weight_x_U0_ap_start,
        start_full_n => start_for_flow_calc_U0_full_n,
        ap_done => tensor_weight_x_U0_ap_done,
        ap_continue => tensor_weight_x_U0_ap_continue,
        ap_idle => tensor_weight_x_U0_ap_idle,
        ap_ready => tensor_weight_x_U0_ap_ready,
        tensor_y_dout => tensor_y_dout,
        tensor_y_num_data_valid => tensor_y_num_data_valid,
        tensor_y_fifo_cap => tensor_y_fifo_cap,
        tensor_y_empty_n => tensor_y_empty_n,
        tensor_y_read => tensor_weight_x_U0_tensor_y_read,
        tensor_din => tensor_weight_x_U0_tensor_din,
        tensor_num_data_valid => tensor_num_data_valid,
        tensor_fifo_cap => tensor_fifo_cap,
        tensor_full_n => tensor_full_n,
        tensor_write => tensor_weight_x_U0_tensor_write,
        start_out => tensor_weight_x_U0_start_out,
        start_write => tensor_weight_x_U0_start_write);

    flow_calc_U0 : component optical_flow_flow_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => flow_calc_U0_ap_start,
        ap_done => flow_calc_U0_ap_done,
        ap_continue => flow_calc_U0_ap_continue,
        ap_idle => flow_calc_U0_ap_idle,
        ap_ready => flow_calc_U0_ap_ready,
        tensor_dout => tensor_dout,
        tensor_num_data_valid => tensor_num_data_valid,
        tensor_fifo_cap => tensor_fifo_cap,
        tensor_empty_n => tensor_empty_n,
        tensor_read => flow_calc_U0_tensor_read,
        outputs_address0 => flow_calc_U0_outputs_address0,
        outputs_ce0 => flow_calc_U0_outputs_ce0,
        outputs_we0 => flow_calc_U0_outputs_we0,
        outputs_d0 => flow_calc_U0_outputs_d0);

    frame1_a_V_U : component optical_flow_fifo_w17_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame1_a_V_din,
        if_full_n => frame1_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame1_a_V_write,
        if_dout => frame1_a_V_dout,
        if_num_data_valid => frame1_a_V_num_data_valid,
        if_fifo_cap => frame1_a_V_fifo_cap,
        if_empty_n => frame1_a_V_empty_n,
        if_read => gradient_z_calc_U0_frame1_a_V_read);

    frame2_a_V_U : component optical_flow_fifo_w17_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame2_a_V_din,
        if_full_n => frame2_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame2_a_V_write,
        if_dout => frame2_a_V_dout,
        if_num_data_valid => frame2_a_V_num_data_valid,
        if_fifo_cap => frame2_a_V_fifo_cap,
        if_empty_n => frame2_a_V_empty_n,
        if_read => gradient_z_calc_U0_frame2_a_V_read);

    frame3_a_V_U : component optical_flow_fifo_w17_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame3_a_V_din,
        if_full_n => frame3_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame3_a_V_write,
        if_dout => frame3_a_V_dout,
        if_num_data_valid => frame3_a_V_num_data_valid,
        if_fifo_cap => frame3_a_V_fifo_cap,
        if_empty_n => frame3_a_V_empty_n,
        if_read => gradient_xy_calc_U0_frame3_a_V_read);

    frame4_a_V_U : component optical_flow_fifo_w17_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame4_a_V_din,
        if_full_n => frame4_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame4_a_V_write,
        if_dout => frame4_a_V_dout,
        if_num_data_valid => frame4_a_V_num_data_valid,
        if_fifo_cap => frame4_a_V_fifo_cap,
        if_empty_n => frame4_a_V_empty_n,
        if_read => gradient_z_calc_U0_frame4_a_V_read);

    frame5_a_V_U : component optical_flow_fifo_w17_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_proc1_U0_frame5_a_V_din,
        if_full_n => frame5_a_V_full_n,
        if_write => Loop_FRAMES_CP_OUTER_proc1_U0_frame5_a_V_write,
        if_dout => frame5_a_V_dout,
        if_num_data_valid => frame5_a_V_num_data_valid,
        if_fifo_cap => frame5_a_V_fifo_cap,
        if_empty_n => frame5_a_V_empty_n,
        if_read => gradient_z_calc_U0_frame5_a_V_read);

    gradient_x_V_U : component optical_flow_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_xy_calc_U0_gradient_x_V_din,
        if_full_n => gradient_x_V_full_n,
        if_write => gradient_xy_calc_U0_gradient_x_V_write,
        if_dout => gradient_x_V_dout,
        if_num_data_valid => gradient_x_V_num_data_valid,
        if_fifo_cap => gradient_x_V_fifo_cap,
        if_empty_n => gradient_x_V_empty_n,
        if_read => gradient_weight_y_U0_gradient_x_V_read);

    gradient_y_V_U : component optical_flow_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_xy_calc_U0_gradient_y_V_din,
        if_full_n => gradient_y_V_full_n,
        if_write => gradient_xy_calc_U0_gradient_y_V_write,
        if_dout => gradient_y_V_dout,
        if_num_data_valid => gradient_y_V_num_data_valid,
        if_fifo_cap => gradient_y_V_fifo_cap,
        if_empty_n => gradient_y_V_empty_n,
        if_read => gradient_weight_y_U0_gradient_y_V_read);

    gradient_z_V_U : component optical_flow_fifo_w32_d4096_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_z_calc_U0_gradient_z_V_din,
        if_full_n => gradient_z_V_full_n,
        if_write => gradient_z_calc_U0_gradient_z_V_write,
        if_dout => gradient_z_V_dout,
        if_num_data_valid => gradient_z_V_num_data_valid,
        if_fifo_cap => gradient_z_V_fifo_cap,
        if_empty_n => gradient_z_V_empty_n,
        if_read => gradient_weight_y_U0_gradient_z_V_read);

    y_filtered_x_V_U : component optical_flow_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_x_V_din,
        if_full_n => y_filtered_x_V_full_n,
        if_write => gradient_weight_y_U0_y_filtered_x_V_write,
        if_dout => y_filtered_x_V_dout,
        if_num_data_valid => y_filtered_x_V_num_data_valid,
        if_fifo_cap => y_filtered_x_V_fifo_cap,
        if_empty_n => y_filtered_x_V_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_x_V_read);

    y_filtered_y_V_U : component optical_flow_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_y_V_din,
        if_full_n => y_filtered_y_V_full_n,
        if_write => gradient_weight_y_U0_y_filtered_y_V_write,
        if_dout => y_filtered_y_V_dout,
        if_num_data_valid => y_filtered_y_V_num_data_valid,
        if_fifo_cap => y_filtered_y_V_fifo_cap,
        if_empty_n => y_filtered_y_V_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_y_V_read);

    y_filtered_z_V_U : component optical_flow_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_z_V_din,
        if_full_n => y_filtered_z_V_full_n,
        if_write => gradient_weight_y_U0_y_filtered_z_V_write,
        if_dout => y_filtered_z_V_dout,
        if_num_data_valid => y_filtered_z_V_num_data_valid,
        if_fifo_cap => y_filtered_z_V_fifo_cap,
        if_empty_n => y_filtered_z_V_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_z_V_read);

    filtered_gradient_x_V_U : component optical_flow_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_x_V_din,
        if_full_n => filtered_gradient_x_V_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_x_V_write,
        if_dout => filtered_gradient_x_V_dout,
        if_num_data_valid => filtered_gradient_x_V_num_data_valid,
        if_fifo_cap => filtered_gradient_x_V_fifo_cap,
        if_empty_n => filtered_gradient_x_V_empty_n,
        if_read => outer_product_U0_filtered_gradient_x_V_read);

    filtered_gradient_y_V_U : component optical_flow_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_y_V_din,
        if_full_n => filtered_gradient_y_V_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_y_V_write,
        if_dout => filtered_gradient_y_V_dout,
        if_num_data_valid => filtered_gradient_y_V_num_data_valid,
        if_fifo_cap => filtered_gradient_y_V_fifo_cap,
        if_empty_n => filtered_gradient_y_V_empty_n,
        if_read => outer_product_U0_filtered_gradient_y_V_read);

    filtered_gradient_z_V_U : component optical_flow_fifo_w32_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_z_V_din,
        if_full_n => filtered_gradient_z_V_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_z_V_write,
        if_dout => filtered_gradient_z_V_dout,
        if_num_data_valid => filtered_gradient_z_V_num_data_valid,
        if_fifo_cap => filtered_gradient_z_V_fifo_cap,
        if_empty_n => filtered_gradient_z_V_empty_n,
        if_read => outer_product_U0_filtered_gradient_z_V_read);

    out_product_U : component optical_flow_fifo_w192_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outer_product_U0_out_product_din,
        if_full_n => out_product_full_n,
        if_write => outer_product_U0_out_product_write,
        if_dout => out_product_dout,
        if_num_data_valid => out_product_num_data_valid,
        if_fifo_cap => out_product_fifo_cap,
        if_empty_n => out_product_empty_n,
        if_read => tensor_weight_y_U0_out_product_read);

    tensor_y_U : component optical_flow_fifo_w192_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tensor_weight_y_U0_tensor_y_din,
        if_full_n => tensor_y_full_n,
        if_write => tensor_weight_y_U0_tensor_y_write,
        if_dout => tensor_y_dout,
        if_num_data_valid => tensor_y_num_data_valid,
        if_fifo_cap => tensor_y_fifo_cap,
        if_empty_n => tensor_y_empty_n,
        if_read => tensor_weight_x_U0_tensor_y_read);

    tensor_U : component optical_flow_fifo_w192_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tensor_weight_x_U0_tensor_din,
        if_full_n => tensor_full_n,
        if_write => tensor_weight_x_U0_tensor_write,
        if_dout => tensor_dout,
        if_num_data_valid => tensor_num_data_valid,
        if_fifo_cap => tensor_fifo_cap,
        if_empty_n => tensor_empty_n,
        if_read => flow_calc_U0_tensor_read);

    start_for_gradient_xy_calc_U0_U : component optical_flow_start_for_gradient_xy_calc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_xy_calc_U0_din,
        if_full_n => start_for_gradient_xy_calc_U0_full_n,
        if_write => Loop_FRAMES_CP_OUTER_proc1_U0_start_write,
        if_dout => start_for_gradient_xy_calc_U0_dout,
        if_empty_n => start_for_gradient_xy_calc_U0_empty_n,
        if_read => gradient_xy_calc_U0_ap_ready);

    start_for_gradient_z_calc_U0_U : component optical_flow_start_for_gradient_z_calc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_z_calc_U0_din,
        if_full_n => start_for_gradient_z_calc_U0_full_n,
        if_write => Loop_FRAMES_CP_OUTER_proc1_U0_start_write,
        if_dout => start_for_gradient_z_calc_U0_dout,
        if_empty_n => start_for_gradient_z_calc_U0_empty_n,
        if_read => gradient_z_calc_U0_ap_ready);

    start_for_gradient_weight_y_U0_U : component optical_flow_start_for_gradient_weight_y_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_weight_y_U0_din,
        if_full_n => start_for_gradient_weight_y_U0_full_n,
        if_write => gradient_xy_calc_U0_start_write,
        if_dout => start_for_gradient_weight_y_U0_dout,
        if_empty_n => start_for_gradient_weight_y_U0_empty_n,
        if_read => gradient_weight_y_U0_ap_ready);

    start_for_gradient_weight_x_U0_U : component optical_flow_start_for_gradient_weight_x_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_weight_x_U0_din,
        if_full_n => start_for_gradient_weight_x_U0_full_n,
        if_write => gradient_weight_y_U0_start_write,
        if_dout => start_for_gradient_weight_x_U0_dout,
        if_empty_n => start_for_gradient_weight_x_U0_empty_n,
        if_read => gradient_weight_x_U0_ap_ready);

    start_for_outer_product_U0_U : component optical_flow_start_for_outer_product_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_outer_product_U0_din,
        if_full_n => start_for_outer_product_U0_full_n,
        if_write => gradient_weight_x_U0_start_write,
        if_dout => start_for_outer_product_U0_dout,
        if_empty_n => start_for_outer_product_U0_empty_n,
        if_read => outer_product_U0_ap_ready);

    start_for_tensor_weight_y_U0_U : component optical_flow_start_for_tensor_weight_y_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_tensor_weight_y_U0_din,
        if_full_n => start_for_tensor_weight_y_U0_full_n,
        if_write => outer_product_U0_start_write,
        if_dout => start_for_tensor_weight_y_U0_dout,
        if_empty_n => start_for_tensor_weight_y_U0_empty_n,
        if_read => tensor_weight_y_U0_ap_ready);

    start_for_tensor_weight_x_U0_U : component optical_flow_start_for_tensor_weight_x_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_tensor_weight_x_U0_din,
        if_full_n => start_for_tensor_weight_x_U0_full_n,
        if_write => tensor_weight_y_U0_start_write,
        if_dout => start_for_tensor_weight_x_U0_dout,
        if_empty_n => start_for_tensor_weight_x_U0_empty_n,
        if_read => tensor_weight_x_U0_ap_ready);

    start_for_flow_calc_U0_U : component optical_flow_start_for_flow_calc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_flow_calc_U0_din,
        if_full_n => start_for_flow_calc_U0_full_n,
        if_write => tensor_weight_x_U0_start_write,
        if_dout => start_for_flow_calc_U0_dout,
        if_empty_n => start_for_flow_calc_U0_empty_n,
        if_read => flow_calc_U0_ap_ready);




    Loop_FRAMES_CP_OUTER_proc1_U0_ap_continue <= ap_const_logic_1;
    Loop_FRAMES_CP_OUTER_proc1_U0_ap_start <= ap_start;
    Loop_FRAMES_CP_OUTER_proc1_U0_start_full_n <= (start_for_gradient_z_calc_U0_full_n and start_for_gradient_xy_calc_U0_full_n);
    ap_done <= flow_calc_U0_ap_done;
    ap_idle <= (tensor_weight_y_U0_ap_idle and tensor_weight_x_U0_ap_idle and outer_product_U0_ap_idle and gradient_z_calc_U0_ap_idle and gradient_xy_calc_U0_ap_idle and gradient_weight_y_U0_ap_idle and gradient_weight_x_U0_ap_idle and flow_calc_U0_ap_idle and Loop_FRAMES_CP_OUTER_proc1_U0_ap_idle);
    ap_ready <= Loop_FRAMES_CP_OUTER_proc1_U0_ap_ready;
    flow_calc_U0_ap_continue <= ap_const_logic_1;
    flow_calc_U0_ap_start <= start_for_flow_calc_U0_empty_n;
    frames_address0 <= Loop_FRAMES_CP_OUTER_proc1_U0_frames_address0;
    frames_address1 <= ap_const_lv19_0;
    frames_ce0 <= Loop_FRAMES_CP_OUTER_proc1_U0_frames_ce0;
    frames_ce1 <= ap_const_logic_0;
    frames_d0 <= ap_const_lv64_0;
    frames_d1 <= ap_const_lv64_0;
    frames_we0 <= ap_const_logic_0;
    frames_we1 <= ap_const_logic_0;
    gradient_weight_x_U0_ap_continue <= ap_const_logic_1;
    gradient_weight_x_U0_ap_start <= start_for_gradient_weight_x_U0_empty_n;
    gradient_weight_y_U0_ap_continue <= ap_const_logic_1;
    gradient_weight_y_U0_ap_start <= start_for_gradient_weight_y_U0_empty_n;
    gradient_xy_calc_U0_ap_continue <= ap_const_logic_1;
    gradient_xy_calc_U0_ap_start <= start_for_gradient_xy_calc_U0_empty_n;
    gradient_z_calc_U0_ap_continue <= ap_const_logic_1;
    gradient_z_calc_U0_ap_start <= start_for_gradient_z_calc_U0_empty_n;
    outer_product_U0_ap_continue <= ap_const_logic_1;
    outer_product_U0_ap_start <= start_for_outer_product_U0_empty_n;
    outputs_address0 <= flow_calc_U0_outputs_address0;
    outputs_address1 <= ap_const_lv19_0;
    outputs_ce0 <= flow_calc_U0_outputs_ce0;
    outputs_ce1 <= ap_const_logic_0;
    outputs_d0 <= flow_calc_U0_outputs_d0;
    outputs_d1 <= ap_const_lv64_0;
    outputs_we0 <= flow_calc_U0_outputs_we0;
    outputs_we1 <= ap_const_logic_0;
    start_for_flow_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_weight_x_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_weight_y_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_xy_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_z_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_outer_product_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_tensor_weight_x_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_tensor_weight_y_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tensor_weight_x_U0_ap_continue <= ap_const_logic_1;
    tensor_weight_x_U0_ap_start <= start_for_tensor_weight_x_U0_empty_n;
    tensor_weight_y_U0_ap_continue <= ap_const_logic_1;
    tensor_weight_y_U0_ap_start <= start_for_tensor_weight_y_U0_empty_n;
end behav;

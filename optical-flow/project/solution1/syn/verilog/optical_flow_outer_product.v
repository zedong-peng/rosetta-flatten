// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_outer_product (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        filtered_gradient_x_V_dout,
        filtered_gradient_x_V_num_data_valid,
        filtered_gradient_x_V_fifo_cap,
        filtered_gradient_x_V_empty_n,
        filtered_gradient_x_V_read,
        filtered_gradient_y_V_dout,
        filtered_gradient_y_V_num_data_valid,
        filtered_gradient_y_V_fifo_cap,
        filtered_gradient_y_V_empty_n,
        filtered_gradient_y_V_read,
        filtered_gradient_z_V_dout,
        filtered_gradient_z_V_num_data_valid,
        filtered_gradient_z_V_fifo_cap,
        filtered_gradient_z_V_empty_n,
        filtered_gradient_z_V_read,
        out_product_din,
        out_product_num_data_valid,
        out_product_fifo_cap,
        out_product_full_n,
        out_product_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] filtered_gradient_x_V_dout;
input  [10:0] filtered_gradient_x_V_num_data_valid;
input  [10:0] filtered_gradient_x_V_fifo_cap;
input   filtered_gradient_x_V_empty_n;
output   filtered_gradient_x_V_read;
input  [31:0] filtered_gradient_y_V_dout;
input  [10:0] filtered_gradient_y_V_num_data_valid;
input  [10:0] filtered_gradient_y_V_fifo_cap;
input   filtered_gradient_y_V_empty_n;
output   filtered_gradient_y_V_read;
input  [31:0] filtered_gradient_z_V_dout;
input  [10:0] filtered_gradient_z_V_num_data_valid;
input  [10:0] filtered_gradient_z_V_fifo_cap;
input   filtered_gradient_z_V_empty_n;
output   filtered_gradient_z_V_read;
output  [191:0] out_product_din;
input  [10:0] out_product_num_data_valid;
input  [10:0] out_product_fifo_cap;
input   out_product_full_n;
output   out_product_write;
output   start_out;
output   start_write;

reg ap_idle;
reg filtered_gradient_x_V_read;
reg filtered_gradient_y_V_read;
reg filtered_gradient_z_V_read;
reg out_product_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln238_fu_101_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    filtered_gradient_x_V_blk_n;
wire    ap_block_pp0_stage0;
reg    filtered_gradient_y_V_blk_n;
reg    filtered_gradient_z_V_blk_n;
reg    out_product_blk_n;
reg    ap_block_pp0_stage0_11001;
wire  signed [35:0] sext_ln1270_fu_148_p1;
wire  signed [35:0] sext_ln1270_35_fu_152_p1;
wire  signed [35:0] sext_ln1270_36_fu_156_p1;
reg   [18:0] indvar_flatten_fu_64;
wire   [18:0] add_ln238_fu_107_p2;
wire    ap_loop_init;
reg   [18:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [17:0] r_V_fu_118_p4;
wire   [17:0] r_V_96_fu_128_p4;
wire   [17:0] r_V_1_fu_138_p4;
wire  signed [35:0] grp_fu_270_p2;
wire   [30:0] out_val_V_fu_160_p4;
wire  signed [35:0] grp_fu_277_p2;
wire   [30:0] out_val_V_1_fu_173_p4;
wire  signed [35:0] grp_fu_292_p2;
wire   [30:0] out_val_V_2_fu_186_p4;
wire  signed [35:0] grp_fu_306_p2;
wire  signed [35:0] grp_fu_284_p2;
wire   [29:0] tmp_1_fu_215_p4;
wire  signed [35:0] grp_fu_299_p2;
wire   [30:0] tmp_s_fu_228_p4;
wire  signed [31:0] sext_ln818_2_fu_195_p1;
wire  signed [30:0] sext_ln254_fu_224_p1;
wire   [0:0] tmp_fu_208_p3;
wire  signed [31:0] sext_ln818_1_fu_182_p1;
wire  signed [31:0] sext_ln818_fu_169_p1;
wire   [158:0] tmp_3_fu_237_p7;
wire   [30:0] trunc_ln818_4_fu_199_p4;
wire  signed [159:0] sext_ln254_1_fu_253_p1;
wire   [190:0] tmp_4_fu_257_p3;
wire  signed [17:0] grp_fu_270_p0;
wire  signed [17:0] grp_fu_270_p1;
wire  signed [17:0] grp_fu_277_p0;
wire  signed [17:0] grp_fu_277_p1;
wire  signed [17:0] grp_fu_284_p0;
wire  signed [17:0] grp_fu_284_p1;
wire  signed [17:0] grp_fu_292_p0;
wire  signed [17:0] grp_fu_292_p1;
wire  signed [17:0] grp_fu_299_p0;
wire  signed [17:0] grp_fu_299_p1;
wire  signed [17:0] grp_fu_306_p0;
wire  signed [17:0] grp_fu_306_p1;
reg    grp_fu_270_ce;
reg    grp_fu_277_ce;
reg    grp_fu_284_ce;
reg    grp_fu_292_ce;
reg    grp_fu_299_ce;
reg    grp_fu_306_ce;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_145;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

optical_flow_mul_mul_18s_18s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mul_mul_18s_18s_36_4_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_270_p0),
    .din1(grp_fu_270_p1),
    .ce(grp_fu_270_ce),
    .dout(grp_fu_270_p2)
);

optical_flow_mul_mul_18s_18s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mul_mul_18s_18s_36_4_1_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_277_p0),
    .din1(grp_fu_277_p1),
    .ce(grp_fu_277_ce),
    .dout(grp_fu_277_p2)
);

optical_flow_mul_mul_18s_18s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mul_mul_18s_18s_36_4_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .din1(grp_fu_284_p1),
    .ce(grp_fu_284_ce),
    .dout(grp_fu_284_p2)
);

optical_flow_mul_mul_18s_18s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mul_mul_18s_18s_36_4_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_292_p0),
    .din1(grp_fu_292_p1),
    .ce(grp_fu_292_ce),
    .dout(grp_fu_292_p2)
);

optical_flow_mul_mul_18s_18s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mul_mul_18s_18s_36_4_1_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_299_p0),
    .din1(grp_fu_299_p1),
    .ce(grp_fu_299_ce),
    .dout(grp_fu_299_p2)
);

optical_flow_mul_mul_18s_18s_36_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mul_mul_18s_18s_36_4_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_306_p0),
    .din1(grp_fu_306_p1),
    .ce(grp_fu_306_ce),
    .dout(grp_fu_306_p2)
);

optical_flow_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_145)) begin
        if ((icmp_ln238_fu_101_p2 == 1'd0)) begin
            indvar_flatten_fu_64 <= add_ln238_fu_107_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 19'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (*) begin
    if (((icmp_ln238_fu_101_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 19'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_x_V_blk_n = filtered_gradient_x_V_empty_n;
    end else begin
        filtered_gradient_x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_x_V_read = 1'b1;
    end else begin
        filtered_gradient_x_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_y_V_blk_n = filtered_gradient_y_V_empty_n;
    end else begin
        filtered_gradient_y_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_y_V_read = 1'b1;
    end else begin
        filtered_gradient_y_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_z_V_blk_n = filtered_gradient_z_V_empty_n;
    end else begin
        filtered_gradient_z_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_z_V_read = 1'b1;
    end else begin
        filtered_gradient_z_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_270_ce = 1'b1;
    end else begin
        grp_fu_270_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_277_ce = 1'b1;
    end else begin
        grp_fu_277_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_284_ce = 1'b1;
    end else begin
        grp_fu_284_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_292_ce = 1'b1;
    end else begin
        grp_fu_292_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_299_ce = 1'b1;
    end else begin
        grp_fu_299_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_306_ce = 1'b1;
    end else begin
        grp_fu_306_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_product_blk_n = out_product_full_n;
    end else begin
        out_product_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_product_write = 1'b1;
    end else begin
        out_product_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln238_fu_107_p2 = (ap_sig_allocacmp_indvar_flatten_load + 19'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((out_product_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((filtered_gradient_z_V_empty_n == 1'b0) | (filtered_gradient_y_V_empty_n == 1'b0) | (filtered_gradient_x_V_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((out_product_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((filtered_gradient_z_V_empty_n == 1'b0) | (filtered_gradient_y_V_empty_n == 1'b0) | (filtered_gradient_x_V_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((out_product_full_n == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((filtered_gradient_z_V_empty_n == 1'b0) | (filtered_gradient_y_V_empty_n == 1'b0) | (filtered_gradient_x_V_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((filtered_gradient_z_V_empty_n == 1'b0) | (filtered_gradient_y_V_empty_n == 1'b0) | (filtered_gradient_x_V_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (out_product_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_145 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign grp_fu_270_p0 = sext_ln1270_fu_148_p1;

assign grp_fu_270_p1 = sext_ln1270_fu_148_p1;

assign grp_fu_277_p0 = sext_ln1270_35_fu_152_p1;

assign grp_fu_277_p1 = sext_ln1270_35_fu_152_p1;

assign grp_fu_284_p0 = sext_ln1270_36_fu_156_p1;

assign grp_fu_284_p1 = sext_ln1270_36_fu_156_p1;

assign grp_fu_292_p0 = sext_ln1270_35_fu_152_p1;

assign grp_fu_292_p1 = sext_ln1270_fu_148_p1;

assign grp_fu_299_p0 = sext_ln1270_36_fu_156_p1;

assign grp_fu_299_p1 = sext_ln1270_fu_148_p1;

assign grp_fu_306_p0 = sext_ln1270_36_fu_156_p1;

assign grp_fu_306_p1 = sext_ln1270_35_fu_152_p1;

assign icmp_ln238_fu_101_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 19'd446464) ? 1'b1 : 1'b0);

assign out_product_din = $signed(tmp_4_fu_257_p3);

assign out_val_V_1_fu_173_p4 = {{grp_fu_277_p2[35:5]}};

assign out_val_V_2_fu_186_p4 = {{grp_fu_292_p2[35:5]}};

assign out_val_V_fu_160_p4 = {{grp_fu_270_p2[35:5]}};

assign r_V_1_fu_138_p4 = {{filtered_gradient_z_V_dout[31:14]}};

assign r_V_96_fu_128_p4 = {{filtered_gradient_y_V_dout[31:14]}};

assign r_V_fu_118_p4 = {{filtered_gradient_x_V_dout[31:14]}};

assign sext_ln1270_35_fu_152_p1 = $signed(r_V_96_fu_128_p4);

assign sext_ln1270_36_fu_156_p1 = $signed(r_V_1_fu_138_p4);

assign sext_ln1270_fu_148_p1 = $signed(r_V_fu_118_p4);

assign sext_ln254_1_fu_253_p1 = $signed(tmp_3_fu_237_p7);

assign sext_ln254_fu_224_p1 = $signed(tmp_1_fu_215_p4);

assign sext_ln818_1_fu_182_p1 = $signed(out_val_V_1_fu_173_p4);

assign sext_ln818_2_fu_195_p1 = $signed(out_val_V_2_fu_186_p4);

assign sext_ln818_fu_169_p1 = $signed(out_val_V_fu_160_p4);

assign start_out = real_start;

assign tmp_1_fu_215_p4 = {{grp_fu_284_p2[35:6]}};

assign tmp_3_fu_237_p7 = {{{{{{tmp_s_fu_228_p4}, {sext_ln818_2_fu_195_p1}}, {sext_ln254_fu_224_p1}}, {tmp_fu_208_p3}}, {sext_ln818_1_fu_182_p1}}, {sext_ln818_fu_169_p1}};

assign tmp_4_fu_257_p3 = {{trunc_ln818_4_fu_199_p4}, {sext_ln254_1_fu_253_p1}};

assign tmp_fu_208_p3 = grp_fu_284_p2[32'd5];

assign tmp_s_fu_228_p4 = {{grp_fu_299_p2[35:5]}};

assign trunc_ln818_4_fu_199_p4 = {{grp_fu_306_p2[35:5]}};

endmodule //optical_flow_outer_product

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_tensor_weight_y (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_product_dout,
        out_product_num_data_valid,
        out_product_fifo_cap,
        out_product_empty_n,
        out_product_read,
        tensor_y_din,
        tensor_y_num_data_valid,
        tensor_y_fifo_cap,
        tensor_y_full_n,
        tensor_y_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 6'd1;
parameter    ap_ST_fsm_pp0_stage1 = 6'd2;
parameter    ap_ST_fsm_pp0_stage2 = 6'd4;
parameter    ap_ST_fsm_pp0_stage3 = 6'd8;
parameter    ap_ST_fsm_pp0_stage4 = 6'd16;
parameter    ap_ST_fsm_pp0_stage5 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [191:0] out_product_dout;
input  [10:0] out_product_num_data_valid;
input  [10:0] out_product_fifo_cap;
input   out_product_empty_n;
output   out_product_read;
output  [191:0] tensor_y_din;
input  [10:0] tensor_y_num_data_valid;
input  [10:0] tensor_y_fifo_cap;
input   tensor_y_full_n;
output   tensor_y_write;
output   start_out;
output   start_write;

reg ap_idle;
reg out_product_read;
reg tensor_y_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln265_reg_1257;
reg   [0:0] select_ln265_1_reg_1261;
reg    ap_predicate_op79_read_state2;
reg    ap_block_state2_pp0_stage1_iter0;
reg   [0:0] select_ln265_2_reg_1265;
reg   [0:0] select_ln265_2_reg_1265_pp0_iter1_reg;
reg    ap_block_state8_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
reg    out_product_blk_n;
wire    ap_block_pp0_stage1;
reg    tensor_y_blk_n;
reg  signed [31:0] tmp_val_V_24_reg_260;
wire   [0:0] icmp_ln265_fu_382_p2;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] select_ln265_1_fu_427_p3;
wire   [0:0] select_ln265_2_fu_463_p3;
wire   [0:0] select_ln265_3_fu_477_p3;
reg   [0:0] select_ln265_3_reg_1269;
reg   [0:0] select_ln265_3_reg_1269_pp0_iter1_reg;
wire   [12:0] sub_ln911_fu_513_p2;
reg   [12:0] sub_ln911_reg_1279;
reg   [12:0] buf_val_val_V_addr_reg_1288;
reg   [12:0] buf_val_val_V_1_addr_reg_1294;
reg   [12:0] buf_val_val_V_addr_1_reg_1300;
reg    ap_block_pp0_stage1_11001;
reg   [12:0] buf_val_val_V_1_addr_1_reg_1306;
wire  signed [31:0] buf_val_val_V_q0;
reg  signed [31:0] tmp_val_V_30_reg_1312;
wire  signed [31:0] buf_val_val_V_1_q0;
reg  signed [31:0] tmp_val_V_36_reg_1317;
reg   [12:0] buf_val_val_V_addr_2_reg_1347;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [12:0] buf_val_val_V_1_addr_2_reg_1353;
reg   [31:0] acc_val_V_1_reg_1359;
reg   [12:0] buf_val_val_V_addr_3_reg_1364;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [12:0] buf_val_val_V_1_addr_3_reg_1370;
reg   [31:0] acc_val_V_2_reg_1376;
reg   [12:0] buf_val_val_V_addr_4_reg_1381;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [12:0] buf_val_val_V_1_addr_4_reg_1387;
reg   [31:0] acc_val_V_3_reg_1393;
reg   [12:0] buf_val_val_V_addr_5_reg_1398;
wire    ap_block_pp0_stage5_11001;
reg   [12:0] buf_val_val_V_1_addr_5_reg_1404;
reg   [31:0] acc_val_V_4_reg_1410;
reg   [31:0] acc_val_V_5_reg_1415;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [12:0] buf_val_val_V_address0;
reg    buf_val_val_V_ce0;
reg   [12:0] buf_val_val_V_address1;
reg    buf_val_val_V_ce1;
reg    buf_val_val_V_we1;
reg   [12:0] buf_val_val_V_1_address0;
reg    buf_val_val_V_1_ce0;
reg   [12:0] buf_val_val_V_1_address1;
reg    buf_val_val_V_1_ce1;
reg    buf_val_val_V_1_we1;
reg   [31:0] buf_val_val_V_1_d1;
reg  signed [31:0] ap_phi_mux_tmp_val_V_24_phi_fu_264_p4;
wire   [31:0] tmp_val_V_fu_557_p1;
wire  signed [31:0] ap_phi_reg_pp0_iter0_tmp_val_V_24_reg_260;
reg  signed [31:0] ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273;
reg  signed [31:0] ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285;
reg  signed [31:0] ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297;
reg  signed [31:0] ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309;
reg  signed [31:0] ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321;
reg  signed [31:0] ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321;
wire   [63:0] zext_ln911_1_fu_519_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln911_2_fu_551_p1;
wire   [63:0] zext_ln911_3_fu_617_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln911_4_fu_716_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln911_5_fu_815_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln911_6_fu_914_p1;
wire    ap_block_pp0_stage5;
reg   [10:0] c_fu_122;
wire   [10:0] add_ln267_fu_525_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_c_load;
reg   [8:0] r_fu_126;
wire   [8:0] select_ln265_4_fu_485_p3;
reg   [8:0] ap_sig_allocacmp_r_1;
reg   [18:0] indvar_flatten_fu_130;
wire   [18:0] add_ln265_1_fu_388_p2;
reg   [18:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage1_01001;
wire   [7:0] tmp_14_fu_360_p4;
wire   [0:0] icmp_fu_370_p2;
wire   [0:0] cmp6_i_fu_354_p2;
wire   [0:0] icmp_ln267_fu_403_p2;
wire   [10:0] select_ln265_fu_409_p3;
wire   [8:0] add_ln265_fu_397_p2;
wire   [0:0] cmp6_i_mid1_fu_421_p2;
wire   [7:0] tmp_15_fu_435_p4;
wire   [0:0] cmp56_i_mid1_fu_451_p2;
wire   [0:0] cmp56_i3_fu_457_p2;
wire   [0:0] icmp24_fu_445_p2;
wire   [0:0] sel_tmp_mid1_fu_471_p2;
wire   [0:0] sel_tmp_fu_376_p2;
wire   [9:0] empty_42_fu_417_p1;
wire   [11:0] tmp_1_fu_501_p3;
wire   [12:0] tmp_fu_493_p3;
wire   [12:0] zext_ln911_fu_509_p1;
wire   [12:0] or_ln911_fu_546_p2;
wire   [12:0] add_ln911_fu_612_p2;
wire   [18:0] r_V_3_fu_627_p1;
wire   [50:0] r_V_3_fu_627_p2;
wire   [31:0] tmp_3_fu_633_p4;
wire   [18:0] r_V_15_fu_655_p1;
wire   [50:0] r_V_15_fu_655_p2;
wire   [50:0] lhs_1_fu_643_p3;
wire   [50:0] ret_V_1_fu_661_p2;
wire   [31:0] tmp_9_fu_667_p4;
wire   [18:0] r_V_27_fu_689_p1;
wire   [50:0] r_V_27_fu_689_p2;
wire   [50:0] lhs_7_fu_677_p3;
wire   [50:0] ret_V_7_fu_695_p2;
wire   [12:0] add_ln911_1_fu_711_p2;
wire   [18:0] r_V_5_fu_726_p1;
wire   [50:0] r_V_5_fu_726_p2;
wire   [31:0] tmp_4_fu_732_p4;
wire   [18:0] r_V_17_fu_754_p1;
wire   [50:0] r_V_17_fu_754_p2;
wire   [50:0] lhs_2_fu_742_p3;
wire   [50:0] ret_V_2_fu_760_p2;
wire   [31:0] tmp_s_fu_766_p4;
wire   [18:0] r_V_29_fu_788_p1;
wire   [50:0] r_V_29_fu_788_p2;
wire   [50:0] lhs_8_fu_776_p3;
wire   [50:0] ret_V_8_fu_794_p2;
wire   [12:0] add_ln911_2_fu_810_p2;
wire   [18:0] r_V_7_fu_825_p1;
wire   [50:0] r_V_7_fu_825_p2;
wire   [31:0] tmp_5_fu_831_p4;
wire   [18:0] r_V_19_fu_853_p1;
wire   [50:0] r_V_19_fu_853_p2;
wire   [50:0] lhs_3_fu_841_p3;
wire   [50:0] ret_V_3_fu_859_p2;
wire   [31:0] tmp_10_fu_865_p4;
wire   [18:0] r_V_31_fu_887_p1;
wire   [50:0] r_V_31_fu_887_p2;
wire   [50:0] lhs_9_fu_875_p3;
wire   [50:0] ret_V_9_fu_893_p2;
wire   [12:0] add_ln911_3_fu_909_p2;
wire   [18:0] r_V_9_fu_924_p1;
wire   [50:0] r_V_9_fu_924_p2;
wire   [31:0] tmp_6_fu_930_p4;
wire   [18:0] r_V_21_fu_952_p1;
wire   [50:0] r_V_21_fu_952_p2;
wire   [50:0] lhs_4_fu_940_p3;
wire   [50:0] ret_V_4_fu_958_p2;
wire   [31:0] tmp_11_fu_964_p4;
wire   [18:0] r_V_33_fu_986_p1;
wire   [50:0] r_V_33_fu_986_p2;
wire   [50:0] lhs_11_fu_974_p3;
wire   [50:0] ret_V_10_fu_992_p2;
wire   [18:0] r_V_11_fu_1012_p1;
wire   [50:0] r_V_11_fu_1012_p2;
wire   [31:0] tmp_7_fu_1018_p4;
wire   [18:0] r_V_23_fu_1040_p1;
wire   [50:0] r_V_23_fu_1040_p2;
wire   [50:0] lhs_5_fu_1028_p3;
wire   [50:0] ret_V_5_fu_1046_p2;
wire   [31:0] tmp_12_fu_1052_p4;
wire   [18:0] r_V_35_fu_1074_p1;
wire   [50:0] r_V_35_fu_1074_p2;
wire   [50:0] lhs_10_fu_1062_p3;
wire   [50:0] ret_V_11_fu_1080_p2;
wire   [18:0] r_V_1_fu_1099_p1;
wire   [50:0] r_V_1_fu_1099_p2;
wire   [31:0] tmp_2_fu_1105_p4;
wire   [18:0] r_V_13_fu_1126_p1;
wire   [50:0] r_V_13_fu_1126_p2;
wire   [50:0] lhs_fu_1115_p3;
wire   [50:0] ret_V_fu_1132_p2;
wire   [31:0] tmp_8_fu_1138_p4;
wire   [18:0] r_V_25_fu_1160_p1;
wire   [50:0] r_V_25_fu_1160_p2;
wire   [50:0] lhs_6_fu_1148_p3;
wire   [50:0] ret_V_6_fu_1166_p2;
wire   [31:0] acc_val_V_fu_1172_p4;
wire   [31:0] acc_val_V_11_fu_1182_p3;
wire   [31:0] acc_val_V_10_fu_1188_p3;
wire   [31:0] acc_val_V_9_fu_1194_p3;
wire   [31:0] acc_val_V_8_fu_1200_p3;
wire   [31:0] acc_val_V_7_fu_1206_p3;
wire   [31:0] acc_val_V_6_fu_1212_p3;
wire    ap_continue_int;
reg    ap_done_int;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0;
reg    ap_enable_operation_61;
reg    ap_enable_state1_pp0_iter0_stage0;
reg    ap_enable_operation_74;
reg    ap_enable_state2_pp0_iter0_stage1;
reg    ap_enable_operation_78;
reg    ap_enable_operation_62;
reg    ap_enable_operation_76;
reg    ap_enable_operation_88;
reg    ap_predicate_op75_load_state2;
reg    ap_enable_operation_75;
reg    ap_predicate_op93_load_state3;
reg    ap_enable_operation_93;
reg    ap_enable_state3_pp0_iter0_stage2;
reg    ap_enable_operation_97;
reg    ap_enable_operation_77;
reg    ap_enable_operation_95;
reg    ap_enable_operation_99;
reg    ap_predicate_op94_load_state3;
reg    ap_enable_operation_94;
reg    ap_predicate_op117_load_state4;
reg    ap_enable_operation_117;
reg    ap_enable_state4_pp0_iter0_stage3;
reg    ap_enable_operation_121;
reg    ap_enable_operation_96;
reg    ap_enable_operation_119;
reg    ap_enable_operation_123;
reg    ap_predicate_op118_load_state4;
reg    ap_enable_operation_118;
reg    ap_predicate_op141_load_state5;
reg    ap_enable_operation_141;
reg    ap_enable_state5_pp0_iter0_stage4;
reg    ap_enable_operation_145;
reg    ap_enable_operation_120;
reg    ap_enable_operation_143;
reg    ap_enable_operation_147;
reg    ap_predicate_op142_load_state5;
reg    ap_enable_operation_142;
reg    ap_predicate_op165_load_state6;
reg    ap_enable_operation_165;
reg    ap_enable_state6_pp0_iter0_stage5;
reg    ap_enable_operation_169;
reg    ap_enable_operation_144;
reg    ap_enable_operation_167;
reg    ap_enable_operation_171;
reg    ap_predicate_op166_load_state6;
reg    ap_enable_operation_166;
reg    ap_predicate_op189_load_state7;
reg    ap_enable_operation_189;
reg    ap_enable_state7_pp0_iter1_stage0;
reg    ap_enable_operation_191;
reg    ap_enable_operation_168;
reg    ap_enable_operation_190;
wire    ap_enable_operation_193;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_180;
reg    ap_condition_1065;
reg    ap_condition_291;
reg    ap_condition_174;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

optical_flow_tensor_weight_y_buf_val_val_V_RAM_S2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 6144 ),
    .AddressWidth( 13 ))
buf_val_val_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_val_V_address0),
    .ce0(buf_val_val_V_ce0),
    .q0(buf_val_val_V_q0),
    .address1(buf_val_val_V_address1),
    .ce1(buf_val_val_V_ce1),
    .we1(buf_val_val_V_we1),
    .d1(buf_val_val_V_1_q0)
);

optical_flow_tensor_weight_y_buf_val_val_V_RAM_S2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 6144 ),
    .AddressWidth( 13 ))
buf_val_val_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_val_V_1_address0),
    .ce0(buf_val_val_V_1_ce0),
    .q0(buf_val_val_V_1_q0),
    .address1(buf_val_val_V_1_address1),
    .ce1(buf_val_val_V_1_ce1),
    .we1(buf_val_val_V_1_we1),
    .d1(buf_val_val_V_1_d1)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U89(
    .din0(buf_val_val_V_q0),
    .din1(r_V_3_fu_627_p1),
    .dout(r_V_3_fu_627_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U90(
    .din0(buf_val_val_V_1_q0),
    .din1(r_V_15_fu_655_p1),
    .dout(r_V_15_fu_655_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U91(
    .din0(ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273),
    .din1(r_V_27_fu_689_p1),
    .dout(r_V_27_fu_689_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U92(
    .din0(buf_val_val_V_q0),
    .din1(r_V_5_fu_726_p1),
    .dout(r_V_5_fu_726_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U93(
    .din0(buf_val_val_V_1_q0),
    .din1(r_V_17_fu_754_p1),
    .dout(r_V_17_fu_754_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U94(
    .din0(ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285),
    .din1(r_V_29_fu_788_p1),
    .dout(r_V_29_fu_788_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U95(
    .din0(buf_val_val_V_q0),
    .din1(r_V_7_fu_825_p1),
    .dout(r_V_7_fu_825_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U96(
    .din0(buf_val_val_V_1_q0),
    .din1(r_V_19_fu_853_p1),
    .dout(r_V_19_fu_853_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U97(
    .din0(ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297),
    .din1(r_V_31_fu_887_p1),
    .dout(r_V_31_fu_887_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U98(
    .din0(buf_val_val_V_q0),
    .din1(r_V_9_fu_924_p1),
    .dout(r_V_9_fu_924_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U99(
    .din0(buf_val_val_V_1_q0),
    .din1(r_V_21_fu_952_p1),
    .dout(r_V_21_fu_952_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U100(
    .din0(ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309),
    .din1(r_V_33_fu_986_p1),
    .dout(r_V_33_fu_986_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U101(
    .din0(buf_val_val_V_q0),
    .din1(r_V_11_fu_1012_p1),
    .dout(r_V_11_fu_1012_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U102(
    .din0(buf_val_val_V_1_q0),
    .din1(r_V_23_fu_1040_p1),
    .dout(r_V_23_fu_1040_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U103(
    .din0(ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321),
    .din1(r_V_35_fu_1074_p1),
    .dout(r_V_35_fu_1074_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U104(
    .din0(tmp_val_V_30_reg_1312),
    .din1(r_V_1_fu_1099_p1),
    .dout(r_V_1_fu_1099_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U105(
    .din0(tmp_val_V_36_reg_1317),
    .din1(r_V_13_fu_1126_p1),
    .dout(r_V_13_fu_1126_p2)
);

optical_flow_mul_32s_19ns_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 19 ),
    .dout_WIDTH( 51 ))
mul_32s_19ns_51_1_1_U106(
    .din0(tmp_val_V_24_reg_260),
    .din1(r_V_25_fu_1160_p1),
    .dout(r_V_25_fu_1160_p2)
);

optical_flow_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1065)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273 <= 32'd0;
        end else if ((1'b1 == ap_condition_180)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273 <= {{out_product_dout[63:32]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1065)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285 <= 32'd0;
        end else if ((1'b1 == ap_condition_180)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285 <= {{out_product_dout[95:64]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1065)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297 <= 32'd0;
        end else if ((1'b1 == ap_condition_180)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297 <= {{out_product_dout[127:96]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1065)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309 <= 32'd0;
        end else if ((1'b1 == ap_condition_180)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309 <= {{out_product_dout[159:128]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1065)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321 <= 32'd0;
        end else if ((1'b1 == ap_condition_180)) begin
            ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321 <= {{out_product_dout[191:160]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_291)) begin
        if ((icmp_ln265_fu_382_p2 == 1'd0)) begin
            c_fu_122 <= add_ln267_fu_525_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_122 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_291)) begin
        if ((icmp_ln265_fu_382_p2 == 1'd0)) begin
            indvar_flatten_fu_130 <= add_ln265_1_fu_388_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_130 <= 19'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_291)) begin
        if ((icmp_ln265_fu_382_p2 == 1'd0)) begin
            r_fu_126 <= select_ln265_4_fu_485_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_126 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_174)) begin
        if (((select_ln265_1_reg_1261 == 1'd1) & (icmp_ln265_reg_1257 == 1'd0))) begin
            tmp_val_V_24_reg_260 <= tmp_val_V_fu_557_p1;
        end else if ((1'b1 == 1'b1)) begin
            tmp_val_V_24_reg_260 <= ap_phi_reg_pp0_iter0_tmp_val_V_24_reg_260;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (select_ln265_3_reg_1269 == 1'd1))) begin
        acc_val_V_1_reg_1359 <= {{ret_V_7_fu_695_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (select_ln265_3_reg_1269 == 1'd1))) begin
        acc_val_V_2_reg_1376 <= {{ret_V_8_fu_794_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (select_ln265_3_reg_1269 == 1'd1))) begin
        acc_val_V_3_reg_1393 <= {{ret_V_9_fu_893_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (select_ln265_3_reg_1269 == 1'd1))) begin
        acc_val_V_4_reg_1410 <= {{ret_V_10_fu_992_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln265_3_reg_1269 == 1'd1))) begin
        acc_val_V_5_reg_1415 <= {{ret_V_11_fu_1080_p2[50:19]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321 <= ap_phi_reg_pp0_iter0_tmp_val_V_29_reg_321;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buf_val_val_V_1_addr_1_reg_1306[12 : 1] <= zext_ln911_2_fu_551_p1[12 : 1];
        buf_val_val_V_addr_1_reg_1300[12 : 1] <= zext_ln911_2_fu_551_p1[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        buf_val_val_V_1_addr_2_reg_1353[12 : 1] <= zext_ln911_3_fu_617_p1[12 : 1];
        buf_val_val_V_addr_2_reg_1347[12 : 1] <= zext_ln911_3_fu_617_p1[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        buf_val_val_V_1_addr_3_reg_1370[12 : 1] <= zext_ln911_4_fu_716_p1[12 : 1];
        buf_val_val_V_addr_3_reg_1364[12 : 1] <= zext_ln911_4_fu_716_p1[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        buf_val_val_V_1_addr_4_reg_1387[12 : 1] <= zext_ln911_5_fu_815_p1[12 : 1];
        buf_val_val_V_addr_4_reg_1381[12 : 1] <= zext_ln911_5_fu_815_p1[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        buf_val_val_V_1_addr_5_reg_1404[12 : 1] <= zext_ln911_6_fu_914_p1[12 : 1];
        buf_val_val_V_addr_5_reg_1398[12 : 1] <= zext_ln911_6_fu_914_p1[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln265_fu_382_p2 == 1'd0))) begin
        buf_val_val_V_1_addr_reg_1294[12 : 1] <= zext_ln911_1_fu_519_p1[12 : 1];
        buf_val_val_V_addr_reg_1288[12 : 1] <= zext_ln911_1_fu_519_p1[12 : 1];
        select_ln265_1_reg_1261 <= select_ln265_1_fu_427_p3;
        select_ln265_2_reg_1265 <= select_ln265_2_fu_463_p3;
        select_ln265_3_reg_1269 <= select_ln265_3_fu_477_p3;
        sub_ln911_reg_1279[12 : 1] <= sub_ln911_fu_513_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln265_reg_1257 <= icmp_ln265_fu_382_p2;
        select_ln265_2_reg_1265_pp0_iter1_reg <= select_ln265_2_reg_1265;
        select_ln265_3_reg_1269_pp0_iter1_reg <= select_ln265_3_reg_1269;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_val_V_30_reg_1312 <= buf_val_val_V_q0;
        tmp_val_V_36_reg_1317 <= buf_val_val_V_1_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln265_reg_1257 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln265_1_reg_1261 == 1'd1) & (icmp_ln265_reg_1257 == 1'd0))) begin
        ap_phi_mux_tmp_val_V_24_phi_fu_264_p4 = tmp_val_V_fu_557_p1;
    end else begin
        ap_phi_mux_tmp_val_V_24_phi_fu_264_p4 = 32'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c_load = 11'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 19'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_130;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_r_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_r_1 = r_fu_126;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            buf_val_val_V_1_address0 = zext_ln911_6_fu_914_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            buf_val_val_V_1_address0 = zext_ln911_5_fu_815_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            buf_val_val_V_1_address0 = zext_ln911_4_fu_716_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            buf_val_val_V_1_address0 = zext_ln911_3_fu_617_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            buf_val_val_V_1_address0 = zext_ln911_2_fu_551_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            buf_val_val_V_1_address0 = zext_ln911_1_fu_519_p1;
        end else begin
            buf_val_val_V_1_address0 = 'bx;
        end
    end else begin
        buf_val_val_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_val_V_1_address1 = buf_val_val_V_1_addr_5_reg_1404;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        buf_val_val_V_1_address1 = buf_val_val_V_1_addr_4_reg_1387;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        buf_val_val_V_1_address1 = buf_val_val_V_1_addr_3_reg_1370;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        buf_val_val_V_1_address1 = buf_val_val_V_1_addr_2_reg_1353;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        buf_val_val_V_1_address1 = buf_val_val_V_1_addr_1_reg_1306;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buf_val_val_V_1_address1 = buf_val_val_V_1_addr_reg_1294;
    end else begin
        buf_val_val_V_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_val_val_V_1_ce0 = 1'b1;
    end else begin
        buf_val_val_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_val_val_V_1_ce1 = 1'b1;
    end else begin
        buf_val_val_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_val_V_1_d1 = ap_phi_reg_pp0_iter1_tmp_val_V_29_reg_321;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        buf_val_val_V_1_d1 = ap_phi_reg_pp0_iter0_tmp_val_V_28_reg_309;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        buf_val_val_V_1_d1 = ap_phi_reg_pp0_iter0_tmp_val_V_27_reg_297;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        buf_val_val_V_1_d1 = ap_phi_reg_pp0_iter0_tmp_val_V_26_reg_285;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        buf_val_val_V_1_d1 = ap_phi_reg_pp0_iter0_tmp_val_V_25_reg_273;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buf_val_val_V_1_d1 = ap_phi_mux_tmp_val_V_24_phi_fu_264_p4;
    end else begin
        buf_val_val_V_1_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_val_val_V_1_we1 = 1'b1;
    end else begin
        buf_val_val_V_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            buf_val_val_V_address0 = zext_ln911_6_fu_914_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            buf_val_val_V_address0 = zext_ln911_5_fu_815_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            buf_val_val_V_address0 = zext_ln911_4_fu_716_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            buf_val_val_V_address0 = zext_ln911_3_fu_617_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            buf_val_val_V_address0 = zext_ln911_2_fu_551_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            buf_val_val_V_address0 = zext_ln911_1_fu_519_p1;
        end else begin
            buf_val_val_V_address0 = 'bx;
        end
    end else begin
        buf_val_val_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buf_val_val_V_address1 = buf_val_val_V_addr_5_reg_1398;
    end else if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        buf_val_val_V_address1 = buf_val_val_V_addr_4_reg_1381;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        buf_val_val_V_address1 = buf_val_val_V_addr_3_reg_1364;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        buf_val_val_V_address1 = buf_val_val_V_addr_2_reg_1347;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        buf_val_val_V_address1 = buf_val_val_V_addr_1_reg_1300;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        buf_val_val_V_address1 = buf_val_val_V_addr_reg_1288;
    end else begin
        buf_val_val_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_val_val_V_ce0 = 1'b1;
    end else begin
        buf_val_val_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_val_val_V_ce1 = 1'b1;
    end else begin
        buf_val_val_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln265_reg_1257 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        buf_val_val_V_we1 = 1'b1;
    end else begin
        buf_val_val_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_predicate_op79_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_product_blk_n = out_product_empty_n;
    end else begin
        out_product_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op79_read_state2 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        out_product_read = 1'b1;
    end else begin
        out_product_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (select_ln265_2_reg_1265_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tensor_y_blk_n = tensor_y_full_n;
    end else begin
        tensor_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (select_ln265_2_reg_1265_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tensor_y_write = 1'b1;
    end else begin
        tensor_y_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start_int == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_val_V_10_fu_1188_p3 = ((select_ln265_3_reg_1269_pp0_iter1_reg[0:0] == 1'b1) ? acc_val_V_4_reg_1410 : 32'd0);

assign acc_val_V_11_fu_1182_p3 = ((select_ln265_3_reg_1269_pp0_iter1_reg[0:0] == 1'b1) ? acc_val_V_5_reg_1415 : 32'd0);

assign acc_val_V_6_fu_1212_p3 = ((select_ln265_3_reg_1269_pp0_iter1_reg[0:0] == 1'b1) ? acc_val_V_fu_1172_p4 : 32'd0);

assign acc_val_V_7_fu_1206_p3 = ((select_ln265_3_reg_1269_pp0_iter1_reg[0:0] == 1'b1) ? acc_val_V_1_reg_1359 : 32'd0);

assign acc_val_V_8_fu_1200_p3 = ((select_ln265_3_reg_1269_pp0_iter1_reg[0:0] == 1'b1) ? acc_val_V_2_reg_1376 : 32'd0);

assign acc_val_V_9_fu_1194_p3 = ((select_ln265_3_reg_1269_pp0_iter1_reg[0:0] == 1'b1) ? acc_val_V_3_reg_1393 : 32'd0);

assign acc_val_V_fu_1172_p4 = {{ret_V_6_fu_1166_p2[50:19]}};

assign add_ln265_1_fu_388_p2 = (ap_sig_allocacmp_indvar_flatten_load + 19'd1);

assign add_ln265_fu_397_p2 = (ap_sig_allocacmp_r_1 + 9'd1);

assign add_ln267_fu_525_p2 = (select_ln265_fu_409_p3 + 11'd1);

assign add_ln911_1_fu_711_p2 = (sub_ln911_reg_1279 + 13'd3);

assign add_ln911_2_fu_810_p2 = (sub_ln911_reg_1279 + 13'd4);

assign add_ln911_3_fu_909_p2 = (sub_ln911_reg_1279 + 13'd5);

assign add_ln911_fu_612_p2 = (sub_ln911_reg_1279 + 13'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage5 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage5_subdone)) | ((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)) | ((ap_ST_fsm_pp0_stage4 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage4_subdone)) | ((ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage3_subdone)) | ((ap_ST_fsm_pp0_stage2 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage2_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_done_reg == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((select_ln265_2_reg_1265_pp0_iter1_reg == 1'd0) & (tensor_y_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op79_read_state2 == 1'b1) & (out_product_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((select_ln265_2_reg_1265_pp0_iter1_reg == 1'd0) & (tensor_y_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op79_read_state2 == 1'b1) & (out_product_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((select_ln265_2_reg_1265_pp0_iter1_reg == 1'd0) & (tensor_y_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_predicate_op79_read_state2 == 1'b1) & (out_product_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (ap_done_reg == 1'b1);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((ap_predicate_op79_read_state2 == 1'b1) & (out_product_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage1_iter1 = ((select_ln265_2_reg_1265_pp0_iter1_reg == 1'd0) & (tensor_y_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_1065 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (select_ln265_1_fu_427_p3 == 1'd0) & (icmp_ln265_fu_382_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_174 = ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_180 = ((1'b0 == ap_block_pp0_stage1_11001) & (select_ln265_1_reg_1261 == 1'd1) & (icmp_ln265_reg_1257 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_condition_291 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_operation_117 = (ap_predicate_op117_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_118 = (ap_predicate_op118_load_state4 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_119 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_120 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_121 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_123 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_141 = (ap_predicate_op141_load_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_142 = (ap_predicate_op142_load_state5 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_143 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_144 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_145 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_147 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_165 = (ap_predicate_op165_load_state6 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_166 = (ap_predicate_op166_load_state6 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_167 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_168 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_169 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_171 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_189 = (ap_predicate_op189_load_state7 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_190 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_191 = (icmp_ln265_reg_1257 == 1'd0);
end

assign ap_enable_operation_193 = (1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_61 = (icmp_ln265_fu_382_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_62 = (icmp_ln265_fu_382_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_74 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_75 = (ap_predicate_op75_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_76 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_77 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_78 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_88 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_93 = (ap_predicate_op93_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_94 = (ap_predicate_op94_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_95 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_96 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_97 = (icmp_ln265_reg_1257 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_99 = (icmp_ln265_reg_1257 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state1_pp0_iter0_stage0 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage1 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state3_pp0_iter0_stage2 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_enable_state4_pp0_iter0_stage3 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_enable_state5_pp0_iter0_stage4 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

always @ (*) begin
    ap_enable_state6_pp0_iter0_stage5 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5));
end

always @ (*) begin
    ap_enable_state7_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_phi_reg_pp0_iter0_tmp_val_V_24_reg_260 = 32'd0;

always @ (*) begin
    ap_predicate_op117_load_state4 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op118_load_state4 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op141_load_state5 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op142_load_state5 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op165_load_state6 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op166_load_state6 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op189_load_state7 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op75_load_state2 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op79_read_state2 = ((select_ln265_1_reg_1261 == 1'd1) & (icmp_ln265_reg_1257 == 1'd0));
end

always @ (*) begin
    ap_predicate_op93_load_state3 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

always @ (*) begin
    ap_predicate_op94_load_state3 = ((icmp_ln265_reg_1257 == 1'd0) & (select_ln265_3_reg_1269 == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign cmp56_i3_fu_457_p2 = ((ap_sig_allocacmp_r_1 == 9'd0) ? 1'b1 : 1'b0);

assign cmp56_i_mid1_fu_451_p2 = ((add_ln265_fu_397_p2 == 9'd0) ? 1'b1 : 1'b0);

assign cmp6_i_fu_354_p2 = ((ap_sig_allocacmp_r_1 < 9'd436) ? 1'b1 : 1'b0);

assign cmp6_i_mid1_fu_421_p2 = ((add_ln265_fu_397_p2 < 9'd436) ? 1'b1 : 1'b0);

assign empty_42_fu_417_p1 = select_ln265_fu_409_p3[9:0];

assign icmp24_fu_445_p2 = ((tmp_15_fu_435_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_fu_370_p2 = ((tmp_14_fu_360_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln265_fu_382_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 19'd447488) ? 1'b1 : 1'b0);

assign icmp_ln267_fu_403_p2 = ((ap_sig_allocacmp_c_load == 11'd1024) ? 1'b1 : 1'b0);

assign lhs_10_fu_1062_p3 = {{tmp_12_fu_1052_p4}, {19'd0}};

assign lhs_11_fu_974_p3 = {{tmp_11_fu_964_p4}, {19'd0}};

assign lhs_1_fu_643_p3 = {{tmp_3_fu_633_p4}, {19'd0}};

assign lhs_2_fu_742_p3 = {{tmp_4_fu_732_p4}, {19'd0}};

assign lhs_3_fu_841_p3 = {{tmp_5_fu_831_p4}, {19'd0}};

assign lhs_4_fu_940_p3 = {{tmp_6_fu_930_p4}, {19'd0}};

assign lhs_5_fu_1028_p3 = {{tmp_7_fu_1018_p4}, {19'd0}};

assign lhs_6_fu_1148_p3 = {{tmp_8_fu_1138_p4}, {19'd0}};

assign lhs_7_fu_677_p3 = {{tmp_9_fu_667_p4}, {19'd0}};

assign lhs_8_fu_776_p3 = {{tmp_s_fu_766_p4}, {19'd0}};

assign lhs_9_fu_875_p3 = {{tmp_10_fu_865_p4}, {19'd0}};

assign lhs_fu_1115_p3 = {{tmp_2_fu_1105_p4}, {19'd0}};

assign or_ln911_fu_546_p2 = (sub_ln911_reg_1279 | 13'd1);

assign r_V_11_fu_1012_p1 = 51'd170026;

assign r_V_13_fu_1126_p1 = 51'd184182;

assign r_V_15_fu_655_p1 = 51'd184182;

assign r_V_17_fu_754_p1 = 51'd184182;

assign r_V_19_fu_853_p1 = 51'd184182;

assign r_V_1_fu_1099_p1 = 51'd170026;

assign r_V_21_fu_952_p1 = 51'd184182;

assign r_V_23_fu_1040_p1 = 51'd184182;

assign r_V_25_fu_1160_p1 = 51'd170026;

assign r_V_27_fu_689_p1 = 51'd170026;

assign r_V_29_fu_788_p1 = 51'd170026;

assign r_V_31_fu_887_p1 = 51'd170026;

assign r_V_33_fu_986_p1 = 51'd170026;

assign r_V_35_fu_1074_p1 = 51'd170026;

assign r_V_3_fu_627_p1 = 51'd170026;

assign r_V_5_fu_726_p1 = 51'd170026;

assign r_V_7_fu_825_p1 = 51'd170026;

assign r_V_9_fu_924_p1 = 51'd170026;

assign ret_V_10_fu_992_p2 = (r_V_33_fu_986_p2 + lhs_11_fu_974_p3);

assign ret_V_11_fu_1080_p2 = (r_V_35_fu_1074_p2 + lhs_10_fu_1062_p3);

assign ret_V_1_fu_661_p2 = (r_V_15_fu_655_p2 + lhs_1_fu_643_p3);

assign ret_V_2_fu_760_p2 = (r_V_17_fu_754_p2 + lhs_2_fu_742_p3);

assign ret_V_3_fu_859_p2 = (r_V_19_fu_853_p2 + lhs_3_fu_841_p3);

assign ret_V_4_fu_958_p2 = (r_V_21_fu_952_p2 + lhs_4_fu_940_p3);

assign ret_V_5_fu_1046_p2 = (r_V_23_fu_1040_p2 + lhs_5_fu_1028_p3);

assign ret_V_6_fu_1166_p2 = (r_V_25_fu_1160_p2 + lhs_6_fu_1148_p3);

assign ret_V_7_fu_695_p2 = (r_V_27_fu_689_p2 + lhs_7_fu_677_p3);

assign ret_V_8_fu_794_p2 = (r_V_29_fu_788_p2 + lhs_8_fu_776_p3);

assign ret_V_9_fu_893_p2 = (r_V_31_fu_887_p2 + lhs_9_fu_875_p3);

assign ret_V_fu_1132_p2 = (r_V_13_fu_1126_p2 + lhs_fu_1115_p3);

assign sel_tmp_fu_376_p2 = (icmp_fu_370_p2 & cmp6_i_fu_354_p2);

assign sel_tmp_mid1_fu_471_p2 = (icmp24_fu_445_p2 & cmp6_i_mid1_fu_421_p2);

assign select_ln265_1_fu_427_p3 = ((icmp_ln267_fu_403_p2[0:0] == 1'b1) ? cmp6_i_mid1_fu_421_p2 : cmp6_i_fu_354_p2);

assign select_ln265_2_fu_463_p3 = ((icmp_ln267_fu_403_p2[0:0] == 1'b1) ? cmp56_i_mid1_fu_451_p2 : cmp56_i3_fu_457_p2);

assign select_ln265_3_fu_477_p3 = ((icmp_ln267_fu_403_p2[0:0] == 1'b1) ? sel_tmp_mid1_fu_471_p2 : sel_tmp_fu_376_p2);

assign select_ln265_4_fu_485_p3 = ((icmp_ln267_fu_403_p2[0:0] == 1'b1) ? add_ln265_fu_397_p2 : ap_sig_allocacmp_r_1);

assign select_ln265_fu_409_p3 = ((icmp_ln267_fu_403_p2[0:0] == 1'b1) ? 11'd0 : ap_sig_allocacmp_c_load);

assign start_out = real_start;

assign sub_ln911_fu_513_p2 = (tmp_fu_493_p3 - zext_ln911_fu_509_p1);

assign tensor_y_din = {{{{{{acc_val_V_11_fu_1182_p3}, {acc_val_V_10_fu_1188_p3}}, {acc_val_V_9_fu_1194_p3}}, {acc_val_V_8_fu_1200_p3}}, {acc_val_V_7_fu_1206_p3}}, {acc_val_V_6_fu_1212_p3}};

assign tmp_10_fu_865_p4 = {{ret_V_3_fu_859_p2[50:19]}};

assign tmp_11_fu_964_p4 = {{ret_V_4_fu_958_p2[50:19]}};

assign tmp_12_fu_1052_p4 = {{ret_V_5_fu_1046_p2[50:19]}};

assign tmp_14_fu_360_p4 = {{ap_sig_allocacmp_r_1[8:1]}};

assign tmp_15_fu_435_p4 = {{add_ln265_fu_397_p2[8:1]}};

assign tmp_1_fu_501_p3 = {{select_ln265_fu_409_p3}, {1'd0}};

assign tmp_2_fu_1105_p4 = {{r_V_1_fu_1099_p2[50:19]}};

assign tmp_3_fu_633_p4 = {{r_V_3_fu_627_p2[50:19]}};

assign tmp_4_fu_732_p4 = {{r_V_5_fu_726_p2[50:19]}};

assign tmp_5_fu_831_p4 = {{r_V_7_fu_825_p2[50:19]}};

assign tmp_6_fu_930_p4 = {{r_V_9_fu_924_p2[50:19]}};

assign tmp_7_fu_1018_p4 = {{r_V_11_fu_1012_p2[50:19]}};

assign tmp_8_fu_1138_p4 = {{ret_V_fu_1132_p2[50:19]}};

assign tmp_9_fu_667_p4 = {{ret_V_1_fu_661_p2[50:19]}};

assign tmp_fu_493_p3 = {{empty_42_fu_417_p1}, {3'd0}};

assign tmp_s_fu_766_p4 = {{ret_V_2_fu_760_p2[50:19]}};

assign tmp_val_V_fu_557_p1 = out_product_dout[31:0];

assign zext_ln911_1_fu_519_p1 = sub_ln911_fu_513_p2;

assign zext_ln911_2_fu_551_p1 = or_ln911_fu_546_p2;

assign zext_ln911_3_fu_617_p1 = add_ln911_fu_612_p2;

assign zext_ln911_4_fu_716_p1 = add_ln911_1_fu_711_p2;

assign zext_ln911_5_fu_815_p1 = add_ln911_2_fu_810_p2;

assign zext_ln911_6_fu_914_p1 = add_ln911_3_fu_909_p2;

assign zext_ln911_fu_509_p1 = tmp_1_fu_501_p3;

always @ (posedge ap_clk) begin
    sub_ln911_reg_1279[0] <= 1'b0;
    buf_val_val_V_addr_reg_1288[0] <= 1'b0;
    buf_val_val_V_1_addr_reg_1294[0] <= 1'b0;
    buf_val_val_V_addr_1_reg_1300[0] <= 1'b1;
    buf_val_val_V_1_addr_1_reg_1306[0] <= 1'b1;
    buf_val_val_V_addr_2_reg_1347[0] <= 1'b0;
    buf_val_val_V_1_addr_2_reg_1353[0] <= 1'b0;
    buf_val_val_V_addr_3_reg_1364[0] <= 1'b1;
    buf_val_val_V_1_addr_3_reg_1370[0] <= 1'b1;
    buf_val_val_V_addr_4_reg_1381[0] <= 1'b0;
    buf_val_val_V_1_addr_4_reg_1387[0] <= 1'b0;
    buf_val_val_V_addr_5_reg_1398[0] <= 1'b1;
    buf_val_val_V_1_addr_5_reg_1404[0] <= 1'b1;
end

endmodule //optical_flow_tensor_weight_y

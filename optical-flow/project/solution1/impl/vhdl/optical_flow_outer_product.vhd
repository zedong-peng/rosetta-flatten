-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity optical_flow_outer_product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    filtered_gradient_x_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    filtered_gradient_x_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    filtered_gradient_x_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    filtered_gradient_x_V_empty_n : IN STD_LOGIC;
    filtered_gradient_x_V_read : OUT STD_LOGIC;
    filtered_gradient_y_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    filtered_gradient_y_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    filtered_gradient_y_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    filtered_gradient_y_V_empty_n : IN STD_LOGIC;
    filtered_gradient_y_V_read : OUT STD_LOGIC;
    filtered_gradient_z_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    filtered_gradient_z_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    filtered_gradient_z_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    filtered_gradient_z_V_empty_n : IN STD_LOGIC;
    filtered_gradient_z_V_read : OUT STD_LOGIC;
    out_product_din : OUT STD_LOGIC_VECTOR (191 downto 0);
    out_product_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    out_product_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    out_product_full_n : IN STD_LOGIC;
    out_product_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of optical_flow_outer_product is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv19_6D000 : STD_LOGIC_VECTOR (18 downto 0) := "1101101000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln238_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal filtered_gradient_x_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal filtered_gradient_y_V_blk_n : STD_LOGIC;
    signal filtered_gradient_z_V_blk_n : STD_LOGIC;
    signal out_product_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln1270_fu_148_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1270_35_fu_152_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1270_36_fu_156_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal indvar_flatten_fu_64 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln238_fu_107_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal r_V_fu_118_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_96_fu_128_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_fu_138_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal out_val_V_fu_160_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal out_val_V_1_fu_173_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal out_val_V_2_fu_186_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_1_fu_215_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_299_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_s_fu_228_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln818_2_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln254_fu_224_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_208_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln818_1_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln818_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_237_p7 : STD_LOGIC_VECTOR (158 downto 0);
    signal trunc_ln818_4_fu_199_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln254_1_fu_253_p1 : STD_LOGIC_VECTOR (159 downto 0);
    signal tmp_4_fu_257_p3 : STD_LOGIC_VECTOR (190 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_299_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_299_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_270_ce : STD_LOGIC;
    signal grp_fu_277_ce : STD_LOGIC;
    signal grp_fu_284_ce : STD_LOGIC;
    signal grp_fu_292_ce : STD_LOGIC;
    signal grp_fu_299_ce : STD_LOGIC;
    signal grp_fu_306_ce : STD_LOGIC;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_145 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component optical_flow_mul_mul_18s_18s_36_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component optical_flow_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_mul_18s_18s_36_4_1_U78 : component optical_flow_mul_mul_18s_18s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_270_p0,
        din1 => grp_fu_270_p1,
        ce => grp_fu_270_ce,
        dout => grp_fu_270_p2);

    mul_mul_18s_18s_36_4_1_U79 : component optical_flow_mul_mul_18s_18s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        din1 => grp_fu_277_p1,
        ce => grp_fu_277_ce,
        dout => grp_fu_277_p2);

    mul_mul_18s_18s_36_4_1_U80 : component optical_flow_mul_mul_18s_18s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_284_p0,
        din1 => grp_fu_284_p1,
        ce => grp_fu_284_ce,
        dout => grp_fu_284_p2);

    mul_mul_18s_18s_36_4_1_U81 : component optical_flow_mul_mul_18s_18s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => grp_fu_292_ce,
        dout => grp_fu_292_p2);

    mul_mul_18s_18s_36_4_1_U82 : component optical_flow_mul_mul_18s_18s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_299_p0,
        din1 => grp_fu_299_p1,
        ce => grp_fu_299_ce,
        dout => grp_fu_299_p2);

    mul_mul_18s_18s_36_4_1_U83 : component optical_flow_mul_mul_18s_18s_36_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_306_p0,
        din1 => grp_fu_306_p1,
        ce => grp_fu_306_ce,
        dout => grp_fu_306_p2);

    flow_control_loop_pipe_U : component optical_flow_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_145)) then
                if ((icmp_ln238_fu_101_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_64 <= add_ln238_fu_107_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_64 <= ap_const_lv19_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln238_fu_107_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv19_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_done_reg, filtered_gradient_x_V_empty_n, filtered_gradient_y_V_empty_n, filtered_gradient_z_V_empty_n, out_product_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((out_product_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((filtered_gradient_z_V_empty_n = ap_const_logic_0) or (filtered_gradient_y_V_empty_n = ap_const_logic_0) or (filtered_gradient_x_V_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_done_reg, filtered_gradient_x_V_empty_n, filtered_gradient_y_V_empty_n, filtered_gradient_z_V_empty_n, out_product_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((out_product_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((filtered_gradient_z_V_empty_n = ap_const_logic_0) or (filtered_gradient_y_V_empty_n = ap_const_logic_0) or (filtered_gradient_x_V_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_done_reg, filtered_gradient_x_V_empty_n, filtered_gradient_y_V_empty_n, filtered_gradient_z_V_empty_n, out_product_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((out_product_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((filtered_gradient_z_V_empty_n = ap_const_logic_0) or (filtered_gradient_y_V_empty_n = ap_const_logic_0) or (filtered_gradient_x_V_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(filtered_gradient_x_V_empty_n, filtered_gradient_y_V_empty_n, filtered_gradient_z_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((filtered_gradient_z_V_empty_n = ap_const_logic_0) or (filtered_gradient_y_V_empty_n = ap_const_logic_0) or (filtered_gradient_x_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(out_product_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (out_product_full_n = ap_const_logic_0);
    end process;


    ap_condition_145_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_145 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln238_fu_101_p2, ap_start_int)
    begin
        if (((icmp_ln238_fu_101_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_fu_64, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_64;
        end if; 
    end process;


    filtered_gradient_x_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, filtered_gradient_x_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filtered_gradient_x_V_blk_n <= filtered_gradient_x_V_empty_n;
        else 
            filtered_gradient_x_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    filtered_gradient_x_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filtered_gradient_x_V_read <= ap_const_logic_1;
        else 
            filtered_gradient_x_V_read <= ap_const_logic_0;
        end if; 
    end process;


    filtered_gradient_y_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, filtered_gradient_y_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filtered_gradient_y_V_blk_n <= filtered_gradient_y_V_empty_n;
        else 
            filtered_gradient_y_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    filtered_gradient_y_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filtered_gradient_y_V_read <= ap_const_logic_1;
        else 
            filtered_gradient_y_V_read <= ap_const_logic_0;
        end if; 
    end process;


    filtered_gradient_z_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, filtered_gradient_z_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filtered_gradient_z_V_blk_n <= filtered_gradient_z_V_empty_n;
        else 
            filtered_gradient_z_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    filtered_gradient_z_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            filtered_gradient_z_V_read <= ap_const_logic_1;
        else 
            filtered_gradient_z_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_270_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_270_ce <= ap_const_logic_1;
        else 
            grp_fu_270_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_270_p0 <= sext_ln1270_fu_148_p1(18 - 1 downto 0);
    grp_fu_270_p1 <= sext_ln1270_fu_148_p1(18 - 1 downto 0);

    grp_fu_277_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_277_ce <= ap_const_logic_1;
        else 
            grp_fu_277_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_277_p0 <= sext_ln1270_35_fu_152_p1(18 - 1 downto 0);
    grp_fu_277_p1 <= sext_ln1270_35_fu_152_p1(18 - 1 downto 0);

    grp_fu_284_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_284_ce <= ap_const_logic_1;
        else 
            grp_fu_284_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_284_p0 <= sext_ln1270_36_fu_156_p1(18 - 1 downto 0);
    grp_fu_284_p1 <= sext_ln1270_36_fu_156_p1(18 - 1 downto 0);

    grp_fu_292_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_292_ce <= ap_const_logic_1;
        else 
            grp_fu_292_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_292_p0 <= sext_ln1270_35_fu_152_p1(18 - 1 downto 0);
    grp_fu_292_p1 <= sext_ln1270_fu_148_p1(18 - 1 downto 0);

    grp_fu_299_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_299_ce <= ap_const_logic_1;
        else 
            grp_fu_299_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_299_p0 <= sext_ln1270_36_fu_156_p1(18 - 1 downto 0);
    grp_fu_299_p1 <= sext_ln1270_fu_148_p1(18 - 1 downto 0);

    grp_fu_306_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_306_ce <= ap_const_logic_1;
        else 
            grp_fu_306_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_306_p0 <= sext_ln1270_36_fu_156_p1(18 - 1 downto 0);
    grp_fu_306_p1 <= sext_ln1270_35_fu_152_p1(18 - 1 downto 0);
    icmp_ln238_fu_101_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv19_6D000) else "0";

    out_product_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, out_product_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_product_blk_n <= out_product_full_n;
        else 
            out_product_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_product_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_257_p3),192));


    out_product_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            out_product_write <= ap_const_logic_1;
        else 
            out_product_write <= ap_const_logic_0;
        end if; 
    end process;

    out_val_V_1_fu_173_p4 <= grp_fu_277_p2(35 downto 5);
    out_val_V_2_fu_186_p4 <= grp_fu_292_p2(35 downto 5);
    out_val_V_fu_160_p4 <= grp_fu_270_p2(35 downto 5);
    r_V_1_fu_138_p4 <= filtered_gradient_z_V_dout(31 downto 14);
    r_V_96_fu_128_p4 <= filtered_gradient_y_V_dout(31 downto 14);
    r_V_fu_118_p4 <= filtered_gradient_x_V_dout(31 downto 14);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln1270_35_fu_152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_96_fu_128_p4),36));

        sext_ln1270_36_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_138_p4),36));

        sext_ln1270_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_118_p4),36));

        sext_ln254_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_237_p7),160));

        sext_ln254_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_215_p4),31));

        sext_ln818_1_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_val_V_1_fu_173_p4),32));

        sext_ln818_2_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_val_V_2_fu_186_p4),32));

        sext_ln818_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_val_V_fu_160_p4),32));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_215_p4 <= grp_fu_284_p2(35 downto 6);
    tmp_3_fu_237_p7 <= (((((tmp_s_fu_228_p4 & sext_ln818_2_fu_195_p1) & sext_ln254_fu_224_p1) & tmp_fu_208_p3) & sext_ln818_1_fu_182_p1) & sext_ln818_fu_169_p1);
    tmp_4_fu_257_p3 <= (trunc_ln818_4_fu_199_p4 & sext_ln254_1_fu_253_p1);
    tmp_fu_208_p3 <= grp_fu_284_p2(5 downto 5);
    tmp_s_fu_228_p4 <= grp_fu_299_p2(35 downto 5);
    trunc_ln818_4_fu_199_p4 <= grp_fu_306_p2(35 downto 5);
end behav;

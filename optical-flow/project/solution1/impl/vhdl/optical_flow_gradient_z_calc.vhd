-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity optical_flow_gradient_z_calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    frame1_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    frame1_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame1_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame1_a_V_empty_n : IN STD_LOGIC;
    frame1_a_V_read : OUT STD_LOGIC;
    frame2_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    frame2_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame2_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame2_a_V_empty_n : IN STD_LOGIC;
    frame2_a_V_read : OUT STD_LOGIC;
    frame4_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    frame4_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame4_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame4_a_V_empty_n : IN STD_LOGIC;
    frame4_a_V_read : OUT STD_LOGIC;
    frame5_a_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    frame5_a_V_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
    frame5_a_V_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
    frame5_a_V_empty_n : IN STD_LOGIC;
    frame5_a_V_read : OUT STD_LOGIC;
    gradient_z_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    gradient_z_V_num_data_valid : IN STD_LOGIC_VECTOR (12 downto 0);
    gradient_z_V_fifo_cap : IN STD_LOGIC_VECTOR (12 downto 0);
    gradient_z_V_full_n : IN STD_LOGIC;
    gradient_z_V_write : OUT STD_LOGIC );
end;


architecture behav of optical_flow_gradient_z_calc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv19_6D000 : STD_LOGIC_VECTOR (18 downto 0) := "1101101000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv65_155555556 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000101010101010101010101010101010110";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln116_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal frame1_a_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal frame2_a_V_blk_n : STD_LOGIC;
    signal frame4_a_V_blk_n : STD_LOGIC;
    signal frame5_a_V_blk_n : STD_LOGIC;
    signal gradient_z_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln841_1_fu_162_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln841_1_reg_259 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_reg_264 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_fu_66 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln116_fu_115_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln841_2_fu_134_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln841_fu_126_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln841_fu_142_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln_fu_148_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln841_1_fu_130_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln841_fu_156_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln841_3_fu_138_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal t_V_fu_176_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1303_fu_187_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1303_fu_187_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal sub_ln1303_fu_193_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_28_fu_209_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_27_fu_199_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln1303_2_fu_223_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1303_2_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1303_1_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1303_1_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_127 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component optical_flow_mul_32s_34ns_65_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component optical_flow_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mul_32s_34ns_65_1_1_U14 : component optical_flow_mul_32s_34ns_65_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 34,
        dout_WIDTH => 65)
    port map (
        din0 => t_V_fu_176_p3,
        din1 => mul_ln1303_fu_187_p1,
        dout => mul_ln1303_fu_187_p2);

    flow_control_loop_pipe_U : component optical_flow_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_127)) then
                if ((icmp_ln116_fu_109_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_66 <= add_ln116_fu_115_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_66 <= ap_const_lv19_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                sub_ln841_1_reg_259 <= sub_ln841_1_fu_162_p2;
                tmp_reg_264 <= sub_ln841_1_fu_162_p2(20 downto 20);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln116_fu_115_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv19_1));
    add_ln841_fu_156_p2 <= std_logic_vector(unsigned(shl_ln_fu_148_p3) + unsigned(sext_ln841_1_fu_130_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, frame1_a_V_empty_n, frame2_a_V_empty_n, frame4_a_V_empty_n, frame5_a_V_empty_n, gradient_z_V_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((gradient_z_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((frame5_a_V_empty_n = ap_const_logic_0) or (frame4_a_V_empty_n = ap_const_logic_0) or (frame2_a_V_empty_n = ap_const_logic_0) or (frame1_a_V_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, frame1_a_V_empty_n, frame2_a_V_empty_n, frame4_a_V_empty_n, frame5_a_V_empty_n, gradient_z_V_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((gradient_z_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((frame5_a_V_empty_n = ap_const_logic_0) or (frame4_a_V_empty_n = ap_const_logic_0) or (frame2_a_V_empty_n = ap_const_logic_0) or (frame1_a_V_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, frame1_a_V_empty_n, frame2_a_V_empty_n, frame4_a_V_empty_n, frame5_a_V_empty_n, gradient_z_V_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((gradient_z_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((frame5_a_V_empty_n = ap_const_logic_0) or (frame4_a_V_empty_n = ap_const_logic_0) or (frame2_a_V_empty_n = ap_const_logic_0) or (frame1_a_V_empty_n = ap_const_logic_0))) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(frame1_a_V_empty_n, frame2_a_V_empty_n, frame4_a_V_empty_n, frame5_a_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((frame5_a_V_empty_n = ap_const_logic_0) or (frame4_a_V_empty_n = ap_const_logic_0) or (frame2_a_V_empty_n = ap_const_logic_0) or (frame1_a_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(gradient_z_V_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (gradient_z_V_full_n = ap_const_logic_0);
    end process;


    ap_condition_127_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_127 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln116_fu_109_p2, ap_start_int)
    begin
        if (((icmp_ln116_fu_109_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_fu_66, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv19_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_66;
        end if; 
    end process;


    frame1_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame1_a_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame1_a_V_blk_n <= frame1_a_V_empty_n;
        else 
            frame1_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame1_a_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame1_a_V_read <= ap_const_logic_1;
        else 
            frame1_a_V_read <= ap_const_logic_0;
        end if; 
    end process;


    frame2_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame2_a_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame2_a_V_blk_n <= frame2_a_V_empty_n;
        else 
            frame2_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame2_a_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame2_a_V_read <= ap_const_logic_1;
        else 
            frame2_a_V_read <= ap_const_logic_0;
        end if; 
    end process;


    frame4_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame4_a_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame4_a_V_blk_n <= frame4_a_V_empty_n;
        else 
            frame4_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame4_a_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame4_a_V_read <= ap_const_logic_1;
        else 
            frame4_a_V_read <= ap_const_logic_0;
        end if; 
    end process;


    frame5_a_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, frame5_a_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame5_a_V_blk_n <= frame5_a_V_empty_n;
        else 
            frame5_a_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame5_a_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame5_a_V_read <= ap_const_logic_1;
        else 
            frame5_a_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gradient_z_V_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, gradient_z_V_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gradient_z_V_blk_n <= gradient_z_V_full_n;
        else 
            gradient_z_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gradient_z_V_din <= 
        sub_ln1303_1_fu_234_p2 when (tmp_reg_264(0) = '1') else 
        sext_ln1303_1_fu_219_p1;

    gradient_z_V_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gradient_z_V_write <= ap_const_logic_1;
        else 
            gradient_z_V_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln116_fu_109_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv19_6D000) else "0";
    mul_ln1303_fu_187_p1 <= ap_const_lv65_155555556(34 - 1 downto 0);
    select_ln1303_2_fu_223_p3 <= 
        tmp_27_fu_199_p4 when (tmp_reg_264(0) = '1') else 
        tmp_28_fu_209_p4;
        sext_ln1303_1_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_209_p4),32));

        sext_ln1303_2_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1303_2_fu_223_p3),32));

        sext_ln841_1_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frame1_a_V_dout),21));

        sext_ln841_2_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frame4_a_V_dout),18));

        sext_ln841_3_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frame5_a_V_dout),21));

        sext_ln841_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frame2_a_V_dout),18));

    shl_ln_fu_148_p3 <= (sub_ln841_fu_142_p2 & ap_const_lv3_0);
    sub_ln1303_1_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sext_ln1303_2_fu_230_p1));
    sub_ln1303_fu_193_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln1303_fu_187_p2));
    sub_ln841_1_fu_162_p2 <= std_logic_vector(unsigned(add_ln841_fu_156_p2) - unsigned(sext_ln841_3_fu_138_p1));
    sub_ln841_fu_142_p2 <= std_logic_vector(signed(sext_ln841_2_fu_134_p1) - signed(sext_ln841_fu_126_p1));
    t_V_fu_176_p3 <= (sub_ln841_1_reg_259 & ap_const_lv11_0);
    tmp_27_fu_199_p4 <= sub_ln1303_fu_193_p2(64 downto 36);
    tmp_28_fu_209_p4 <= mul_ln1303_fu_187_p2(64 downto 36);
end behav;

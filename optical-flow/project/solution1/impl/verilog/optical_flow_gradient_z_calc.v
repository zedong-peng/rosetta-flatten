// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_gradient_z_calc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        frame1_a_V_dout,
        frame1_a_V_num_data_valid,
        frame1_a_V_fifo_cap,
        frame1_a_V_empty_n,
        frame1_a_V_read,
        frame2_a_V_dout,
        frame2_a_V_num_data_valid,
        frame2_a_V_fifo_cap,
        frame2_a_V_empty_n,
        frame2_a_V_read,
        frame4_a_V_dout,
        frame4_a_V_num_data_valid,
        frame4_a_V_fifo_cap,
        frame4_a_V_empty_n,
        frame4_a_V_read,
        frame5_a_V_dout,
        frame5_a_V_num_data_valid,
        frame5_a_V_fifo_cap,
        frame5_a_V_empty_n,
        frame5_a_V_read,
        gradient_z_V_din,
        gradient_z_V_num_data_valid,
        gradient_z_V_fifo_cap,
        gradient_z_V_full_n,
        gradient_z_V_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [16:0] frame1_a_V_dout;
input  [10:0] frame1_a_V_num_data_valid;
input  [10:0] frame1_a_V_fifo_cap;
input   frame1_a_V_empty_n;
output   frame1_a_V_read;
input  [16:0] frame2_a_V_dout;
input  [10:0] frame2_a_V_num_data_valid;
input  [10:0] frame2_a_V_fifo_cap;
input   frame2_a_V_empty_n;
output   frame2_a_V_read;
input  [16:0] frame4_a_V_dout;
input  [10:0] frame4_a_V_num_data_valid;
input  [10:0] frame4_a_V_fifo_cap;
input   frame4_a_V_empty_n;
output   frame4_a_V_read;
input  [16:0] frame5_a_V_dout;
input  [10:0] frame5_a_V_num_data_valid;
input  [10:0] frame5_a_V_fifo_cap;
input   frame5_a_V_empty_n;
output   frame5_a_V_read;
output  [31:0] gradient_z_V_din;
input  [12:0] gradient_z_V_num_data_valid;
input  [12:0] gradient_z_V_fifo_cap;
input   gradient_z_V_full_n;
output   gradient_z_V_write;

reg ap_idle;
reg frame1_a_V_read;
reg frame2_a_V_read;
reg frame4_a_V_read;
reg frame5_a_V_read;
reg gradient_z_V_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln116_fu_109_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    frame1_a_V_blk_n;
wire    ap_block_pp0_stage0;
reg    frame2_a_V_blk_n;
reg    frame4_a_V_blk_n;
reg    frame5_a_V_blk_n;
reg    gradient_z_V_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [20:0] sub_ln841_1_fu_162_p2;
reg   [20:0] sub_ln841_1_reg_259;
reg   [0:0] tmp_reg_264;
reg   [18:0] indvar_flatten_fu_66;
wire   [18:0] add_ln116_fu_115_p2;
wire    ap_loop_init;
reg   [18:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire  signed [17:0] sext_ln841_2_fu_134_p1;
wire  signed [17:0] sext_ln841_fu_126_p1;
wire   [17:0] sub_ln841_fu_142_p2;
wire   [20:0] shl_ln_fu_148_p3;
wire  signed [20:0] sext_ln841_1_fu_130_p1;
wire   [20:0] add_ln841_fu_156_p2;
wire  signed [20:0] sext_ln841_3_fu_138_p1;
wire  signed [31:0] t_V_fu_176_p3;
wire   [33:0] mul_ln1303_fu_187_p1;
wire   [64:0] mul_ln1303_fu_187_p2;
wire   [64:0] sub_ln1303_fu_193_p2;
wire  signed [28:0] tmp_28_fu_209_p4;
wire   [28:0] tmp_27_fu_199_p4;
wire   [28:0] select_ln1303_2_fu_223_p3;
wire  signed [31:0] sext_ln1303_2_fu_230_p1;
wire   [31:0] sub_ln1303_1_fu_234_p2;
wire  signed [31:0] sext_ln1303_1_fu_219_p1;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_127;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

optical_flow_mul_32s_34ns_65_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 34 ),
    .dout_WIDTH( 65 ))
mul_32s_34ns_65_1_1_U14(
    .din0(t_V_fu_176_p3),
    .din1(mul_ln1303_fu_187_p1),
    .dout(mul_ln1303_fu_187_p2)
);

optical_flow_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_127)) begin
        if ((icmp_ln116_fu_109_p2 == 1'd0)) begin
            indvar_flatten_fu_66 <= add_ln116_fu_115_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_66 <= 19'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        sub_ln841_1_reg_259 <= sub_ln841_1_fu_162_p2;
        tmp_reg_264 <= sub_ln841_1_fu_162_p2[32'd20];
    end
end

always @ (*) begin
    if (((icmp_ln116_fu_109_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 19'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame1_a_V_blk_n = frame1_a_V_empty_n;
    end else begin
        frame1_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame1_a_V_read = 1'b1;
    end else begin
        frame1_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame2_a_V_blk_n = frame2_a_V_empty_n;
    end else begin
        frame2_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame2_a_V_read = 1'b1;
    end else begin
        frame2_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame4_a_V_blk_n = frame4_a_V_empty_n;
    end else begin
        frame4_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame4_a_V_read = 1'b1;
    end else begin
        frame4_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame5_a_V_blk_n = frame5_a_V_empty_n;
    end else begin
        frame5_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame5_a_V_read = 1'b1;
    end else begin
        frame5_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        gradient_z_V_blk_n = gradient_z_V_full_n;
    end else begin
        gradient_z_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        gradient_z_V_write = 1'b1;
    end else begin
        gradient_z_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln116_fu_115_p2 = (ap_sig_allocacmp_indvar_flatten_load + 19'd1);

assign add_ln841_fu_156_p2 = ($signed(shl_ln_fu_148_p3) + $signed(sext_ln841_1_fu_130_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((gradient_z_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((frame5_a_V_empty_n == 1'b0) | (frame4_a_V_empty_n == 1'b0) | (frame2_a_V_empty_n == 1'b0) | (frame1_a_V_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((gradient_z_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((frame5_a_V_empty_n == 1'b0) | (frame4_a_V_empty_n == 1'b0) | (frame2_a_V_empty_n == 1'b0) | (frame1_a_V_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((gradient_z_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((frame5_a_V_empty_n == 1'b0) | (frame4_a_V_empty_n == 1'b0) | (frame2_a_V_empty_n == 1'b0) | (frame1_a_V_empty_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((frame5_a_V_empty_n == 1'b0) | (frame4_a_V_empty_n == 1'b0) | (frame2_a_V_empty_n == 1'b0) | (frame1_a_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (gradient_z_V_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_127 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign gradient_z_V_din = ((tmp_reg_264[0:0] == 1'b1) ? sub_ln1303_1_fu_234_p2 : sext_ln1303_1_fu_219_p1);

assign icmp_ln116_fu_109_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 19'd446464) ? 1'b1 : 1'b0);

assign mul_ln1303_fu_187_p1 = 65'd5726623062;

assign select_ln1303_2_fu_223_p3 = ((tmp_reg_264[0:0] == 1'b1) ? tmp_27_fu_199_p4 : tmp_28_fu_209_p4);

assign sext_ln1303_1_fu_219_p1 = tmp_28_fu_209_p4;

assign sext_ln1303_2_fu_230_p1 = $signed(select_ln1303_2_fu_223_p3);

assign sext_ln841_1_fu_130_p1 = $signed(frame1_a_V_dout);

assign sext_ln841_2_fu_134_p1 = $signed(frame4_a_V_dout);

assign sext_ln841_3_fu_138_p1 = $signed(frame5_a_V_dout);

assign sext_ln841_fu_126_p1 = $signed(frame2_a_V_dout);

assign shl_ln_fu_148_p3 = {{sub_ln841_fu_142_p2}, {3'd0}};

assign sub_ln1303_1_fu_234_p2 = ($signed(32'd0) - $signed(sext_ln1303_2_fu_230_p1));

assign sub_ln1303_fu_193_p2 = (65'd0 - mul_ln1303_fu_187_p2);

assign sub_ln841_1_fu_162_p2 = ($signed(add_ln841_fu_156_p2) - $signed(sext_ln841_3_fu_138_p1));

assign sub_ln841_fu_142_p2 = ($signed(sext_ln841_2_fu_134_p1) - $signed(sext_ln841_fu_126_p1));

assign t_V_fu_176_p3 = {{sub_ln841_1_reg_259}, {11'd0}};

assign tmp_27_fu_199_p4 = {{sub_ln1303_fu_193_p2[64:36]}};

assign tmp_28_fu_209_p4 = {{mul_ln1303_fu_187_p2[64:36]}};

endmodule //optical_flow_gradient_z_calc

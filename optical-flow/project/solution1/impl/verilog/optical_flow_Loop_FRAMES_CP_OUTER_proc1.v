// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module optical_flow_Loop_FRAMES_CP_OUTER_proc1 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        frame1_a_V_din,
        frame1_a_V_num_data_valid,
        frame1_a_V_fifo_cap,
        frame1_a_V_full_n,
        frame1_a_V_write,
        frame2_a_V_din,
        frame2_a_V_num_data_valid,
        frame2_a_V_fifo_cap,
        frame2_a_V_full_n,
        frame2_a_V_write,
        frame3_a_V_din,
        frame3_a_V_num_data_valid,
        frame3_a_V_fifo_cap,
        frame3_a_V_full_n,
        frame3_a_V_write,
        frame4_a_V_din,
        frame4_a_V_num_data_valid,
        frame4_a_V_fifo_cap,
        frame4_a_V_full_n,
        frame4_a_V_write,
        frame5_a_V_din,
        frame5_a_V_num_data_valid,
        frame5_a_V_fifo_cap,
        frame5_a_V_full_n,
        frame5_a_V_write,
        start_out,
        start_write,
        frames_address0,
        frames_ce0,
        frames_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [16:0] frame1_a_V_din;
input  [10:0] frame1_a_V_num_data_valid;
input  [10:0] frame1_a_V_fifo_cap;
input   frame1_a_V_full_n;
output   frame1_a_V_write;
output  [16:0] frame2_a_V_din;
input  [10:0] frame2_a_V_num_data_valid;
input  [10:0] frame2_a_V_fifo_cap;
input   frame2_a_V_full_n;
output   frame2_a_V_write;
output  [16:0] frame3_a_V_din;
input  [10:0] frame3_a_V_num_data_valid;
input  [10:0] frame3_a_V_fifo_cap;
input   frame3_a_V_full_n;
output   frame3_a_V_write;
output  [16:0] frame4_a_V_din;
input  [10:0] frame4_a_V_num_data_valid;
input  [10:0] frame4_a_V_fifo_cap;
input   frame4_a_V_full_n;
output   frame4_a_V_write;
output  [16:0] frame5_a_V_din;
input  [10:0] frame5_a_V_num_data_valid;
input  [10:0] frame5_a_V_fifo_cap;
input   frame5_a_V_full_n;
output   frame5_a_V_write;
output   start_out;
output   start_write;
output  [18:0] frames_address0;
output   frames_ce0;
input  [63:0] frames_q0;

reg ap_idle;
reg frame1_a_V_write;
reg frame2_a_V_write;
reg frame3_a_V_write;
reg frame4_a_V_write;
reg frame5_a_V_write;
reg start_write;
reg frames_ce0;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln451_fu_158_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    frame1_a_V_blk_n;
wire    ap_block_pp0_stage0;
reg    frame2_a_V_blk_n;
reg    frame3_a_V_blk_n;
reg    frame4_a_V_blk_n;
reg    frame5_a_V_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln458_1_fu_222_p1;
reg   [10:0] c_fu_80;
wire   [10:0] add_ln453_fu_227_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_c_load;
reg   [8:0] r_fu_84;
wire   [8:0] select_ln451_1_fu_196_p3;
reg   [8:0] ap_sig_allocacmp_r_load;
reg   [18:0] indvar_flatten_fu_88;
wire   [18:0] add_ln451_1_fu_164_p2;
reg   [18:0] ap_sig_allocacmp_indvar_flatten_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln453_fu_182_p2;
wire   [8:0] add_ln451_fu_176_p2;
wire   [10:0] select_ln451_fu_188_p3;
wire   [18:0] tmp_fu_204_p3;
wire   [18:0] zext_ln458_fu_212_p1;
wire   [18:0] add_ln458_fu_216_p2;
wire   [7:0] r_V_fu_248_p1;
wire   [7:0] r_V_205_fu_257_p4;
wire   [7:0] r_V_206_fu_272_p4;
wire   [7:0] r_V_207_fu_287_p4;
wire   [7:0] r_V_208_fu_302_p4;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_143;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

optical_flow_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_143)) begin
        if ((icmp_ln451_fu_158_p2 == 1'd0)) begin
            c_fu_80 <= add_ln453_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_80 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_143)) begin
        if ((icmp_ln451_fu_158_p2 == 1'd0)) begin
            indvar_flatten_fu_88 <= add_ln451_1_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 19'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_143)) begin
        if ((icmp_ln451_fu_158_p2 == 1'd0)) begin
            r_fu_84 <= select_ln451_1_fu_196_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_84 <= 9'd0;
        end
    end
end

always @ (*) begin
    if (((icmp_ln451_fu_158_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_load = 11'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 19'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_r_load = 9'd0;
    end else begin
        ap_sig_allocacmp_r_load = r_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame1_a_V_blk_n = frame1_a_V_full_n;
    end else begin
        frame1_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame1_a_V_write = 1'b1;
    end else begin
        frame1_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame2_a_V_blk_n = frame2_a_V_full_n;
    end else begin
        frame2_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame2_a_V_write = 1'b1;
    end else begin
        frame2_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame3_a_V_blk_n = frame3_a_V_full_n;
    end else begin
        frame3_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame3_a_V_write = 1'b1;
    end else begin
        frame3_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame4_a_V_blk_n = frame4_a_V_full_n;
    end else begin
        frame4_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame4_a_V_write = 1'b1;
    end else begin
        frame4_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame5_a_V_blk_n = frame5_a_V_full_n;
    end else begin
        frame5_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frame5_a_V_write = 1'b1;
    end else begin
        frame5_a_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frames_ce0 = 1'b1;
    end else begin
        frames_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln451_1_fu_164_p2 = (ap_sig_allocacmp_indvar_flatten_load + 19'd1);

assign add_ln451_fu_176_p2 = (ap_sig_allocacmp_r_load + 9'd1);

assign add_ln453_fu_227_p2 = (select_ln451_fu_188_p3 + 11'd1);

assign add_ln458_fu_216_p2 = (tmp_fu_204_p3 + zext_ln458_fu_212_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((frame5_a_V_full_n == 1'b0) | (frame4_a_V_full_n == 1'b0) | (frame3_a_V_full_n == 1'b0) | (frame2_a_V_full_n == 1'b0) | (frame1_a_V_full_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((frame5_a_V_full_n == 1'b0) | (frame4_a_V_full_n == 1'b0) | (frame3_a_V_full_n == 1'b0) | (frame2_a_V_full_n == 1'b0) | (frame1_a_V_full_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((frame5_a_V_full_n == 1'b0) | (frame4_a_V_full_n == 1'b0) | (frame3_a_V_full_n == 1'b0) | (frame2_a_V_full_n == 1'b0) | (frame1_a_V_full_n == 1'b0))) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((frame5_a_V_full_n == 1'b0) | (frame4_a_V_full_n == 1'b0) | (frame3_a_V_full_n == 1'b0) | (frame2_a_V_full_n == 1'b0) | (frame1_a_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_143 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign frame1_a_V_din = r_V_fu_248_p1;

assign frame2_a_V_din = r_V_205_fu_257_p4;

assign frame3_a_V_din = r_V_206_fu_272_p4;

assign frame4_a_V_din = r_V_207_fu_287_p4;

assign frame5_a_V_din = r_V_208_fu_302_p4;

assign frames_address0 = zext_ln458_1_fu_222_p1;

assign icmp_ln451_fu_158_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 19'd446464) ? 1'b1 : 1'b0);

assign icmp_ln453_fu_182_p2 = ((ap_sig_allocacmp_c_load == 11'd1024) ? 1'b1 : 1'b0);

assign r_V_205_fu_257_p4 = {{frames_q0[15:8]}};

assign r_V_206_fu_272_p4 = {{frames_q0[23:16]}};

assign r_V_207_fu_287_p4 = {{frames_q0[31:24]}};

assign r_V_208_fu_302_p4 = {{frames_q0[39:32]}};

assign r_V_fu_248_p1 = frames_q0[7:0];

assign select_ln451_1_fu_196_p3 = ((icmp_ln453_fu_182_p2[0:0] == 1'b1) ? add_ln451_fu_176_p2 : ap_sig_allocacmp_r_load);

assign select_ln451_fu_188_p3 = ((icmp_ln453_fu_182_p2[0:0] == 1'b1) ? 11'd0 : ap_sig_allocacmp_c_load);

assign start_out = real_start;

assign tmp_fu_204_p3 = {{select_ln451_1_fu_196_p3}, {10'd0}};

assign zext_ln458_1_fu_222_p1 = add_ln458_fu_216_p2;

assign zext_ln458_fu_212_p1 = select_ln451_fu_188_p3;

endmodule //optical_flow_Loop_FRAMES_CP_OUTER_proc1

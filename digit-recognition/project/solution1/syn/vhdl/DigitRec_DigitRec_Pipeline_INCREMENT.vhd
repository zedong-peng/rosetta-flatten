-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DigitRec_DigitRec_Pipeline_INCREMENT is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    p_reload32 : IN STD_LOGIC_VECTOR (31 downto 0);
    div_i32_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    vote_list_9_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_9_out_ap_vld : OUT STD_LOGIC;
    vote_list_8_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_8_out_ap_vld : OUT STD_LOGIC;
    vote_list_7_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_7_out_ap_vld : OUT STD_LOGIC;
    vote_list_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_6_out_ap_vld : OUT STD_LOGIC;
    vote_list_5_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_5_out_ap_vld : OUT STD_LOGIC;
    vote_list_4_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_4_out_ap_vld : OUT STD_LOGIC;
    vote_list_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_3_out_ap_vld : OUT STD_LOGIC;
    vote_list_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_2_out_ap_vld : OUT STD_LOGIC;
    vote_list_1_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_1_out_ap_vld : OUT STD_LOGIC;
    vote_list_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    vote_list_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of DigitRec_DigitRec_Pipeline_INCREMENT is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln160_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_76 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln160_fu_272_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal vote_list_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_10_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln163_fu_317_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal vote_list_1_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_2_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_3_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_4_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_5_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_6_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_7_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_8_fu_112 : STD_LOGIC_VECTOR (31 downto 0);
    signal vote_list_9_fu_116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_8_fu_308_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_321_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_321_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_294 : BOOLEAN;
    signal ap_condition_297 : BOOLEAN;
    signal ap_condition_300 : BOOLEAN;
    signal ap_condition_303 : BOOLEAN;
    signal ap_condition_306 : BOOLEAN;
    signal ap_condition_309 : BOOLEAN;
    signal ap_condition_312 : BOOLEAN;
    signal ap_condition_315 : BOOLEAN;
    signal ap_condition_326 : BOOLEAN;
    signal ap_condition_329 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component DigitRec_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_mux_104_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component DigitRec_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_32_32_1_1_U256 : component DigitRec_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => p_reload,
        din1 => p_reload32,
        din2 => div_i32_reload,
        din3 => i_fu_76,
        dout => tmp_8_fu_308_p5);

    mux_104_32_1_1_U257 : component DigitRec_mux_104_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => vote_list_fu_80,
        din1 => vote_list_1_fu_84,
        din2 => vote_list_2_fu_88,
        din3 => vote_list_3_fu_92,
        din4 => vote_list_4_fu_96,
        din5 => vote_list_5_fu_100,
        din6 => vote_list_6_fu_104,
        din7 => vote_list_7_fu_108,
        din8 => vote_list_8_fu_112,
        din9 => vote_list_9_fu_116,
        din10 => tmp_9_fu_321_p11,
        dout => tmp_9_fu_321_p12);

    flow_control_loop_pipe_sequential_init_U : component DigitRec_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_76 <= ap_const_lv2_0;
                elsif (((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_76 <= add_ln160_fu_272_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_1_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_1_fu_84 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_294)) then 
                    vote_list_1_fu_84 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_2_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_2_fu_88 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_297)) then 
                    vote_list_2_fu_88 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_3_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_3_fu_92 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_300)) then 
                    vote_list_3_fu_92 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_4_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_4_fu_96 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_303)) then 
                    vote_list_4_fu_96 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_5_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_5_fu_100 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_306)) then 
                    vote_list_5_fu_100 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_6_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_6_fu_104 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_309)) then 
                    vote_list_6_fu_104 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_7_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_7_fu_108 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_312)) then 
                    vote_list_7_fu_108 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_8_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_8_fu_112 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_315)) then 
                    vote_list_8_fu_112 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_9_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_9_fu_116 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_326)) then 
                    vote_list_9_fu_116 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    vote_list_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    vote_list_fu_80 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_329)) then 
                    vote_list_fu_80 <= vote_list_10_fu_347_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln160_fu_272_p2 <= std_logic_vector(unsigned(i_fu_76) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_294_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_294 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_1));
    end process;


    ap_condition_297_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_297 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_2));
    end process;


    ap_condition_300_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_300 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_3));
    end process;


    ap_condition_303_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_303 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_4));
    end process;


    ap_condition_306_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_306 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_5));
    end process;


    ap_condition_309_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_309 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_6));
    end process;


    ap_condition_312_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_312 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_7));
    end process;


    ap_condition_315_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_315 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_8));
    end process;


    ap_condition_326_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_326 <= (not((trunc_ln163_fu_317_p1 = ap_const_lv4_8)) and not((trunc_ln163_fu_317_p1 = ap_const_lv4_7)) and not((trunc_ln163_fu_317_p1 = ap_const_lv4_6)) and not((trunc_ln163_fu_317_p1 = ap_const_lv4_5)) and not((trunc_ln163_fu_317_p1 = ap_const_lv4_4)) and not((trunc_ln163_fu_317_p1 = ap_const_lv4_3)) and not((trunc_ln163_fu_317_p1 = ap_const_lv4_2)) and not((trunc_ln163_fu_317_p1 = ap_const_lv4_1)) and not((trunc_ln163_fu_317_p1 = ap_const_lv4_0)) and (icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_329_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln160_fu_266_p2, trunc_ln163_fu_317_p1)
    begin
                ap_condition_329 <= ((icmp_ln160_fu_266_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (trunc_ln163_fu_317_p1 = ap_const_lv4_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln160_fu_266_p2)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln160_fu_266_p2 <= "1" when (i_fu_76 = ap_const_lv2_3) else "0";
    tmp_9_fu_321_p11 <= tmp_8_fu_308_p5(4 - 1 downto 0);
    trunc_ln163_fu_317_p1 <= tmp_8_fu_308_p5(4 - 1 downto 0);
    vote_list_10_fu_347_p2 <= std_logic_vector(unsigned(tmp_9_fu_321_p12) + unsigned(ap_const_lv32_1));
    vote_list_1_out <= vote_list_1_fu_84;

    vote_list_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_1_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_2_out <= vote_list_2_fu_88;

    vote_list_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_2_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_3_out <= vote_list_3_fu_92;

    vote_list_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_3_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_4_out <= vote_list_4_fu_96;

    vote_list_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_4_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_5_out <= vote_list_5_fu_100;

    vote_list_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_5_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_6_out <= vote_list_6_fu_104;

    vote_list_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_6_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_7_out <= vote_list_7_fu_108;

    vote_list_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_7_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_8_out <= vote_list_8_fu_112;

    vote_list_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_8_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_9_out <= vote_list_9_fu_116;

    vote_list_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_9_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    vote_list_out <= vote_list_fu_80;

    vote_list_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln160_fu_266_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln160_fu_266_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vote_list_out_ap_vld <= ap_const_logic_1;
        else 
            vote_list_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module DigitRec_DigitRec_Pipeline_LANES_INSERTION_SORT_OUTER (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        knn_set,
        knn_set_1,
        knn_set_2,
        knn_set_3,
        knn_set_4,
        knn_set_5,
        knn_set_6,
        knn_set_7,
        knn_set_8,
        knn_set_9,
        knn_set_10,
        knn_set_11,
        knn_set_12,
        knn_set_13,
        knn_set_14,
        knn_set_15,
        knn_set_16,
        knn_set_17,
        knn_set_18,
        knn_set_19,
        knn_set_20,
        knn_set_21,
        knn_set_22,
        knn_set_23,
        knn_set_24,
        knn_set_25,
        knn_set_26,
        knn_set_27,
        knn_set_28,
        knn_set_29,
        knn_set_30,
        knn_set_31,
        knn_set_32,
        knn_set_33,
        knn_set_34,
        knn_set_35,
        knn_set_36,
        knn_set_37,
        knn_set_38,
        knn_set_39,
        knn_set_40,
        knn_set_41,
        knn_set_42,
        knn_set_43,
        knn_set_44,
        knn_set_45,
        knn_set_46,
        knn_set_47,
        knn_set_48,
        knn_set_49,
        knn_set_50,
        knn_set_51,
        knn_set_52,
        knn_set_53,
        knn_set_54,
        knn_set_55,
        knn_set_56,
        knn_set_57,
        knn_set_58,
        knn_set_59,
        knn_set_60,
        knn_set_61,
        knn_set_62,
        knn_set_63,
        knn_set_64,
        knn_set_65,
        knn_set_66,
        knn_set_67,
        knn_set_68,
        knn_set_69,
        knn_set_70,
        knn_set_71,
        knn_set_72,
        knn_set_73,
        knn_set_74,
        knn_set_75,
        knn_set_76,
        knn_set_77,
        knn_set_78,
        knn_set_79,
        knn_set_80,
        knn_set_81,
        knn_set_82,
        knn_set_83,
        knn_set_84,
        knn_set_85,
        knn_set_86,
        knn_set_87,
        knn_set_88,
        knn_set_89,
        knn_set_90,
        knn_set_91,
        knn_set_92,
        knn_set_93,
        knn_set_94,
        knn_set_95,
        knn_set_96,
        knn_set_97,
        knn_set_98,
        knn_set_99,
        knn_set_100,
        knn_set_101,
        knn_set_102,
        knn_set_103,
        knn_set_104,
        knn_set_105,
        knn_set_106,
        knn_set_107,
        knn_set_108,
        knn_set_109,
        knn_set_110,
        knn_set_111,
        knn_set_112,
        knn_set_113,
        knn_set_114,
        knn_set_115,
        knn_set_116,
        knn_set_117,
        knn_set_118,
        knn_set_119,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        div_i32_out,
        div_i32_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] knn_set;
input  [31:0] knn_set_1;
input  [31:0] knn_set_2;
input  [31:0] knn_set_3;
input  [31:0] knn_set_4;
input  [31:0] knn_set_5;
input  [31:0] knn_set_6;
input  [31:0] knn_set_7;
input  [31:0] knn_set_8;
input  [31:0] knn_set_9;
input  [31:0] knn_set_10;
input  [31:0] knn_set_11;
input  [31:0] knn_set_12;
input  [31:0] knn_set_13;
input  [31:0] knn_set_14;
input  [31:0] knn_set_15;
input  [31:0] knn_set_16;
input  [31:0] knn_set_17;
input  [31:0] knn_set_18;
input  [31:0] knn_set_19;
input  [31:0] knn_set_20;
input  [31:0] knn_set_21;
input  [31:0] knn_set_22;
input  [31:0] knn_set_23;
input  [31:0] knn_set_24;
input  [31:0] knn_set_25;
input  [31:0] knn_set_26;
input  [31:0] knn_set_27;
input  [31:0] knn_set_28;
input  [31:0] knn_set_29;
input  [31:0] knn_set_30;
input  [31:0] knn_set_31;
input  [31:0] knn_set_32;
input  [31:0] knn_set_33;
input  [31:0] knn_set_34;
input  [31:0] knn_set_35;
input  [31:0] knn_set_36;
input  [31:0] knn_set_37;
input  [31:0] knn_set_38;
input  [31:0] knn_set_39;
input  [31:0] knn_set_40;
input  [31:0] knn_set_41;
input  [31:0] knn_set_42;
input  [31:0] knn_set_43;
input  [31:0] knn_set_44;
input  [31:0] knn_set_45;
input  [31:0] knn_set_46;
input  [31:0] knn_set_47;
input  [31:0] knn_set_48;
input  [31:0] knn_set_49;
input  [31:0] knn_set_50;
input  [31:0] knn_set_51;
input  [31:0] knn_set_52;
input  [31:0] knn_set_53;
input  [31:0] knn_set_54;
input  [31:0] knn_set_55;
input  [31:0] knn_set_56;
input  [31:0] knn_set_57;
input  [31:0] knn_set_58;
input  [31:0] knn_set_59;
input  [31:0] knn_set_60;
input  [31:0] knn_set_61;
input  [31:0] knn_set_62;
input  [31:0] knn_set_63;
input  [31:0] knn_set_64;
input  [31:0] knn_set_65;
input  [31:0] knn_set_66;
input  [31:0] knn_set_67;
input  [31:0] knn_set_68;
input  [31:0] knn_set_69;
input  [31:0] knn_set_70;
input  [31:0] knn_set_71;
input  [31:0] knn_set_72;
input  [31:0] knn_set_73;
input  [31:0] knn_set_74;
input  [31:0] knn_set_75;
input  [31:0] knn_set_76;
input  [31:0] knn_set_77;
input  [31:0] knn_set_78;
input  [31:0] knn_set_79;
input  [31:0] knn_set_80;
input  [31:0] knn_set_81;
input  [31:0] knn_set_82;
input  [31:0] knn_set_83;
input  [31:0] knn_set_84;
input  [31:0] knn_set_85;
input  [31:0] knn_set_86;
input  [31:0] knn_set_87;
input  [31:0] knn_set_88;
input  [31:0] knn_set_89;
input  [31:0] knn_set_90;
input  [31:0] knn_set_91;
input  [31:0] knn_set_92;
input  [31:0] knn_set_93;
input  [31:0] knn_set_94;
input  [31:0] knn_set_95;
input  [31:0] knn_set_96;
input  [31:0] knn_set_97;
input  [31:0] knn_set_98;
input  [31:0] knn_set_99;
input  [31:0] knn_set_100;
input  [31:0] knn_set_101;
input  [31:0] knn_set_102;
input  [31:0] knn_set_103;
input  [31:0] knn_set_104;
input  [31:0] knn_set_105;
input  [31:0] knn_set_106;
input  [31:0] knn_set_107;
input  [31:0] knn_set_108;
input  [31:0] knn_set_109;
input  [31:0] knn_set_110;
input  [31:0] knn_set_111;
input  [31:0] knn_set_112;
input  [31:0] knn_set_113;
input  [31:0] knn_set_114;
input  [31:0] knn_set_115;
input  [31:0] knn_set_116;
input  [31:0] knn_set_117;
input  [31:0] knn_set_118;
input  [31:0] knn_set_119;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [31:0] p_out1;
output   p_out1_ap_vld;
output  [31:0] div_i32_out;
output   div_i32_out_ap_vld;

reg ap_idle;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg div_i32_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln130_fu_1162_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] empty_fu_312;
wire   [31:0] select_ln150_5_fu_1581_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [31:0] empty_26_fu_316;
wire   [31:0] select_ln145_3_fu_1565_p3;
reg   [31:0] empty_27_fu_320;
wire   [31:0] select_ln145_fu_1521_p3;
reg   [31:0] label_list_3_fu_324;
wire   [31:0] label_list_fu_1513_p3;
reg   [31:0] label_list_4_fu_328;
wire   [31:0] label_list_6_fu_1557_p3;
reg   [31:0] label_list_5_fu_332;
wire   [31:0] label_list_7_fu_1573_p3;
reg   [1:0] j_fu_336;
wire   [1:0] add_ln132_fu_1589_p2;
reg   [5:0] i_fu_340;
wire   [5:0] select_ln130_2_fu_1245_p3;
reg   [6:0] indvar_flatten11_fu_344;
wire   [6:0] add_ln130_fu_1168_p2;
wire    ap_block_pp0_stage0_01001;
wire   [4:0] empty_28_fu_1144_p1;
wire   [6:0] p_shl_fu_1148_p3;
wire   [6:0] zext_ln130_fu_1140_p1;
wire   [0:0] icmp_ln132_fu_1195_p2;
wire   [5:0] add_ln130_1_fu_1209_p2;
wire   [4:0] empty_31_fu_1219_p1;
wire   [6:0] p_shl256_mid1_fu_1223_p3;
wire   [6:0] zext_ln130_1_fu_1215_p1;
wire   [6:0] p_mid1_fu_1231_p2;
wire   [6:0] empty_29_fu_1156_p2;
wire   [3:0] div_i_udiv_cast_mid2_v_fu_1253_p4;
wire   [1:0] select_ln130_fu_1201_p3;
wire   [6:0] j_1_cast_fu_1267_p1;
wire   [6:0] select_ln130_1_fu_1237_p3;
wire   [6:0] tmp_s_fu_1277_p121;
wire   [31:0] tmp_s_fu_1277_p122;
wire   [0:0] icmp_ln139_fu_1403_p2;
wire   [0:0] icmp_ln139_1_fu_1409_p2;
wire   [0:0] xor_ln139_fu_1415_p2;
wire   [0:0] and_ln139_fu_1421_p2;
wire   [0:0] or_ln139_fu_1431_p2;
wire   [5:0] zext_ln139_fu_1427_p1;
wire   [5:0] pos_fu_1437_p3;
wire   [3:0] tmp_fu_1451_p4;
wire   [0:0] icmp_ln139_2_fu_1445_p2;
wire   [0:0] icmp_ln139_3_fu_1461_p2;
wire   [0:0] and_ln139_1_fu_1467_p2;
wire   [5:0] pos_1_fu_1473_p3;
wire   [4:0] tmp_1_fu_1481_p4;
wire   [31:0] zext_ln130_2_fu_1263_p1;
wire   [0:0] icmp_ln145_fu_1491_p2;
wire   [31:0] select_ln150_fu_1497_p3;
wire   [31:0] select_ln150_1_fu_1505_p3;
wire   [0:0] icmp_ln150_fu_1535_p2;
wire   [0:0] icmp_ln145_1_fu_1529_p2;
wire   [31:0] select_ln150_2_fu_1541_p3;
wire   [31:0] select_ln150_3_fu_1549_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

DigitRec_mux_1207_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 32 ),
    .din65_WIDTH( 32 ),
    .din66_WIDTH( 32 ),
    .din67_WIDTH( 32 ),
    .din68_WIDTH( 32 ),
    .din69_WIDTH( 32 ),
    .din70_WIDTH( 32 ),
    .din71_WIDTH( 32 ),
    .din72_WIDTH( 32 ),
    .din73_WIDTH( 32 ),
    .din74_WIDTH( 32 ),
    .din75_WIDTH( 32 ),
    .din76_WIDTH( 32 ),
    .din77_WIDTH( 32 ),
    .din78_WIDTH( 32 ),
    .din79_WIDTH( 32 ),
    .din80_WIDTH( 32 ),
    .din81_WIDTH( 32 ),
    .din82_WIDTH( 32 ),
    .din83_WIDTH( 32 ),
    .din84_WIDTH( 32 ),
    .din85_WIDTH( 32 ),
    .din86_WIDTH( 32 ),
    .din87_WIDTH( 32 ),
    .din88_WIDTH( 32 ),
    .din89_WIDTH( 32 ),
    .din90_WIDTH( 32 ),
    .din91_WIDTH( 32 ),
    .din92_WIDTH( 32 ),
    .din93_WIDTH( 32 ),
    .din94_WIDTH( 32 ),
    .din95_WIDTH( 32 ),
    .din96_WIDTH( 32 ),
    .din97_WIDTH( 32 ),
    .din98_WIDTH( 32 ),
    .din99_WIDTH( 32 ),
    .din100_WIDTH( 32 ),
    .din101_WIDTH( 32 ),
    .din102_WIDTH( 32 ),
    .din103_WIDTH( 32 ),
    .din104_WIDTH( 32 ),
    .din105_WIDTH( 32 ),
    .din106_WIDTH( 32 ),
    .din107_WIDTH( 32 ),
    .din108_WIDTH( 32 ),
    .din109_WIDTH( 32 ),
    .din110_WIDTH( 32 ),
    .din111_WIDTH( 32 ),
    .din112_WIDTH( 32 ),
    .din113_WIDTH( 32 ),
    .din114_WIDTH( 32 ),
    .din115_WIDTH( 32 ),
    .din116_WIDTH( 32 ),
    .din117_WIDTH( 32 ),
    .din118_WIDTH( 32 ),
    .din119_WIDTH( 32 ),
    .din120_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
mux_1207_32_1_1_U132(
    .din0(knn_set),
    .din1(knn_set_1),
    .din2(knn_set_2),
    .din3(knn_set_3),
    .din4(knn_set_4),
    .din5(knn_set_5),
    .din6(knn_set_6),
    .din7(knn_set_7),
    .din8(knn_set_8),
    .din9(knn_set_9),
    .din10(knn_set_10),
    .din11(knn_set_11),
    .din12(knn_set_12),
    .din13(knn_set_13),
    .din14(knn_set_14),
    .din15(knn_set_15),
    .din16(knn_set_16),
    .din17(knn_set_17),
    .din18(knn_set_18),
    .din19(knn_set_19),
    .din20(knn_set_20),
    .din21(knn_set_21),
    .din22(knn_set_22),
    .din23(knn_set_23),
    .din24(knn_set_24),
    .din25(knn_set_25),
    .din26(knn_set_26),
    .din27(knn_set_27),
    .din28(knn_set_28),
    .din29(knn_set_29),
    .din30(knn_set_30),
    .din31(knn_set_31),
    .din32(knn_set_32),
    .din33(knn_set_33),
    .din34(knn_set_34),
    .din35(knn_set_35),
    .din36(knn_set_36),
    .din37(knn_set_37),
    .din38(knn_set_38),
    .din39(knn_set_39),
    .din40(knn_set_40),
    .din41(knn_set_41),
    .din42(knn_set_42),
    .din43(knn_set_43),
    .din44(knn_set_44),
    .din45(knn_set_45),
    .din46(knn_set_46),
    .din47(knn_set_47),
    .din48(knn_set_48),
    .din49(knn_set_49),
    .din50(knn_set_50),
    .din51(knn_set_51),
    .din52(knn_set_52),
    .din53(knn_set_53),
    .din54(knn_set_54),
    .din55(knn_set_55),
    .din56(knn_set_56),
    .din57(knn_set_57),
    .din58(knn_set_58),
    .din59(knn_set_59),
    .din60(knn_set_60),
    .din61(knn_set_61),
    .din62(knn_set_62),
    .din63(knn_set_63),
    .din64(knn_set_64),
    .din65(knn_set_65),
    .din66(knn_set_66),
    .din67(knn_set_67),
    .din68(knn_set_68),
    .din69(knn_set_69),
    .din70(knn_set_70),
    .din71(knn_set_71),
    .din72(knn_set_72),
    .din73(knn_set_73),
    .din74(knn_set_74),
    .din75(knn_set_75),
    .din76(knn_set_76),
    .din77(knn_set_77),
    .din78(knn_set_78),
    .din79(knn_set_79),
    .din80(knn_set_80),
    .din81(knn_set_81),
    .din82(knn_set_82),
    .din83(knn_set_83),
    .din84(knn_set_84),
    .din85(knn_set_85),
    .din86(knn_set_86),
    .din87(knn_set_87),
    .din88(knn_set_88),
    .din89(knn_set_89),
    .din90(knn_set_90),
    .din91(knn_set_91),
    .din92(knn_set_92),
    .din93(knn_set_93),
    .din94(knn_set_94),
    .din95(knn_set_95),
    .din96(knn_set_96),
    .din97(knn_set_97),
    .din98(knn_set_98),
    .din99(knn_set_99),
    .din100(knn_set_100),
    .din101(knn_set_101),
    .din102(knn_set_102),
    .din103(knn_set_103),
    .din104(knn_set_104),
    .din105(knn_set_105),
    .din106(knn_set_106),
    .din107(knn_set_107),
    .din108(knn_set_108),
    .din109(knn_set_109),
    .din110(knn_set_110),
    .din111(knn_set_111),
    .din112(knn_set_112),
    .din113(knn_set_113),
    .din114(knn_set_114),
    .din115(knn_set_115),
    .din116(knn_set_116),
    .din117(knn_set_117),
    .din118(knn_set_118),
    .din119(knn_set_119),
    .din120(tmp_s_fu_1277_p121),
    .dout(tmp_s_fu_1277_p122)
);

DigitRec_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_26_fu_316 <= 32'd256;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_26_fu_316 <= select_ln145_3_fu_1565_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_27_fu_320 <= 32'd256;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_27_fu_320 <= select_ln145_fu_1521_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            empty_fu_312 <= 32'd256;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            empty_fu_312 <= select_ln150_5_fu_1581_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_340 <= 6'd0;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_340 <= select_ln130_2_fu_1245_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten11_fu_344 <= 7'd0;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten11_fu_344 <= add_ln130_fu_1168_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_336 <= 2'd0;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_336 <= add_ln132_fu_1589_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            label_list_3_fu_324 <= 32'd9;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            label_list_3_fu_324 <= label_list_fu_1513_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            label_list_4_fu_328 <= 32'd9;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            label_list_4_fu_328 <= label_list_6_fu_1557_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            label_list_5_fu_332 <= 32'd9;
        end else if (((icmp_ln130_fu_1162_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            label_list_5_fu_332 <= label_list_7_fu_1573_p3;
        end
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_1162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_1162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        div_i32_out_ap_vld = 1'b1;
    end else begin
        div_i32_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_1162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln130_fu_1162_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln130_1_fu_1209_p2 = (i_fu_340 + 6'd1);

assign add_ln130_fu_1168_p2 = (indvar_flatten11_fu_344 + 7'd1);

assign add_ln132_fu_1589_p2 = (select_ln130_fu_1201_p3 + 2'd1);

assign and_ln139_1_fu_1467_p2 = (icmp_ln139_3_fu_1461_p2 & icmp_ln139_2_fu_1445_p2);

assign and_ln139_fu_1421_p2 = (xor_ln139_fu_1415_p2 & icmp_ln139_1_fu_1409_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign div_i32_out = label_list_3_fu_324;

assign div_i_udiv_cast_mid2_v_fu_1253_p4 = {{select_ln130_2_fu_1245_p3[5:2]}};

assign empty_28_fu_1144_p1 = i_fu_340[4:0];

assign empty_29_fu_1156_p2 = (p_shl_fu_1148_p3 - zext_ln130_fu_1140_p1);

assign empty_31_fu_1219_p1 = add_ln130_1_fu_1209_p2[4:0];

assign icmp_ln130_fu_1162_p2 = ((indvar_flatten11_fu_344 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln132_fu_1195_p2 = ((j_fu_336 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln139_1_fu_1409_p2 = (($signed(tmp_s_fu_1277_p122) < $signed(empty_26_fu_316)) ? 1'b1 : 1'b0);

assign icmp_ln139_2_fu_1445_p2 = (($signed(tmp_s_fu_1277_p122) < $signed(empty_27_fu_320)) ? 1'b1 : 1'b0);

assign icmp_ln139_3_fu_1461_p2 = ((tmp_fu_1451_p4 != 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln139_fu_1403_p2 = (($signed(tmp_s_fu_1277_p122) < $signed(empty_fu_312)) ? 1'b1 : 1'b0);

assign icmp_ln145_1_fu_1529_p2 = ((pos_1_fu_1473_p3 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_1491_p2 = ((tmp_1_fu_1481_p4 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_1535_p2 = ((pos_1_fu_1473_p3 == 6'd1) ? 1'b1 : 1'b0);

assign j_1_cast_fu_1267_p1 = select_ln130_fu_1201_p3;

assign label_list_6_fu_1557_p3 = ((icmp_ln145_1_fu_1529_p2[0:0] == 1'b1) ? label_list_5_fu_332 : select_ln150_2_fu_1541_p3);

assign label_list_7_fu_1573_p3 = ((icmp_ln145_1_fu_1529_p2[0:0] == 1'b1) ? zext_ln130_2_fu_1263_p1 : label_list_5_fu_332);

assign label_list_fu_1513_p3 = ((icmp_ln145_fu_1491_p2[0:0] == 1'b1) ? label_list_4_fu_328 : select_ln150_fu_1497_p3);

assign or_ln139_fu_1431_p2 = (icmp_ln139_fu_1403_p2 | and_ln139_fu_1421_p2);

assign p_mid1_fu_1231_p2 = (p_shl256_mid1_fu_1223_p3 - zext_ln130_1_fu_1215_p1);

assign p_out = label_list_5_fu_332;

assign p_out1 = label_list_4_fu_328;

assign p_shl256_mid1_fu_1223_p3 = {{empty_31_fu_1219_p1}, {2'd0}};

assign p_shl_fu_1148_p3 = {{empty_28_fu_1144_p1}, {2'd0}};

assign pos_1_fu_1473_p3 = ((and_ln139_1_fu_1467_p2[0:0] == 1'b1) ? 6'd2 : pos_fu_1437_p3);

assign pos_fu_1437_p3 = ((or_ln139_fu_1431_p2[0:0] == 1'b1) ? zext_ln139_fu_1427_p1 : 6'd40);

assign select_ln130_1_fu_1237_p3 = ((icmp_ln132_fu_1195_p2[0:0] == 1'b1) ? p_mid1_fu_1231_p2 : empty_29_fu_1156_p2);

assign select_ln130_2_fu_1245_p3 = ((icmp_ln132_fu_1195_p2[0:0] == 1'b1) ? add_ln130_1_fu_1209_p2 : i_fu_340);

assign select_ln130_fu_1201_p3 = ((icmp_ln132_fu_1195_p2[0:0] == 1'b1) ? 2'd0 : j_fu_336);

assign select_ln145_3_fu_1565_p3 = ((icmp_ln145_1_fu_1529_p2[0:0] == 1'b1) ? empty_fu_312 : select_ln150_3_fu_1549_p3);

assign select_ln145_fu_1521_p3 = ((icmp_ln145_fu_1491_p2[0:0] == 1'b1) ? empty_26_fu_316 : select_ln150_1_fu_1505_p3);

assign select_ln150_1_fu_1505_p3 = ((and_ln139_1_fu_1467_p2[0:0] == 1'b1) ? tmp_s_fu_1277_p122 : empty_27_fu_320);

assign select_ln150_2_fu_1541_p3 = ((icmp_ln150_fu_1535_p2[0:0] == 1'b1) ? zext_ln130_2_fu_1263_p1 : label_list_4_fu_328);

assign select_ln150_3_fu_1549_p3 = ((icmp_ln150_fu_1535_p2[0:0] == 1'b1) ? tmp_s_fu_1277_p122 : empty_26_fu_316);

assign select_ln150_5_fu_1581_p3 = ((icmp_ln145_1_fu_1529_p2[0:0] == 1'b1) ? tmp_s_fu_1277_p122 : empty_fu_312);

assign select_ln150_fu_1497_p3 = ((and_ln139_1_fu_1467_p2[0:0] == 1'b1) ? zext_ln130_2_fu_1263_p1 : label_list_3_fu_324);

assign tmp_1_fu_1481_p4 = {{pos_1_fu_1473_p3[5:1]}};

assign tmp_fu_1451_p4 = {{pos_fu_1437_p3[5:2]}};

assign tmp_s_fu_1277_p121 = (j_1_cast_fu_1267_p1 + select_ln130_1_fu_1237_p3);

assign xor_ln139_fu_1415_p2 = (icmp_ln139_fu_1403_p2 ^ 1'd1);

assign zext_ln130_1_fu_1215_p1 = add_ln130_1_fu_1209_p2;

assign zext_ln130_2_fu_1263_p1 = div_i_udiv_cast_mid2_v_fu_1253_p4;

assign zext_ln130_fu_1140_p1 = i_fu_340;

assign zext_ln139_fu_1427_p1 = and_ln139_fu_1421_p2;

endmodule //DigitRec_DigitRec_Pipeline_LANES_INSERTION_SORT_OUTER

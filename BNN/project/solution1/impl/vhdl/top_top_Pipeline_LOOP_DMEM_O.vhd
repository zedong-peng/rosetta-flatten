-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_top_Pipeline_LOOP_DMEM_O is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_words : IN STD_LOGIC_VECTOR (15 downto 0);
    dmem_o_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dmem_o_ce0 : OUT STD_LOGIC;
    dmem_o_we0 : OUT STD_LOGIC;
    dmem_o_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    r_V : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln1494 : IN STD_LOGIC_VECTOR (4 downto 0);
    brmerge22 : IN STD_LOGIC_VECTOR (0 downto 0);
    words_per_out_V_cast5 : IN STD_LOGIC_VECTOR (4 downto 0);
    dmem_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    dmem_V_ce0 : OUT STD_LOGIC;
    dmem_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of top_top_Pipeline_LOOP_DMEM_O is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal brmerge22_read_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal words_per_out_V_cast5_cast_fu_141_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal words_per_out_V_cast5_cast_reg_354 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1494_cast_fu_145_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1494_cast_reg_359 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_V_3_reg_364 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_3_reg_364_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_3_reg_364_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_3_reg_364_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_load_reg_375 : STD_LOGIC_VECTOR (9 downto 0);
    signal rhs_V_load_reg_375_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_5_fu_188_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_reg_380_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_reg_380_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln852_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln1514_6_cast_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal img_idx_V_fu_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal img_idx_V_2_fu_219_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal rhs_V_fu_76 : STD_LOGIC_VECTOR (9 downto 0);
    signal img_off_V_1_fu_227_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_fu_80 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln840_fu_176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_V_5_cast_fu_167_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal img_off_V_fu_202_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1019_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_idx_V_1_fu_213_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_1_fu_256_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_fu_253_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1513_fu_265_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_280_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln849_fu_288_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_309_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_269_p5 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln849_fu_288_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln849_fu_288_p2 : signal is "no";
    signal storemerge_fu_293_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_309_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_309_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_309_p20 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_mac_muladd_12s_5ns_10ns_12_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_12s_5ns_10ns_12_4_1_U407 : component top_mac_muladd_12s_5ns_10ns_12_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 5,
        din2_WIDTH => 10,
        dout_WIDTH => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_309_p0,
        din1 => grp_fu_309_p1,
        din2 => grp_fu_309_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p3);

    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_fu_80 <= ap_const_lv8_0;
                elsif (((icmp_ln1027_fu_171_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_V_fu_80 <= add_ln840_fu_176_p2;
                end if;
            end if; 
        end if;
    end process;

    img_idx_V_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    img_idx_V_fu_72 <= ap_const_lv16_0;
                elsif (((icmp_ln1027_fu_171_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    img_idx_V_fu_72 <= img_idx_V_2_fu_219_p3;
                end if;
            end if; 
        end if;
    end process;

    rhs_V_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    rhs_V_fu_76 <= ap_const_lv10_0;
                elsif (((icmp_ln1027_fu_171_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    rhs_V_fu_76 <= img_off_V_1_fu_227_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                i_V_3_reg_364 <= i_V_fu_80;
                    words_per_out_V_cast5_cast_reg_354(4 downto 0) <= words_per_out_V_cast5_cast_fu_141_p1(4 downto 0);
                    zext_ln1494_cast_reg_359(4 downto 0) <= zext_ln1494_cast_fu_145_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                i_V_3_reg_364_pp0_iter2_reg <= i_V_3_reg_364;
                i_V_3_reg_364_pp0_iter3_reg <= i_V_3_reg_364_pp0_iter2_reg;
                i_V_3_reg_364_pp0_iter4_reg <= i_V_3_reg_364_pp0_iter3_reg;
                ret_V_5_reg_380_pp0_iter2_reg <= ret_V_5_reg_380;
                ret_V_5_reg_380_pp0_iter3_reg <= ret_V_5_reg_380_pp0_iter2_reg;
                rhs_V_load_reg_375_pp0_iter2_reg <= rhs_V_load_reg_375;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge22_read_reg_338 = ap_const_lv1_0) and (icmp_ln1027_fu_171_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ret_V_5_reg_380 <= ret_V_5_fu_188_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_fu_171_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                rhs_V_load_reg_375 <= rhs_V_fu_76;
            end if;
        end if;
    end process;
    words_per_out_V_cast5_cast_reg_354(9 downto 5) <= "00000";
    zext_ln1494_cast_reg_359(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln840_fu_176_p2 <= std_logic_vector(unsigned(i_V_fu_80) + unsigned(ap_const_lv8_1));
    add_ln849_fu_288_p1 <= grp_fu_309_p3;
    add_ln849_fu_288_p2 <= std_logic_vector(unsigned(tmp_6_fu_280_p4) + unsigned(add_ln849_fu_288_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_171_p2)
    begin
        if (((icmp_ln1027_fu_171_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    brmerge22_read_reg_338 <= brmerge22;
    dmem_V_address0 <= zext_ln852_fu_300_p1(12 - 1 downto 0);

    dmem_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            dmem_V_ce0 <= ap_const_logic_1;
        else 
            dmem_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dmem_o_address0 <= trunc_ln1514_6_cast_fu_305_p1(7 - 1 downto 0);

    dmem_o_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            dmem_o_ce0 <= ap_const_logic_1;
        else 
            dmem_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dmem_o_d0 <= dmem_V_q0;

    dmem_o_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            dmem_o_we0 <= ap_const_logic_1;
        else 
            dmem_o_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_309_p0 <= img_idx_V_fu_72(12 downto 1);
    grp_fu_309_p1 <= zext_ln1494_cast_reg_359(5 - 1 downto 0);
    grp_fu_309_p2 <= grp_fu_309_p20(10 - 1 downto 0);
    grp_fu_309_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_load_reg_375_pp0_iter2_reg),12));
    i_V_5_cast_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_80),16));
    icmp_ln1019_fu_208_p2 <= "1" when (img_off_V_fu_202_p2 = words_per_out_V_cast5_cast_reg_354) else "0";
    icmp_ln1027_fu_171_p2 <= "1" when (i_V_5_cast_fu_167_p1 = output_words) else "0";
    img_idx_V_1_fu_213_p2 <= std_logic_vector(unsigned(img_idx_V_fu_72) + unsigned(ap_const_lv16_1));
    img_idx_V_2_fu_219_p3 <= 
        img_idx_V_1_fu_213_p2 when (icmp_ln1019_fu_208_p2(0) = '1') else 
        img_idx_V_fu_72;
    img_off_V_1_fu_227_p3 <= 
        ap_const_lv10_0 when (icmp_ln1019_fu_208_p2(0) = '1') else 
        img_off_V_fu_202_p2;
    img_off_V_fu_202_p2 <= std_logic_vector(unsigned(rhs_V_fu_76) + unsigned(ap_const_lv10_1));
    ret_V_1_fu_256_p4 <= i_V_3_reg_364_pp0_iter3_reg(7 downto 1);
    ret_V_5_fu_188_p1 <= img_idx_V_fu_72(1 - 1 downto 0);
    ret_V_fu_253_p1 <= i_V_3_reg_364_pp0_iter3_reg(1 - 1 downto 0);
    storemerge_fu_293_p3 <= 
        tmp_5_fu_269_p5 when (brmerge22(0) = '1') else 
        add_ln849_fu_288_p2;
    tmp_5_fu_269_p5 <= (((r_V & ret_V_fu_253_p1) & ap_const_lv2_0) & zext_ln1513_fu_265_p1);
    tmp_6_fu_280_p4 <= ((r_V & ret_V_5_reg_380_pp0_iter3_reg) & ap_const_lv10_0);
    trunc_ln1514_6_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_3_reg_364_pp0_iter4_reg),64));
    words_per_out_V_cast5_cast_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(words_per_out_V_cast5),10));
    zext_ln1494_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1494),12));
    zext_ln1513_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_1_fu_256_p4),8));
    zext_ln852_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(storemerge_fu_293_p3),64));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_top_Pipeline_LOOP_DMEM_I is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_words : IN STD_LOGIC_VECTOR (15 downto 0);
    zext_ln754 : IN STD_LOGIC_VECTOR (4 downto 0);
    dmem_mode : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln751 : IN STD_LOGIC_VECTOR (2 downto 0);
    dmem_i_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    dmem_i_ce0 : OUT STD_LOGIC;
    dmem_i_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    layer_type_V : IN STD_LOGIC_VECTOR (1 downto 0);
    zext_ln758 : IN STD_LOGIC_VECTOR (1 downto 0);
    dmem_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    dmem_V_ce0 : OUT STD_LOGIC;
    dmem_V_we0 : OUT STD_LOGIC;
    dmem_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of top_top_Pipeline_LOOP_DMEM_I is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal layer_type_V_read_reg_411 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln751_cast_fu_169_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln751_cast_reg_421 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln754_cast_fu_173_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln754_cast_reg_426 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_4_reg_431 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_V_cast_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln761_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln758_1_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln763_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal img_idx_V_fu_78 : STD_LOGIC_VECTOR (15 downto 0);
    signal img_idx_V_4_fu_357_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal rhs_V_fu_82 : STD_LOGIC_VECTOR (9 downto 0);
    signal img_off_V_2_fu_365_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_fu_86 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln840_fu_201_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_i_V_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_5_fu_224_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln761_fu_233_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_9_fu_238_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_241_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_10_fu_220_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_fu_266_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_fu_276_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1495_fu_281_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_257_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_8_fu_285_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln758_fu_291_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_fu_302_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_305_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_1_fu_314_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln763_fu_323_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal img_off_V_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln1019_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_idx_V_3_fu_351_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_97 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1027_fu_195_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_V_fu_86 <= add_ln840_fu_201_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_V_fu_86 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    img_idx_V_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    img_idx_V_fu_78 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    img_idx_V_fu_78 <= img_idx_V_4_fu_357_p3;
                end if;
            end if; 
        end if;
    end process;

    rhs_V_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    rhs_V_fu_82 <= ap_const_lv10_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    rhs_V_fu_82 <= img_off_V_2_fu_365_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_V_4_reg_431 <= ap_sig_allocacmp_i_V_4;
                    zext_ln751_cast_reg_421(2 downto 0) <= zext_ln751_cast_fu_169_p1(2 downto 0);
                    zext_ln754_cast_reg_426(4 downto 0) <= zext_ln754_cast_fu_173_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln751_cast_reg_421(11 downto 3) <= "000000000";
    zext_ln754_cast_reg_426(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln758_fu_291_p2 <= std_logic_vector(unsigned(tmp_2_fu_257_p4) + unsigned(ret_V_8_fu_285_p2));
    add_ln761_fu_233_p2 <= std_logic_vector(unsigned(zext_ln758) + unsigned(ret_V_5_fu_224_p4));
    add_ln763_fu_323_p2 <= std_logic_vector(unsigned(tmp_1_fu_305_p4) + unsigned(ret_V_1_fu_314_p4));
    add_ln840_fu_201_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_V_4) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_97_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_97 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_195_p2)
    begin
        if (((icmp_ln1027_fu_195_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_V_4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_V_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_V_4 <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_i_V_4 <= i_V_fu_86;
        end if; 
    end process;


    dmem_V_address0_assign_proc : process(layer_type_V_read_reg_411, zext_ln761_fu_249_p1, zext_ln758_1_fu_297_p1, zext_ln763_fu_329_p1, ap_condition_97)
    begin
        if ((ap_const_boolean_1 = ap_condition_97)) then
            if ((not((layer_type_V_read_reg_411 = ap_const_lv2_0)) and not((layer_type_V_read_reg_411 = ap_const_lv2_1)))) then 
                dmem_V_address0 <= zext_ln763_fu_329_p1(12 - 1 downto 0);
            elsif ((layer_type_V_read_reg_411 = ap_const_lv2_1)) then 
                dmem_V_address0 <= zext_ln758_1_fu_297_p1(12 - 1 downto 0);
            elsif ((layer_type_V_read_reg_411 = ap_const_lv2_0)) then 
                dmem_V_address0 <= zext_ln761_fu_249_p1(12 - 1 downto 0);
            else 
                dmem_V_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            dmem_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dmem_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, layer_type_V_read_reg_411)
    begin
        if ((((layer_type_V_read_reg_411 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not((layer_type_V_read_reg_411 = ap_const_lv2_0)) and not((layer_type_V_read_reg_411 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((layer_type_V_read_reg_411 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dmem_V_ce0 <= ap_const_logic_1;
        else 
            dmem_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dmem_V_d0 <= dmem_i_q0;

    dmem_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, layer_type_V_read_reg_411)
    begin
        if ((((layer_type_V_read_reg_411 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not((layer_type_V_read_reg_411 = ap_const_lv2_0)) and not((layer_type_V_read_reg_411 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((layer_type_V_read_reg_411 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dmem_V_we0 <= ap_const_logic_1;
        else 
            dmem_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dmem_i_address0 <= i_V_cast_fu_207_p1(11 - 1 downto 0);

    dmem_i_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dmem_i_ce0 <= ap_const_logic_1;
        else 
            dmem_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_V_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_V_4),64));
    icmp_ln1019_fu_346_p2 <= "1" when (img_off_V_fu_340_p2 = zext_ln754_cast_reg_426) else "0";
    icmp_ln1027_fu_195_p2 <= "1" when (ap_sig_allocacmp_i_V_4 = input_words) else "0";
    img_idx_V_3_fu_351_p2 <= std_logic_vector(unsigned(img_idx_V_fu_78) + unsigned(ap_const_lv16_1));
    img_idx_V_4_fu_357_p3 <= 
        img_idx_V_3_fu_351_p2 when (icmp_ln1019_fu_346_p2(0) = '1') else 
        img_idx_V_fu_78;
    img_off_V_2_fu_365_p3 <= 
        ap_const_lv10_0 when (icmp_ln1019_fu_346_p2(0) = '1') else 
        img_off_V_fu_340_p2;
    img_off_V_fu_340_p2 <= std_logic_vector(unsigned(rhs_V_fu_82) + unsigned(ap_const_lv10_1));
    layer_type_V_read_reg_411 <= layer_type_V;
    r_V_fu_276_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln2_fu_266_p4),to_integer(unsigned('0' & zext_ln751_cast_reg_421(12-1 downto 0)))));
    ret_V_10_fu_220_p1 <= img_idx_V_fu_78(1 - 1 downto 0);
    ret_V_1_fu_314_p4 <= i_V_4_reg_431(12 downto 1);
    ret_V_5_fu_224_p4 <= i_V_4_reg_431(11 downto 10);
    ret_V_8_fu_285_p2 <= std_logic_vector(unsigned(r_V_fu_276_p2) + unsigned(zext_ln1495_fu_281_p1));
    ret_V_9_fu_238_p1 <= i_V_4_reg_431(10 - 1 downto 0);
    ret_V_fu_302_p1 <= i_V_4_reg_431(1 - 1 downto 0);
    tmp_1_fu_305_p4 <= ((dmem_mode & ret_V_fu_302_p1) & ap_const_lv10_0);
    tmp_2_fu_257_p4 <= ((dmem_mode & ret_V_10_fu_220_p1) & ap_const_lv10_0);
    tmp_4_fu_241_p3 <= (add_ln761_fu_233_p2 & ret_V_9_fu_238_p1);
    trunc_ln2_fu_266_p4 <= img_idx_V_fu_78(12 downto 1);
    zext_ln1495_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rhs_V_fu_82),12));
    zext_ln751_cast_fu_169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln751),12));
    zext_ln754_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln754),10));
    zext_ln758_1_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln758_fu_291_p2),64));
    zext_ln761_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_241_p3),64));
    zext_ln763_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln763_fu_323_p2),64));
end behav;

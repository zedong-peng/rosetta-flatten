// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_fp_conv_Pipeline_LOOP_RESET_LINEBUFFERS_PROLOG_COLS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        lbuf_V_0_address0,
        lbuf_V_0_ce0,
        lbuf_V_0_we0,
        lbuf_V_0_d0,
        lbuf_V_1_address0,
        lbuf_V_1_ce0,
        lbuf_V_1_we0,
        lbuf_V_1_d0,
        lbuf_V_1_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] lbuf_V_0_address0;
output   lbuf_V_0_ce0;
output   lbuf_V_0_we0;
output  [19:0] lbuf_V_0_d0;
output  [6:0] lbuf_V_1_address0;
output   lbuf_V_1_ce0;
output   lbuf_V_1_we0;
output  [19:0] lbuf_V_1_d0;
input  [19:0] lbuf_V_1_q0;

reg ap_idle;
reg lbuf_V_0_ce0;
reg lbuf_V_0_we0;
reg lbuf_V_1_ce0;
reg lbuf_V_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_106_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln490_1_fu_170_p1;
reg   [63:0] zext_ln490_1_reg_220;
wire    ap_block_pp0_stage0_11001;
wire    ap_block_pp0_stage0;
reg   [5:0] c_V_fu_48;
wire   [5:0] add_ln840_18_fu_175_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_c_V_load;
reg   [1:0] m_V_fu_52;
wire   [1:0] select_ln1027_2_fu_144_p3;
reg   [1:0] ap_sig_allocacmp_m_V_load;
reg   [6:0] indvar_flatten_fu_56;
wire   [6:0] add_ln1027_fu_112_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln1027_1_fu_130_p2;
wire   [1:0] add_ln840_fu_124_p2;
wire   [5:0] select_ln1027_fu_136_p3;
wire   [6:0] tmp_s_fu_152_p3;
wire   [6:0] zext_ln490_fu_160_p1;
wire   [6:0] add_ln490_fu_164_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c_V_fu_48 <= add_ln840_18_fu_175_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c_V_fu_48 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_56 <= add_ln1027_fu_112_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_56 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_106_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            m_V_fu_52 <= select_ln1027_2_fu_144_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            m_V_fu_52 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_106_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln490_1_reg_220[6 : 0] <= zext_ln490_1_fu_170_p1[6 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_106_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c_V_load = 6'd0;
    end else begin
        ap_sig_allocacmp_c_V_load = c_V_fu_48;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_m_V_load = 2'd0;
    end else begin
        ap_sig_allocacmp_m_V_load = m_V_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_V_0_ce0 = 1'b1;
    end else begin
        lbuf_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_V_0_we0 = 1'b1;
    end else begin
        lbuf_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_106_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_V_1_ce0 = 1'b1;
    end else begin
        lbuf_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_106_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lbuf_V_1_we0 = 1'b1;
    end else begin
        lbuf_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1027_fu_112_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln490_fu_164_p2 = (tmp_s_fu_152_p3 + zext_ln490_fu_160_p1);

assign add_ln840_18_fu_175_p2 = (select_ln1027_fu_136_p3 + 6'd1);

assign add_ln840_fu_124_p2 = (ap_sig_allocacmp_m_V_load + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1027_1_fu_130_p2 = ((ap_sig_allocacmp_c_V_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_106_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd96) ? 1'b1 : 1'b0);

assign lbuf_V_0_address0 = zext_ln490_1_reg_220;

assign lbuf_V_0_d0 = lbuf_V_1_q0;

assign lbuf_V_1_address0 = zext_ln490_1_fu_170_p1;

assign lbuf_V_1_d0 = 20'd0;

assign select_ln1027_2_fu_144_p3 = ((icmp_ln1027_1_fu_130_p2[0:0] == 1'b1) ? add_ln840_fu_124_p2 : ap_sig_allocacmp_m_V_load);

assign select_ln1027_fu_136_p3 = ((icmp_ln1027_1_fu_130_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_c_V_load);

assign tmp_s_fu_152_p3 = {{select_ln1027_2_fu_144_p3}, {5'd0}};

assign zext_ln490_1_fu_170_p1 = add_ln490_fu_164_p2;

assign zext_ln490_fu_160_p1 = select_ln1027_fu_136_p3;

always @ (posedge ap_clk) begin
    zext_ln490_1_reg_220[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //top_fp_conv_Pipeline_LOOP_RESET_LINEBUFFERS_PROLOG_COLS

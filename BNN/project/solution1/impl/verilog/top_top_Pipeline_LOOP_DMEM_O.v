// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_top_Pipeline_LOOP_DMEM_O (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_words,
        dmem_o_address0,
        dmem_o_ce0,
        dmem_o_we0,
        dmem_o_d0,
        r_V,
        zext_ln1494,
        brmerge22,
        words_per_out_V_cast5,
        dmem_V_address0,
        dmem_V_ce0,
        dmem_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] output_words;
output  [6:0] dmem_o_address0;
output   dmem_o_ce0;
output   dmem_o_we0;
output  [63:0] dmem_o_d0;
input  [0:0] r_V;
input  [4:0] zext_ln1494;
input  [0:0] brmerge22;
input  [4:0] words_per_out_V_cast5;
output  [11:0] dmem_V_address0;
output   dmem_V_ce0;
input  [63:0] dmem_V_q0;

reg ap_idle;
reg dmem_o_ce0;
reg dmem_o_we0;
reg dmem_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_171_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] brmerge22_read_reg_338;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] words_per_out_V_cast5_cast_fu_141_p1;
reg   [9:0] words_per_out_V_cast5_cast_reg_354;
wire   [11:0] zext_ln1494_cast_fu_145_p1;
reg   [11:0] zext_ln1494_cast_reg_359;
reg   [7:0] i_V_3_reg_364;
reg   [7:0] i_V_3_reg_364_pp0_iter2_reg;
reg   [7:0] i_V_3_reg_364_pp0_iter3_reg;
reg   [7:0] i_V_3_reg_364_pp0_iter4_reg;
reg   [9:0] rhs_V_load_reg_375;
reg   [9:0] rhs_V_load_reg_375_pp0_iter2_reg;
wire   [0:0] ret_V_5_fu_188_p1;
reg   [0:0] ret_V_5_reg_380;
reg   [0:0] ret_V_5_reg_380_pp0_iter2_reg;
reg   [0:0] ret_V_5_reg_380_pp0_iter3_reg;
wire   [63:0] zext_ln852_fu_300_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] trunc_ln1514_6_cast_fu_305_p1;
reg   [15:0] img_idx_V_fu_72;
wire   [15:0] img_idx_V_2_fu_219_p3;
wire    ap_loop_init;
reg   [9:0] rhs_V_fu_76;
wire   [9:0] img_off_V_1_fu_227_p3;
reg   [7:0] i_V_fu_80;
wire   [7:0] add_ln840_fu_176_p2;
wire   [15:0] i_V_5_cast_fu_167_p1;
wire   [9:0] img_off_V_fu_202_p2;
wire   [0:0] icmp_ln1019_fu_208_p2;
wire   [15:0] img_idx_V_1_fu_213_p2;
wire   [6:0] ret_V_1_fu_256_p4;
wire   [0:0] ret_V_fu_253_p1;
wire   [7:0] zext_ln1513_fu_265_p1;
wire   [11:0] tmp_6_fu_280_p4;
wire  signed [11:0] add_ln849_fu_288_p1;
wire   [11:0] grp_fu_309_p3;
wire   [11:0] tmp_5_fu_269_p5;
(* use_dsp48 = "no" *) wire   [11:0] add_ln849_fu_288_p2;
wire   [11:0] storemerge_fu_293_p3;
wire  signed [11:0] grp_fu_309_p0;
wire   [4:0] grp_fu_309_p1;
wire   [9:0] grp_fu_309_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [11:0] grp_fu_309_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_mac_muladd_12s_5ns_10ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
mac_muladd_12s_5ns_10ns_12_4_1_U407(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_309_p0),
    .din1(grp_fu_309_p1),
    .din2(grp_fu_309_p2),
    .ce(1'b1),
    .dout(grp_fu_309_p3)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_V_fu_80 <= 8'd0;
        end else if (((icmp_ln1027_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_V_fu_80 <= add_ln840_fu_176_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            img_idx_V_fu_72 <= 16'd0;
        end else if (((icmp_ln1027_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            img_idx_V_fu_72 <= img_idx_V_2_fu_219_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            rhs_V_fu_76 <= 10'd0;
        end else if (((icmp_ln1027_fu_171_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            rhs_V_fu_76 <= img_off_V_1_fu_227_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        i_V_3_reg_364 <= i_V_fu_80;
        words_per_out_V_cast5_cast_reg_354[4 : 0] <= words_per_out_V_cast5_cast_fu_141_p1[4 : 0];
        zext_ln1494_cast_reg_359[4 : 0] <= zext_ln1494_cast_fu_145_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        i_V_3_reg_364_pp0_iter2_reg <= i_V_3_reg_364;
        i_V_3_reg_364_pp0_iter3_reg <= i_V_3_reg_364_pp0_iter2_reg;
        i_V_3_reg_364_pp0_iter4_reg <= i_V_3_reg_364_pp0_iter3_reg;
        ret_V_5_reg_380_pp0_iter2_reg <= ret_V_5_reg_380;
        ret_V_5_reg_380_pp0_iter3_reg <= ret_V_5_reg_380_pp0_iter2_reg;
        rhs_V_load_reg_375_pp0_iter2_reg <= rhs_V_load_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if (((brmerge22_read_reg_338 == 1'd0) & (icmp_ln1027_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ret_V_5_reg_380 <= ret_V_5_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rhs_V_load_reg_375 <= rhs_V_fu_76;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dmem_V_ce0 = 1'b1;
    end else begin
        dmem_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        dmem_o_ce0 = 1'b1;
    end else begin
        dmem_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        dmem_o_we0 = 1'b1;
    end else begin
        dmem_o_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln840_fu_176_p2 = (i_V_fu_80 + 8'd1);

assign add_ln849_fu_288_p1 = grp_fu_309_p3;

assign add_ln849_fu_288_p2 = ($signed(tmp_6_fu_280_p4) + $signed(add_ln849_fu_288_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign brmerge22_read_reg_338 = brmerge22;

assign dmem_V_address0 = zext_ln852_fu_300_p1;

assign dmem_o_address0 = trunc_ln1514_6_cast_fu_305_p1;

assign dmem_o_d0 = dmem_V_q0;

assign grp_fu_309_p0 = {{img_idx_V_fu_72[12:1]}};

assign grp_fu_309_p1 = zext_ln1494_cast_reg_359;

assign grp_fu_309_p2 = grp_fu_309_p20;

assign grp_fu_309_p20 = rhs_V_load_reg_375_pp0_iter2_reg;

assign i_V_5_cast_fu_167_p1 = i_V_fu_80;

assign icmp_ln1019_fu_208_p2 = ((img_off_V_fu_202_p2 == words_per_out_V_cast5_cast_reg_354) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_171_p2 = ((i_V_5_cast_fu_167_p1 == output_words) ? 1'b1 : 1'b0);

assign img_idx_V_1_fu_213_p2 = (img_idx_V_fu_72 + 16'd1);

assign img_idx_V_2_fu_219_p3 = ((icmp_ln1019_fu_208_p2[0:0] == 1'b1) ? img_idx_V_1_fu_213_p2 : img_idx_V_fu_72);

assign img_off_V_1_fu_227_p3 = ((icmp_ln1019_fu_208_p2[0:0] == 1'b1) ? 10'd0 : img_off_V_fu_202_p2);

assign img_off_V_fu_202_p2 = (rhs_V_fu_76 + 10'd1);

assign ret_V_1_fu_256_p4 = {{i_V_3_reg_364_pp0_iter3_reg[7:1]}};

assign ret_V_5_fu_188_p1 = img_idx_V_fu_72[0:0];

assign ret_V_fu_253_p1 = i_V_3_reg_364_pp0_iter3_reg[0:0];

assign storemerge_fu_293_p3 = ((brmerge22[0:0] == 1'b1) ? tmp_5_fu_269_p5 : add_ln849_fu_288_p2);

assign tmp_5_fu_269_p5 = {{{{r_V}, {ret_V_fu_253_p1}}, {2'd0}}, {zext_ln1513_fu_265_p1}};

assign tmp_6_fu_280_p4 = {{{r_V}, {ret_V_5_reg_380_pp0_iter3_reg}}, {10'd0}};

assign trunc_ln1514_6_cast_fu_305_p1 = i_V_3_reg_364_pp0_iter4_reg;

assign words_per_out_V_cast5_cast_fu_141_p1 = words_per_out_V_cast5;

assign zext_ln1494_cast_fu_145_p1 = zext_ln1494;

assign zext_ln1513_fu_265_p1 = ret_V_1_fu_256_p4;

assign zext_ln852_fu_300_p1 = storemerge_fu_293_p3;

always @ (posedge ap_clk) begin
    words_per_out_V_cast5_cast_reg_354[9:5] <= 5'b00000;
    zext_ln1494_cast_reg_359[11:5] <= 7'b0000000;
end

endmodule //top_top_Pipeline_LOOP_DMEM_O

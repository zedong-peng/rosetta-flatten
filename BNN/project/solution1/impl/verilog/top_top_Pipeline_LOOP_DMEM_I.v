// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_top_Pipeline_LOOP_DMEM_I (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_words,
        zext_ln754,
        dmem_mode,
        zext_ln751,
        dmem_i_address0,
        dmem_i_ce0,
        dmem_i_q0,
        layer_type_V,
        zext_ln758,
        dmem_V_address0,
        dmem_V_ce0,
        dmem_V_we0,
        dmem_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_words;
input  [4:0] zext_ln754;
input  [0:0] dmem_mode;
input  [2:0] zext_ln751;
output  [10:0] dmem_i_address0;
output   dmem_i_ce0;
input  [63:0] dmem_i_q0;
input  [1:0] layer_type_V;
input  [1:0] zext_ln758;
output  [11:0] dmem_V_address0;
output   dmem_V_ce0;
output   dmem_V_we0;
output  [63:0] dmem_V_d0;

reg ap_idle;
reg dmem_i_ce0;
reg[11:0] dmem_V_address0;
reg dmem_V_ce0;
reg dmem_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1027_fu_195_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] layer_type_V_read_reg_411;
wire   [11:0] zext_ln751_cast_fu_169_p1;
reg   [11:0] zext_ln751_cast_reg_421;
wire   [9:0] zext_ln754_cast_fu_173_p1;
reg   [9:0] zext_ln754_cast_reg_426;
reg   [15:0] i_V_4_reg_431;
wire   [63:0] i_V_cast_fu_207_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln761_fu_249_p1;
wire   [63:0] zext_ln758_1_fu_297_p1;
wire   [63:0] zext_ln763_fu_329_p1;
reg   [15:0] img_idx_V_fu_78;
wire   [15:0] img_idx_V_4_fu_357_p3;
wire    ap_loop_init;
reg   [9:0] rhs_V_fu_82;
wire   [9:0] img_off_V_2_fu_365_p3;
reg   [15:0] i_V_fu_86;
wire   [15:0] add_ln840_fu_201_p2;
reg   [15:0] ap_sig_allocacmp_i_V_4;
wire   [1:0] ret_V_5_fu_224_p4;
wire   [1:0] add_ln761_fu_233_p2;
wire   [9:0] ret_V_9_fu_238_p1;
wire   [11:0] tmp_4_fu_241_p3;
wire   [0:0] ret_V_10_fu_220_p1;
wire   [11:0] trunc_ln2_fu_266_p4;
wire   [11:0] r_V_fu_276_p2;
wire   [11:0] zext_ln1495_fu_281_p1;
wire   [11:0] tmp_2_fu_257_p4;
wire   [11:0] ret_V_8_fu_285_p2;
wire   [11:0] add_ln758_fu_291_p2;
wire   [0:0] ret_V_fu_302_p1;
wire   [11:0] tmp_1_fu_305_p4;
wire   [11:0] ret_V_1_fu_314_p4;
wire   [11:0] add_ln763_fu_323_p2;
wire   [9:0] img_off_V_fu_340_p2;
wire   [0:0] icmp_ln1019_fu_346_p2;
wire   [15:0] img_idx_V_3_fu_351_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_97;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1027_fu_195_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_V_fu_86 <= add_ln840_fu_201_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_86 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            img_idx_V_fu_78 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            img_idx_V_fu_78 <= img_idx_V_4_fu_357_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            rhs_V_fu_82 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            rhs_V_fu_82 <= img_off_V_2_fu_365_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_V_4_reg_431 <= ap_sig_allocacmp_i_V_4;
        zext_ln751_cast_reg_421[2 : 0] <= zext_ln751_cast_fu_169_p1[2 : 0];
        zext_ln754_cast_reg_426[4 : 0] <= zext_ln754_cast_fu_173_p1[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_195_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_V_4 = 16'd0;
    end else begin
        ap_sig_allocacmp_i_V_4 = i_V_fu_86;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_97)) begin
        if ((~(layer_type_V_read_reg_411 == 2'd0) & ~(layer_type_V_read_reg_411 == 2'd1))) begin
            dmem_V_address0 = zext_ln763_fu_329_p1;
        end else if ((layer_type_V_read_reg_411 == 2'd1)) begin
            dmem_V_address0 = zext_ln758_1_fu_297_p1;
        end else if ((layer_type_V_read_reg_411 == 2'd0)) begin
            dmem_V_address0 = zext_ln761_fu_249_p1;
        end else begin
            dmem_V_address0 = 'bx;
        end
    end else begin
        dmem_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((layer_type_V_read_reg_411 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(layer_type_V_read_reg_411 == 2'd0) & ~(layer_type_V_read_reg_411 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((layer_type_V_read_reg_411 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dmem_V_ce0 = 1'b1;
    end else begin
        dmem_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((layer_type_V_read_reg_411 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~(layer_type_V_read_reg_411 == 2'd0) & ~(layer_type_V_read_reg_411 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((layer_type_V_read_reg_411 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dmem_V_we0 = 1'b1;
    end else begin
        dmem_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dmem_i_ce0 = 1'b1;
    end else begin
        dmem_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln758_fu_291_p2 = (tmp_2_fu_257_p4 + ret_V_8_fu_285_p2);

assign add_ln761_fu_233_p2 = (zext_ln758 + ret_V_5_fu_224_p4);

assign add_ln763_fu_323_p2 = (tmp_1_fu_305_p4 + ret_V_1_fu_314_p4);

assign add_ln840_fu_201_p2 = (ap_sig_allocacmp_i_V_4 + 16'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_97 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dmem_V_d0 = dmem_i_q0;

assign dmem_i_address0 = i_V_cast_fu_207_p1;

assign i_V_cast_fu_207_p1 = ap_sig_allocacmp_i_V_4;

assign icmp_ln1019_fu_346_p2 = ((img_off_V_fu_340_p2 == zext_ln754_cast_reg_426) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_195_p2 = ((ap_sig_allocacmp_i_V_4 == input_words) ? 1'b1 : 1'b0);

assign img_idx_V_3_fu_351_p2 = (img_idx_V_fu_78 + 16'd1);

assign img_idx_V_4_fu_357_p3 = ((icmp_ln1019_fu_346_p2[0:0] == 1'b1) ? img_idx_V_3_fu_351_p2 : img_idx_V_fu_78);

assign img_off_V_2_fu_365_p3 = ((icmp_ln1019_fu_346_p2[0:0] == 1'b1) ? 10'd0 : img_off_V_fu_340_p2);

assign img_off_V_fu_340_p2 = (rhs_V_fu_82 + 10'd1);

assign layer_type_V_read_reg_411 = layer_type_V;

assign r_V_fu_276_p2 = trunc_ln2_fu_266_p4 << zext_ln751_cast_reg_421;

assign ret_V_10_fu_220_p1 = img_idx_V_fu_78[0:0];

assign ret_V_1_fu_314_p4 = {{i_V_4_reg_431[12:1]}};

assign ret_V_5_fu_224_p4 = {{i_V_4_reg_431[11:10]}};

assign ret_V_8_fu_285_p2 = (r_V_fu_276_p2 + zext_ln1495_fu_281_p1);

assign ret_V_9_fu_238_p1 = i_V_4_reg_431[9:0];

assign ret_V_fu_302_p1 = i_V_4_reg_431[0:0];

assign tmp_1_fu_305_p4 = {{{dmem_mode}, {ret_V_fu_302_p1}}, {10'd0}};

assign tmp_2_fu_257_p4 = {{{dmem_mode}, {ret_V_10_fu_220_p1}}, {10'd0}};

assign tmp_4_fu_241_p3 = {{add_ln761_fu_233_p2}, {ret_V_9_fu_238_p1}};

assign trunc_ln2_fu_266_p4 = {{img_idx_V_fu_78[12:1]}};

assign zext_ln1495_fu_281_p1 = rhs_V_fu_82;

assign zext_ln751_cast_fu_169_p1 = zext_ln751;

assign zext_ln754_cast_fu_173_p1 = zext_ln754;

assign zext_ln758_1_fu_297_p1 = add_ln758_fu_291_p2;

assign zext_ln761_fu_249_p1 = tmp_4_fu_241_p3;

assign zext_ln763_fu_329_p1 = add_ln763_fu_323_p2;

always @ (posedge ap_clk) begin
    zext_ln751_cast_reg_421[11:3] <= 9'b000000000;
    zext_ln754_cast_reg_426[9:5] <= 5'b00000;
end

endmodule //top_top_Pipeline_LOOP_DMEM_I

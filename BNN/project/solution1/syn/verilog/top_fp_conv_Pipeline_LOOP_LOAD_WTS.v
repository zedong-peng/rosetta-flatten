// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_fp_conv_Pipeline_LOOP_LOAD_WTS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wtbuf_V_2_0145,
        wtbuf_V_1_0144,
        wtbuf_V_0_0143,
        wt_word_V,
        wtbuf_V_2_1_out,
        wtbuf_V_2_1_out_ap_vld,
        wtbuf_V_1_1_out,
        wtbuf_V_1_1_out_ap_vld,
        wtbuf_V_0_1_out,
        wtbuf_V_0_1_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] wtbuf_V_2_0145;
input  [8:0] wtbuf_V_1_0144;
input  [8:0] wtbuf_V_0_0143;
input  [63:0] wt_word_V;
output  [8:0] wtbuf_V_2_1_out;
output   wtbuf_V_2_1_out_ap_vld;
output  [8:0] wtbuf_V_1_1_out;
output   wtbuf_V_1_1_out_ap_vld;
output  [8:0] wtbuf_V_0_1_out;
output   wtbuf_V_0_1_out_ap_vld;

reg ap_idle;
reg wtbuf_V_2_1_out_ap_vld;
reg wtbuf_V_1_1_out_ap_vld;
reg wtbuf_V_0_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1027_fu_144_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [1:0] m_V_fu_60;
wire   [1:0] add_ln840_fu_150_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_m_V_1;
wire   [1:0] m_V_1_load_fu_141_p1;
reg   [8:0] wtbuf_V_1_fu_64;
wire   [8:0] wtbuf_V_1_4_fu_270_p1;
reg   [8:0] wtbuf_V_1_1_fu_68;
reg   [8:0] wtbuf_V_1_2_fu_72;
wire   [4:0] Lo_fu_156_p4;
wire   [4:0] Hi_fu_166_p2;
wire   [5:0] zext_ln628_fu_178_p1;
wire   [5:0] zext_ln628_1_fu_182_p1;
wire   [0:0] icmp_ln628_fu_172_p2;
wire   [5:0] sub_ln628_fu_196_p2;
wire   [5:0] sub_ln628_1_fu_208_p2;
reg   [63:0] tmp_fu_186_p4;
wire   [5:0] xor_ln628_fu_202_p2;
wire   [5:0] select_ln628_fu_214_p3;
wire   [5:0] select_ln628_2_fu_230_p3;
wire   [5:0] xor_ln628_1_fu_238_p2;
wire   [63:0] select_ln628_1_fu_222_p3;
wire   [63:0] zext_ln628_2_fu_244_p1;
wire   [63:0] zext_ln628_3_fu_248_p1;
wire   [63:0] lshr_ln628_fu_252_p2;
wire   [63:0] lshr_ln628_1_fu_258_p2;
wire   [63:0] p_Result_s_fu_264_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_76;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln1027_fu_144_p2 == 1'd0)) begin
            m_V_fu_60 <= add_ln840_fu_150_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            m_V_fu_60 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if (((m_V_1_load_fu_141_p1 == 2'd1) & (icmp_ln1027_fu_144_p2 == 1'd0))) begin
            wtbuf_V_1_1_fu_68 <= wtbuf_V_1_4_fu_270_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            wtbuf_V_1_1_fu_68 <= wtbuf_V_1_0144;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((1'b1 == ap_condition_76)) begin
            wtbuf_V_1_2_fu_72 <= wtbuf_V_1_4_fu_270_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            wtbuf_V_1_2_fu_72 <= wtbuf_V_2_0145;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if (((m_V_1_load_fu_141_p1 == 2'd0) & (icmp_ln1027_fu_144_p2 == 1'd0))) begin
            wtbuf_V_1_fu_64 <= wtbuf_V_1_4_fu_270_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            wtbuf_V_1_fu_64 <= wtbuf_V_0_0143;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_m_V_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_m_V_1 = m_V_fu_60;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        wtbuf_V_0_1_out_ap_vld = 1'b1;
    end else begin
        wtbuf_V_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        wtbuf_V_1_1_out_ap_vld = 1'b1;
    end else begin
        wtbuf_V_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        wtbuf_V_2_1_out_ap_vld = 1'b1;
    end else begin
        wtbuf_V_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_fu_166_p2 = (Lo_fu_156_p4 + 5'd8);

assign Lo_fu_156_p4 = {{{ap_sig_allocacmp_m_V_1}, {1'd0}}, {ap_sig_allocacmp_m_V_1}};

assign add_ln840_fu_150_p2 = (ap_sig_allocacmp_m_V_1 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_condition_76 = (~(m_V_1_load_fu_141_p1 == 2'd1) & ~(m_V_1_load_fu_141_p1 == 2'd0) & (icmp_ln1027_fu_144_p2 == 1'd0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln1027_fu_144_p2 = ((ap_sig_allocacmp_m_V_1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln628_fu_172_p2 = ((Lo_fu_156_p4 > 5'd23) ? 1'b1 : 1'b0);

assign lshr_ln628_1_fu_258_p2 = 64'd18446744073709551615 >> zext_ln628_3_fu_248_p1;

assign lshr_ln628_fu_252_p2 = select_ln628_1_fu_222_p3 >> zext_ln628_2_fu_244_p1;

assign m_V_1_load_fu_141_p1 = ap_sig_allocacmp_m_V_1;

assign p_Result_s_fu_264_p2 = (lshr_ln628_fu_252_p2 & lshr_ln628_1_fu_258_p2);

assign select_ln628_1_fu_222_p3 = ((icmp_ln628_fu_172_p2[0:0] == 1'b1) ? tmp_fu_186_p4 : wt_word_V);

assign select_ln628_2_fu_230_p3 = ((icmp_ln628_fu_172_p2[0:0] == 1'b1) ? xor_ln628_fu_202_p2 : zext_ln628_fu_178_p1);

assign select_ln628_fu_214_p3 = ((icmp_ln628_fu_172_p2[0:0] == 1'b1) ? sub_ln628_fu_196_p2 : sub_ln628_1_fu_208_p2);

assign sub_ln628_1_fu_208_p2 = (zext_ln628_1_fu_182_p1 - zext_ln628_fu_178_p1);

assign sub_ln628_fu_196_p2 = (zext_ln628_fu_178_p1 - zext_ln628_1_fu_182_p1);

integer ap_tvar_int_0;

always @ (wt_word_V) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_fu_186_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_186_p4[ap_tvar_int_0] = wt_word_V[63 - ap_tvar_int_0];
        end
    end
end

assign wtbuf_V_0_1_out = wtbuf_V_1_fu_64;

assign wtbuf_V_1_1_out = wtbuf_V_1_1_fu_68;

assign wtbuf_V_1_4_fu_270_p1 = p_Result_s_fu_264_p2[8:0];

assign wtbuf_V_2_1_out = wtbuf_V_1_2_fu_72;

assign xor_ln628_1_fu_238_p2 = (select_ln628_fu_214_p3 ^ 6'd63);

assign xor_ln628_fu_202_p2 = (zext_ln628_fu_178_p1 ^ 6'd63);

assign zext_ln628_1_fu_182_p1 = Hi_fu_166_p2;

assign zext_ln628_2_fu_244_p1 = select_ln628_2_fu_230_p3;

assign zext_ln628_3_fu_248_p1 = xor_ln628_1_fu_238_p2;

assign zext_ln628_fu_178_p1 = Lo_fu_156_p4;

endmodule //top_fp_conv_Pipeline_LOOP_LOAD_WTS

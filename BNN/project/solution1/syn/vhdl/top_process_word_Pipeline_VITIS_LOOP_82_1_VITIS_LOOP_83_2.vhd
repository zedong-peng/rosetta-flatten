-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_process_word_Pipeline_VITIS_LOOP_82_1_VITIS_LOOP_83_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln125 : IN STD_LOGIC_VECTOR (3 downto 0);
    line_buffer_m_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_m_0_ce0 : OUT STD_LOGIC;
    line_buffer_m_0_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    line_buffer_m_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_m_0_ce1 : OUT STD_LOGIC;
    line_buffer_m_0_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
    line_buffer_m_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_m_1_ce0 : OUT STD_LOGIC;
    line_buffer_m_1_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    line_buffer_m_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_m_1_ce1 : OUT STD_LOGIC;
    line_buffer_m_1_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
    line_buffer_m_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_m_2_ce0 : OUT STD_LOGIC;
    line_buffer_m_2_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    line_buffer_m_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    line_buffer_m_2_ce1 : OUT STD_LOGIC;
    line_buffer_m_2_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
    select_ln186 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln186_1 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln186_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln186_3 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln186_4 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln186_5 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln186_6 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln186_7 : IN STD_LOGIC_VECTOR (0 downto 0);
    select_ln186_8 : IN STD_LOGIC_VECTOR (0 downto 0);
    word_buffer_m_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_out_buffer_m_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_out_buffer_m_ce0 : OUT STD_LOGIC;
    conv_out_buffer_m_we0 : OUT STD_LOGIC;
    conv_out_buffer_m_d0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of top_process_word_Pipeline_VITIS_LOOP_82_1_VITIS_LOOP_83_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1027_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln65_4_fu_442_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_4_reg_990 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_452_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_reg_995 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_9_fu_576_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_reg_1015 : STD_LOGIC_VECTOR (1 downto 0);
    signal line_buffer_m_1_load_1_reg_1020 : STD_LOGIC_VECTOR (1 downto 0);
    signal line_buffer_m_2_load_reg_1027 : STD_LOGIC_VECTOR (1 downto 0);
    signal line_buffer_m_2_load_1_reg_1034 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln840_10_fu_586_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln840_10_reg_1041 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln65_3_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln65_5_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln65_7_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln84_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_fu_86 : STD_LOGIC_VECTOR (3 downto 0);
    signal cc_V_fu_409_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_rhs_load : STD_LOGIC_VECTOR (3 downto 0);
    signal bank_V_fu_90 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln1027_1_fu_336_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_bank_V_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_94 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1027_fu_304_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln83_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln840_fu_316_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln125_cast_fu_276_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln65_fu_344_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln65_fu_348_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_362_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl6_fu_354_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln65_1_fu_370_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1027_fu_380_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln1027_fu_328_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln65_1_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln65_2_fu_392_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_2_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln65_4_fu_415_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln65_3_fu_419_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1495_1_fu_432_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln65_6_fu_438_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_3_mid2_fu_384_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1495_fu_448_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln779_fu_473_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_482_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_496_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln779_1_fu_510_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_519_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_1_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_533_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln779_3_fu_553_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_3_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_562_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_3_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1495_1_fu_543_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1495_fu_506_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln779_2_fu_592_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_2_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_601_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_2_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_615_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln779_4_fu_632_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_4_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_4_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_653_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln779_5_fu_666_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_5_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_675_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_5_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_689_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln779_6_fu_703_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_6_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_6_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_724_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln779_7_fu_737_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_7_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_745_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_7_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_758_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln779_8_fu_771_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1497_8_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_780_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln829_8_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_794_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln65_fu_625_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_1_fu_629_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln840_11_fu_811_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln840_2_fu_817_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln840_1_fu_808_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln840_12_fu_821_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln65_2_fu_662_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_3_fu_699_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln840_13_fu_831_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln65_5_fu_767_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln840_fu_804_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln840_14_fu_841_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln840_5_fu_847_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln65_4_fu_733_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln840_15_fu_851_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln840_6_fu_857_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln840_4_fu_837_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln840_16_fu_861_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln840_3_fu_827_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_874_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    bank_V_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1027_fu_298_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    bank_V_fu_90 <= select_ln1027_1_fu_336_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    bank_V_fu_90 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1027_fu_298_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_94 <= add_ln1027_fu_304_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_94 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    rhs_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1027_fu_298_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    rhs_fu_86 <= cc_V_fu_409_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    rhs_fu_86 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_fu_298_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln65_4_reg_990 <= add_ln65_4_fu_442_p2;
                ret_V_reg_995 <= ret_V_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1027_reg_956 = ap_const_lv1_0))) then
                add_ln840_10_reg_1041 <= add_ln840_10_fu_586_p2;
                tmp_9_reg_1015 <= tmp_9_fu_576_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1027_reg_956 <= icmp_ln1027_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln1027_reg_956 = ap_const_lv1_0))) then
                line_buffer_m_1_load_1_reg_1020 <= line_buffer_m_1_q0;
                line_buffer_m_2_load_1_reg_1034 <= line_buffer_m_2_q0;
                line_buffer_m_2_load_reg_1027 <= line_buffer_m_2_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage1_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln1027_fu_304_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln1495_1_fu_432_p2 <= std_logic_vector(unsigned(select_ln1027_fu_328_p3) + unsigned(ap_const_lv4_2));
    add_ln65_1_fu_374_p2 <= std_logic_vector(unsigned(p_shl6_fu_354_p3) + unsigned(zext_ln65_1_fu_370_p1));
    add_ln65_2_fu_396_p2 <= std_logic_vector(unsigned(add_ln65_1_fu_374_p2) + unsigned(zext_ln65_2_fu_392_p1));
    add_ln65_3_fu_419_p2 <= std_logic_vector(unsigned(add_ln65_1_fu_374_p2) + unsigned(zext_ln65_4_fu_415_p1));
    add_ln65_4_fu_442_p2 <= std_logic_vector(unsigned(add_ln65_1_fu_374_p2) + unsigned(zext_ln65_6_fu_438_p1));
    add_ln65_fu_348_p2 <= std_logic_vector(unsigned(zext_ln125_cast_fu_276_p1) + unsigned(zext_ln65_fu_344_p1));
    add_ln840_10_fu_586_p2 <= std_logic_vector(signed(sext_ln1495_1_fu_543_p1) + signed(sext_ln1495_fu_506_p1));
    add_ln840_11_fu_811_p2 <= std_logic_vector(signed(sext_ln65_fu_625_p1) + signed(sext_ln65_1_fu_629_p1));
    add_ln840_12_fu_821_p2 <= std_logic_vector(signed(sext_ln840_2_fu_817_p1) + signed(sext_ln840_1_fu_808_p1));
    add_ln840_13_fu_831_p2 <= std_logic_vector(signed(sext_ln65_2_fu_662_p1) + signed(sext_ln65_3_fu_699_p1));
    add_ln840_14_fu_841_p2 <= std_logic_vector(signed(sext_ln65_5_fu_767_p1) + signed(sext_ln840_fu_804_p1));
    add_ln840_15_fu_851_p2 <= std_logic_vector(signed(sext_ln840_5_fu_847_p1) + signed(sext_ln65_4_fu_733_p1));
    add_ln840_16_fu_861_p2 <= std_logic_vector(signed(sext_ln840_6_fu_857_p1) + signed(sext_ln840_4_fu_837_p1));
    add_ln840_fu_316_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_bank_V_load) + unsigned(ap_const_lv4_1));
    and_ln1497_1_fu_514_p2 <= (trunc_ln779_1_fu_510_p1 and select_ln186_1);
    and_ln1497_2_fu_596_p2 <= (trunc_ln779_2_fu_592_p1 and select_ln186_2);
    and_ln1497_3_fu_557_p2 <= (trunc_ln779_3_fu_553_p1 and select_ln186_3);
    and_ln1497_4_fu_635_p2 <= (trunc_ln779_4_fu_632_p1 and select_ln186_4);
    and_ln1497_5_fu_670_p2 <= (trunc_ln779_5_fu_666_p1 and select_ln186_5);
    and_ln1497_6_fu_706_p2 <= (trunc_ln779_6_fu_703_p1 and select_ln186_6);
    and_ln1497_7_fu_740_p2 <= (trunc_ln779_7_fu_737_p1 and select_ln186_7);
    and_ln1497_8_fu_775_p2 <= (trunc_ln779_8_fu_771_p1 and select_ln186_8);
    and_ln1497_fu_477_p2 <= (trunc_ln779_fu_473_p1 and select_ln186);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_298_p2)
    begin
        if (((icmp_ln1027_fu_298_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_bank_V_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, bank_V_fu_90)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_bank_V_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_bank_V_load <= bank_V_fu_90;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_rhs_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, rhs_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_rhs_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_rhs_load <= rhs_fu_86;
        end if; 
    end process;

    cc_V_fu_409_p2 <= std_logic_vector(unsigned(select_ln1027_fu_328_p3) + unsigned(ap_const_lv4_1));
    conv_out_buffer_m_address0 <= zext_ln84_fu_880_p1(7 - 1 downto 0);

    conv_out_buffer_m_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_out_buffer_m_ce0 <= ap_const_logic_1;
        else 
            conv_out_buffer_m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_buffer_m_d0 <= std_logic_vector(unsigned(add_ln840_16_fu_861_p2) + unsigned(sext_ln840_3_fu_827_p1));

    conv_out_buffer_m_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_out_buffer_m_we0 <= ap_const_logic_1;
        else 
            conv_out_buffer_m_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1027_fu_298_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln83_fu_322_p2 <= "1" when (ap_sig_allocacmp_rhs_load = ap_const_lv4_8) else "0";
    lhs_3_mid2_fu_384_p3 <= (trunc_ln1027_fu_380_p1 & ap_const_lv3_0);

    line_buffer_m_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln65_5_fu_425_p1, zext_ln65_7_fu_547_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buffer_m_0_address0 <= zext_ln65_7_fu_547_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                line_buffer_m_0_address0 <= zext_ln65_5_fu_425_p1(8 - 1 downto 0);
            else 
                line_buffer_m_0_address0 <= "XXXXXXXX";
            end if;
        else 
            line_buffer_m_0_address0 <= "XXXXXXXX";
        end if; 
    end process;

    line_buffer_m_0_address1 <= zext_ln65_3_fu_402_p1(8 - 1 downto 0);

    line_buffer_m_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_m_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_m_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_m_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_m_0_ce1 <= ap_const_logic_1;
        else 
            line_buffer_m_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_m_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln65_5_fu_425_p1, zext_ln65_7_fu_547_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buffer_m_1_address0 <= zext_ln65_7_fu_547_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                line_buffer_m_1_address0 <= zext_ln65_5_fu_425_p1(8 - 1 downto 0);
            else 
                line_buffer_m_1_address0 <= "XXXXXXXX";
            end if;
        else 
            line_buffer_m_1_address0 <= "XXXXXXXX";
        end if; 
    end process;

    line_buffer_m_1_address1 <= zext_ln65_3_fu_402_p1(8 - 1 downto 0);

    line_buffer_m_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_m_1_ce0 <= ap_const_logic_1;
        else 
            line_buffer_m_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_m_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_m_1_ce1 <= ap_const_logic_1;
        else 
            line_buffer_m_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_m_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln65_5_fu_425_p1, zext_ln65_7_fu_547_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buffer_m_2_address0 <= zext_ln65_7_fu_547_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                line_buffer_m_2_address0 <= zext_ln65_5_fu_425_p1(8 - 1 downto 0);
            else 
                line_buffer_m_2_address0 <= "XXXXXXXX";
            end if;
        else 
            line_buffer_m_2_address0 <= "XXXXXXXX";
        end if; 
    end process;

    line_buffer_m_2_address1 <= zext_ln65_3_fu_402_p1(8 - 1 downto 0);

    line_buffer_m_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_m_2_ce0 <= ap_const_logic_1;
        else 
            line_buffer_m_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_m_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            line_buffer_m_2_ce1 <= ap_const_logic_1;
        else 
            line_buffer_m_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl6_fu_354_p3 <= (add_ln65_fu_348_p2 & ap_const_lv3_0);
    ret_V_fu_452_p2 <= std_logic_vector(unsigned(lhs_3_mid2_fu_384_p3) + unsigned(zext_ln1495_fu_448_p1));
    select_ln1027_1_fu_336_p3 <= 
        add_ln840_fu_316_p2 when (icmp_ln83_fu_322_p2(0) = '1') else 
        ap_sig_allocacmp_bank_V_load;
    select_ln1027_fu_328_p3 <= 
        ap_const_lv4_0 when (icmp_ln83_fu_322_p2(0) = '1') else 
        ap_sig_allocacmp_rhs_load;
        sext_ln1495_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_533_p4),3));

        sext_ln1495_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_496_p4),3));

        sext_ln65_1_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_1015),3));

        sext_ln65_2_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_653_p4),3));

        sext_ln65_3_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_fu_689_p4),3));

        sext_ln65_4_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_724_p4),4));

        sext_ln65_5_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_fu_758_p4),3));

        sext_ln65_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_615_p4),3));

        sext_ln840_1_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_10_reg_1041),4));

        sext_ln840_2_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_11_fu_811_p2),4));

        sext_ln840_3_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_12_fu_821_p2),5));

        sext_ln840_4_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_13_fu_831_p2),5));

        sext_ln840_5_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_14_fu_841_p2),4));

        sext_ln840_6_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_15_fu_851_p2),5));

        sext_ln840_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_794_p4),3));

    tmp_10_fu_640_p3 <= line_buffer_m_1_load_1_reg_1020(1 downto 1);
    
    tmp_11_fu_653_p4_proc : process(line_buffer_m_1_load_1_reg_1020, xor_ln829_4_fu_647_p2)
    begin
        tmp_11_fu_653_p4 <= line_buffer_m_1_load_1_reg_1020;
        tmp_11_fu_653_p4(1) <= xor_ln829_4_fu_647_p2(0);
    end process;

    tmp_12_fu_675_p3 <= line_buffer_m_1_q0(1 downto 1);
    
    tmp_13_fu_689_p4_proc : process(line_buffer_m_1_q0, xor_ln829_5_fu_683_p2)
    begin
        tmp_13_fu_689_p4 <= line_buffer_m_1_q0;
        tmp_13_fu_689_p4(1) <= xor_ln829_5_fu_683_p2(0);
    end process;

    tmp_14_fu_711_p3 <= line_buffer_m_2_load_reg_1027(1 downto 1);
    
    tmp_15_fu_724_p4_proc : process(line_buffer_m_2_load_reg_1027, xor_ln829_6_fu_718_p2)
    begin
        tmp_15_fu_724_p4 <= line_buffer_m_2_load_reg_1027;
        tmp_15_fu_724_p4(1) <= xor_ln829_6_fu_718_p2(0);
    end process;

    tmp_17_fu_745_p3 <= line_buffer_m_2_load_1_reg_1034(1 downto 1);
    
    tmp_18_fu_758_p4_proc : process(line_buffer_m_2_load_1_reg_1034, xor_ln829_7_fu_752_p2)
    begin
        tmp_18_fu_758_p4 <= line_buffer_m_2_load_1_reg_1034;
        tmp_18_fu_758_p4(1) <= xor_ln829_7_fu_752_p2(0);
    end process;

    tmp_19_fu_780_p3 <= line_buffer_m_2_q0(1 downto 1);
    
    tmp_20_fu_794_p4_proc : process(line_buffer_m_2_q0, xor_ln829_8_fu_788_p2)
    begin
        tmp_20_fu_794_p4 <= line_buffer_m_2_q0;
        tmp_20_fu_794_p4(1) <= xor_ln829_8_fu_788_p2(0);
    end process;

    tmp_2_fu_482_p3 <= line_buffer_m_0_q1(1 downto 1);
    
    tmp_3_fu_496_p4_proc : process(line_buffer_m_0_q1, xor_ln829_fu_490_p2)
    begin
        tmp_3_fu_496_p4 <= line_buffer_m_0_q1;
        tmp_3_fu_496_p4(1) <= xor_ln829_fu_490_p2(0);
    end process;

    tmp_4_fu_519_p3 <= line_buffer_m_0_q0(1 downto 1);
    
    tmp_5_fu_533_p4_proc : process(line_buffer_m_0_q0, xor_ln829_1_fu_527_p2)
    begin
        tmp_5_fu_533_p4 <= line_buffer_m_0_q0;
        tmp_5_fu_533_p4(1) <= xor_ln829_1_fu_527_p2(0);
    end process;

    tmp_6_fu_601_p3 <= line_buffer_m_0_q0(1 downto 1);
    
    tmp_7_fu_615_p4_proc : process(line_buffer_m_0_q0, xor_ln829_2_fu_609_p2)
    begin
        tmp_7_fu_615_p4 <= line_buffer_m_0_q0;
        tmp_7_fu_615_p4(1) <= xor_ln829_2_fu_609_p2(0);
    end process;

    tmp_8_fu_562_p3 <= line_buffer_m_1_q1(1 downto 1);
    
    tmp_9_fu_576_p4_proc : process(line_buffer_m_1_q1, xor_ln829_3_fu_570_p2)
    begin
        tmp_9_fu_576_p4 <= line_buffer_m_1_q1;
        tmp_9_fu_576_p4(1) <= xor_ln829_3_fu_570_p2(0);
    end process;

    tmp_fu_362_p3 <= (add_ln65_fu_348_p2 & ap_const_lv1_0);
    tmp_s_fu_874_p3 <= (word_buffer_m_offset & ret_V_reg_995);
    trunc_ln1027_fu_380_p1 <= select_ln1027_1_fu_336_p3(3 - 1 downto 0);
    trunc_ln779_1_fu_510_p1 <= line_buffer_m_0_q0(1 - 1 downto 0);
    trunc_ln779_2_fu_592_p1 <= line_buffer_m_0_q0(1 - 1 downto 0);
    trunc_ln779_3_fu_553_p1 <= line_buffer_m_1_q1(1 - 1 downto 0);
    trunc_ln779_4_fu_632_p1 <= line_buffer_m_1_load_1_reg_1020(1 - 1 downto 0);
    trunc_ln779_5_fu_666_p1 <= line_buffer_m_1_q0(1 - 1 downto 0);
    trunc_ln779_6_fu_703_p1 <= line_buffer_m_2_load_reg_1027(1 - 1 downto 0);
    trunc_ln779_7_fu_737_p1 <= line_buffer_m_2_load_1_reg_1034(1 - 1 downto 0);
    trunc_ln779_8_fu_771_p1 <= line_buffer_m_2_q0(1 - 1 downto 0);
    trunc_ln779_fu_473_p1 <= line_buffer_m_0_q1(1 - 1 downto 0);
    xor_ln829_1_fu_527_p2 <= (tmp_4_fu_519_p3 xor and_ln1497_1_fu_514_p2);
    xor_ln829_2_fu_609_p2 <= (tmp_6_fu_601_p3 xor and_ln1497_2_fu_596_p2);
    xor_ln829_3_fu_570_p2 <= (tmp_8_fu_562_p3 xor and_ln1497_3_fu_557_p2);
    xor_ln829_4_fu_647_p2 <= (tmp_10_fu_640_p3 xor and_ln1497_4_fu_635_p2);
    xor_ln829_5_fu_683_p2 <= (tmp_12_fu_675_p3 xor and_ln1497_5_fu_670_p2);
    xor_ln829_6_fu_718_p2 <= (tmp_14_fu_711_p3 xor and_ln1497_6_fu_706_p2);
    xor_ln829_7_fu_752_p2 <= (tmp_17_fu_745_p3 xor and_ln1497_7_fu_740_p2);
    xor_ln829_8_fu_788_p2 <= (tmp_19_fu_780_p3 xor and_ln1497_8_fu_775_p2);
    xor_ln829_fu_490_p2 <= (tmp_2_fu_482_p3 xor and_ln1497_fu_477_p2);
    zext_ln125_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln125),5));
    zext_ln1495_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_fu_328_p3),6));
    zext_ln65_1_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_362_p3),8));
    zext_ln65_2_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_fu_328_p3),8));
    zext_ln65_3_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_2_fu_396_p2),64));
    zext_ln65_4_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_V_fu_409_p2),8));
    zext_ln65_5_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_3_fu_419_p2),64));
    zext_ln65_6_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1495_1_fu_432_p2),8));
    zext_ln65_7_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln65_4_reg_990),64));
    zext_ln65_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1027_1_fu_336_p3),5));
    zext_ln84_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_874_p3),64));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_fp_conv_Pipeline_LOOP_LOAD_WTS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wtbuf_V_2_0145 : IN STD_LOGIC_VECTOR (8 downto 0);
    wtbuf_V_1_0144 : IN STD_LOGIC_VECTOR (8 downto 0);
    wtbuf_V_0_0143 : IN STD_LOGIC_VECTOR (8 downto 0);
    wt_word_V : IN STD_LOGIC_VECTOR (63 downto 0);
    wtbuf_V_2_1_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    wtbuf_V_2_1_out_ap_vld : OUT STD_LOGIC;
    wtbuf_V_1_1_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    wtbuf_V_1_1_out_ap_vld : OUT STD_LOGIC;
    wtbuf_V_0_1_out : OUT STD_LOGIC_VECTOR (8 downto 0);
    wtbuf_V_0_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top_fp_conv_Pipeline_LOOP_LOAD_WTS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1027_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal m_V_fu_60 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln840_fu_150_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_m_V_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal m_V_1_load_fu_141_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal wtbuf_V_1_fu_64 : STD_LOGIC_VECTOR (8 downto 0);
    signal wtbuf_V_1_4_fu_270_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal wtbuf_V_1_1_fu_68 : STD_LOGIC_VECTOR (8 downto 0);
    signal wtbuf_V_1_2_fu_72 : STD_LOGIC_VECTOR (8 downto 0);
    signal Lo_fu_156_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal Hi_fu_166_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln628_fu_178_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln628_1_fu_182_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln628_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln628_fu_196_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln628_1_fu_208_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_186_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln628_fu_202_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_fu_214_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_2_fu_230_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln628_1_fu_238_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln628_1_fu_222_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln628_2_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln628_3_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_fu_252_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln628_1_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_264_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_76 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    m_V_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln1027_fu_144_p2 = ap_const_lv1_0)) then 
                    m_V_fu_60 <= add_ln840_fu_150_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    m_V_fu_60 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    wtbuf_V_1_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if (((m_V_1_load_fu_141_p1 = ap_const_lv2_1) and (icmp_ln1027_fu_144_p2 = ap_const_lv1_0))) then 
                    wtbuf_V_1_1_fu_68 <= wtbuf_V_1_4_fu_270_p1;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    wtbuf_V_1_1_fu_68 <= wtbuf_V_1_0144;
                end if;
            end if; 
        end if;
    end process;

    wtbuf_V_1_2_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_76)) then 
                    wtbuf_V_1_2_fu_72 <= wtbuf_V_1_4_fu_270_p1;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    wtbuf_V_1_2_fu_72 <= wtbuf_V_2_0145;
                end if;
            end if; 
        end if;
    end process;

    wtbuf_V_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if (((m_V_1_load_fu_141_p1 = ap_const_lv2_0) and (icmp_ln1027_fu_144_p2 = ap_const_lv1_0))) then 
                    wtbuf_V_1_fu_64 <= wtbuf_V_1_4_fu_270_p1;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    wtbuf_V_1_fu_64 <= wtbuf_V_0_0143;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Hi_fu_166_p2 <= std_logic_vector(unsigned(Lo_fu_156_p4) + unsigned(ap_const_lv5_8));
    Lo_fu_156_p4 <= ((ap_sig_allocacmp_m_V_1 & ap_const_lv1_0) & ap_sig_allocacmp_m_V_1);
    add_ln840_fu_150_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_m_V_1) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_76_assign_proc : process(icmp_ln1027_fu_144_p2, m_V_1_load_fu_141_p1)
    begin
                ap_condition_76 <= (not((m_V_1_load_fu_141_p1 = ap_const_lv2_1)) and not((m_V_1_load_fu_141_p1 = ap_const_lv2_0)) and (icmp_ln1027_fu_144_p2 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln1027_fu_144_p2, ap_start_int)
    begin
        if (((icmp_ln1027_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_m_V_1_assign_proc : process(ap_CS_fsm_state1, m_V_fu_60, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_m_V_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_m_V_1 <= m_V_fu_60;
        end if; 
    end process;

    icmp_ln1027_fu_144_p2 <= "1" when (ap_sig_allocacmp_m_V_1 = ap_const_lv2_3) else "0";
    icmp_ln628_fu_172_p2 <= "1" when (unsigned(Lo_fu_156_p4) > unsigned(ap_const_lv5_17)) else "0";
    lshr_ln628_1_fu_258_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln628_3_fu_248_p1(31-1 downto 0)))));
    lshr_ln628_fu_252_p2 <= std_logic_vector(shift_right(unsigned(select_ln628_1_fu_222_p3),to_integer(unsigned('0' & zext_ln628_2_fu_244_p1(31-1 downto 0)))));
    m_V_1_load_fu_141_p1 <= ap_sig_allocacmp_m_V_1;
    p_Result_s_fu_264_p2 <= (lshr_ln628_fu_252_p2 and lshr_ln628_1_fu_258_p2);
    select_ln628_1_fu_222_p3 <= 
        tmp_fu_186_p4 when (icmp_ln628_fu_172_p2(0) = '1') else 
        wt_word_V;
    select_ln628_2_fu_230_p3 <= 
        xor_ln628_fu_202_p2 when (icmp_ln628_fu_172_p2(0) = '1') else 
        zext_ln628_fu_178_p1;
    select_ln628_fu_214_p3 <= 
        sub_ln628_fu_196_p2 when (icmp_ln628_fu_172_p2(0) = '1') else 
        sub_ln628_1_fu_208_p2;
    sub_ln628_1_fu_208_p2 <= std_logic_vector(unsigned(zext_ln628_1_fu_182_p1) - unsigned(zext_ln628_fu_178_p1));
    sub_ln628_fu_196_p2 <= std_logic_vector(unsigned(zext_ln628_fu_178_p1) - unsigned(zext_ln628_1_fu_182_p1));
    
    tmp_fu_186_p4_proc : process(wt_word_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_fu_186_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := wt_word_V;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_fu_186_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_fu_186_p4_i) := wt_word_V(64-1-tmp_fu_186_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_186_p4 <= resvalue(64-1 downto 0);
    end process;

    wtbuf_V_0_1_out <= wtbuf_V_1_fu_64;

    wtbuf_V_0_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1027_fu_144_p2, ap_start_int)
    begin
        if (((icmp_ln1027_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            wtbuf_V_0_1_out_ap_vld <= ap_const_logic_1;
        else 
            wtbuf_V_0_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    wtbuf_V_1_1_out <= wtbuf_V_1_1_fu_68;

    wtbuf_V_1_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1027_fu_144_p2, ap_start_int)
    begin
        if (((icmp_ln1027_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            wtbuf_V_1_1_out_ap_vld <= ap_const_logic_1;
        else 
            wtbuf_V_1_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    wtbuf_V_1_4_fu_270_p1 <= p_Result_s_fu_264_p2(9 - 1 downto 0);
    wtbuf_V_2_1_out <= wtbuf_V_1_2_fu_72;

    wtbuf_V_2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1027_fu_144_p2, ap_start_int)
    begin
        if (((icmp_ln1027_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            wtbuf_V_2_1_out_ap_vld <= ap_const_logic_1;
        else 
            wtbuf_V_2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln628_1_fu_238_p2 <= (select_ln628_fu_214_p3 xor ap_const_lv6_3F);
    xor_ln628_fu_202_p2 <= (zext_ln628_fu_178_p1 xor ap_const_lv6_3F);
    zext_ln628_1_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_fu_166_p2),6));
    zext_ln628_2_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln628_2_fu_230_p3),64));
    zext_ln628_3_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln628_1_fu_238_p2),64));
    zext_ln628_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_fu_156_p4),6));
end behav;

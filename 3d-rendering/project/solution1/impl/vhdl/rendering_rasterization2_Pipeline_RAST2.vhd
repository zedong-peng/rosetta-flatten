-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rendering_rasterization2_Pipeline_RAST2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_2d_same_x0_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    rhs : IN STD_LOGIC_VECTOR (8 downto 0);
    triangle_2d_same_y0_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    rhs_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    triangle_2d_same_x1_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    rhs_V : IN STD_LOGIC_VECTOR (8 downto 0);
    triangle_2d_same_y1_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    rhs_V_1 : IN STD_LOGIC_VECTOR (8 downto 0);
    triangle_2d_same_x2_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    rhs_V_3 : IN STD_LOGIC_VECTOR (8 downto 0);
    triangle_2d_same_y2_cast : IN STD_LOGIC_VECTOR (7 downto 0);
    rhs_V_4 : IN STD_LOGIC_VECTOR (8 downto 0);
    fragment2_x_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment2_x_ce0 : OUT STD_LOGIC;
    fragment2_x_we0 : OUT STD_LOGIC;
    fragment2_x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fragment2_y_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment2_y_ce0 : OUT STD_LOGIC;
    fragment2_y_we0 : OUT STD_LOGIC;
    fragment2_y_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fragment2_z_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment2_z_ce0 : OUT STD_LOGIC;
    fragment2_z_we0 : OUT STD_LOGIC;
    fragment2_z_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    triangle_2d_same_z : IN STD_LOGIC_VECTOR (7 downto 0);
    fragment2_color_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment2_color_ce0 : OUT STD_LOGIC;
    fragment2_color_we0 : OUT STD_LOGIC;
    fragment2_color_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    i_V_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    i_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of rendering_rasterization2_Pipeline_RAST2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rhs_V_4_cast_fu_250_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_4_cast_reg_535 : STD_LOGIC_VECTOR (17 downto 0);
    signal triangle_2d_same_y2_cast_cast_fu_254_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal triangle_2d_same_y2_cast_cast_reg_540 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_3_cast_fu_258_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_3_cast_reg_545 : STD_LOGIC_VECTOR (17 downto 0);
    signal triangle_2d_same_x2_cast_cast_fu_262_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal triangle_2d_same_x2_cast_cast_reg_550 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_1_cast_fu_266_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_1_cast_reg_555 : STD_LOGIC_VECTOR (17 downto 0);
    signal triangle_2d_same_y1_cast_cast_fu_270_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal triangle_2d_same_y1_cast_cast_reg_560 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_cast_fu_274_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_cast_reg_565 : STD_LOGIC_VECTOR (17 downto 0);
    signal triangle_2d_same_x1_cast_cast_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal triangle_2d_same_x1_cast_cast_reg_570 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_1_cast_fu_282_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_1_cast_reg_575 : STD_LOGIC_VECTOR (17 downto 0);
    signal triangle_2d_same_y0_cast_cast_fu_286_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal triangle_2d_same_y0_cast_cast_reg_580 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_cast_fu_290_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_cast_reg_585 : STD_LOGIC_VECTOR (17 downto 0);
    signal triangle_2d_same_x0_cast_cast_fu_294_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal triangle_2d_same_x0_cast_cast_reg_590 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_read3_cast_cast_fu_298_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1027_reg_607 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_607_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_fu_348_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_reg_611 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_reg_611_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_reg_611_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_V_fu_357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_V_reg_617 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_V_reg_617_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y_V_reg_617_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_18_fu_405_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_22_fu_419_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_26_fu_433_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln541_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_V_fu_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln840_fu_321_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_V_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_V_fu_84 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_V_2_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_344_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln186_fu_353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1496_1_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_19_fu_366_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_23_fu_375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_27_fu_384_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1496_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_17_fu_396_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_18_fu_405_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_21_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_22_fu_419_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_25_fu_424_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_26_fu_433_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_489_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_481_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln61_fu_438_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_497_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln61_1_fu_442_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_481_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_489_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_497_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component rendering_urem_16ns_8ns_8_20_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rendering_udiv_16ns_8ns_8_20_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component rendering_mul_9s_9s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component rendering_mac_mulsub_9s_9s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component rendering_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_16ns_8ns_8_20_1_U39 : component rendering_urem_16ns_8ns_8_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_k_V_1,
        din1 => grp_fu_327_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_327_p2);

    udiv_16ns_8ns_8_20_1_U40 : component rendering_udiv_16ns_8ns_8_20_1
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_sig_allocacmp_k_V_1,
        din1 => grp_fu_333_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_333_p2);

    mul_9s_9s_18_1_1_U41 : component rendering_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => ret_V_17_fu_396_p2,
        din1 => ret_V_18_fu_405_p1,
        dout => ret_V_18_fu_405_p2);

    mul_9s_9s_18_1_1_U42 : component rendering_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => ret_V_21_fu_410_p2,
        din1 => ret_V_22_fu_419_p1,
        dout => ret_V_22_fu_419_p2);

    mul_9s_9s_18_1_1_U43 : component rendering_mul_9s_9s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => ret_V_25_fu_424_p2,
        din1 => ret_V_26_fu_433_p1,
        dout => ret_V_26_fu_433_p2);

    mac_mulsub_9s_9s_18s_18_4_1_U44 : component rendering_mac_mulsub_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_19_fu_366_p2,
        din1 => grp_fu_481_p1,
        din2 => ret_V_18_fu_405_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_481_p3);

    mac_mulsub_9s_9s_18s_18_4_1_U45 : component rendering_mac_mulsub_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_23_fu_375_p2,
        din1 => grp_fu_489_p1,
        din2 => ret_V_22_fu_419_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_489_p3);

    mac_mulsub_9s_9s_18s_18_4_1_U46 : component rendering_mac_mulsub_9s_9s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ret_V_27_fu_384_p2,
        din1 => grp_fu_497_p1,
        din2 => ret_V_26_fu_433_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_497_p3);

    flow_control_loop_pipe_sequential_init_U : component rendering_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_V_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_V_fu_84 <= ap_const_lv16_0;
                elsif (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (tmp_fu_447_p3 = ap_const_lv1_0))) then 
                    i_V_fu_84 <= i_V_2_fu_466_p2;
                end if;
            end if; 
        end if;
    end process;

    k_V_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln1027_fu_315_p2 = ap_const_lv1_0))) then 
                    k_V_fu_80 <= add_ln840_fu_321_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_V_fu_80 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln1027_reg_607_pp0_iter10_reg <= icmp_ln1027_reg_607_pp0_iter9_reg;
                icmp_ln1027_reg_607_pp0_iter11_reg <= icmp_ln1027_reg_607_pp0_iter10_reg;
                icmp_ln1027_reg_607_pp0_iter12_reg <= icmp_ln1027_reg_607_pp0_iter11_reg;
                icmp_ln1027_reg_607_pp0_iter13_reg <= icmp_ln1027_reg_607_pp0_iter12_reg;
                icmp_ln1027_reg_607_pp0_iter14_reg <= icmp_ln1027_reg_607_pp0_iter13_reg;
                icmp_ln1027_reg_607_pp0_iter15_reg <= icmp_ln1027_reg_607_pp0_iter14_reg;
                icmp_ln1027_reg_607_pp0_iter16_reg <= icmp_ln1027_reg_607_pp0_iter15_reg;
                icmp_ln1027_reg_607_pp0_iter17_reg <= icmp_ln1027_reg_607_pp0_iter16_reg;
                icmp_ln1027_reg_607_pp0_iter18_reg <= icmp_ln1027_reg_607_pp0_iter17_reg;
                icmp_ln1027_reg_607_pp0_iter19_reg <= icmp_ln1027_reg_607_pp0_iter18_reg;
                icmp_ln1027_reg_607_pp0_iter20_reg <= icmp_ln1027_reg_607_pp0_iter19_reg;
                icmp_ln1027_reg_607_pp0_iter2_reg <= icmp_ln1027_reg_607_pp0_iter1_reg;
                icmp_ln1027_reg_607_pp0_iter3_reg <= icmp_ln1027_reg_607_pp0_iter2_reg;
                icmp_ln1027_reg_607_pp0_iter4_reg <= icmp_ln1027_reg_607_pp0_iter3_reg;
                icmp_ln1027_reg_607_pp0_iter5_reg <= icmp_ln1027_reg_607_pp0_iter4_reg;
                icmp_ln1027_reg_607_pp0_iter6_reg <= icmp_ln1027_reg_607_pp0_iter5_reg;
                icmp_ln1027_reg_607_pp0_iter7_reg <= icmp_ln1027_reg_607_pp0_iter6_reg;
                icmp_ln1027_reg_607_pp0_iter8_reg <= icmp_ln1027_reg_607_pp0_iter7_reg;
                icmp_ln1027_reg_607_pp0_iter9_reg <= icmp_ln1027_reg_607_pp0_iter8_reg;
                x_V_reg_611 <= x_V_fu_348_p2;
                x_V_reg_611_pp0_iter20_reg <= x_V_reg_611;
                x_V_reg_611_pp0_iter21_reg <= x_V_reg_611_pp0_iter20_reg;
                y_V_reg_617 <= y_V_fu_357_p2;
                y_V_reg_617_pp0_iter20_reg <= y_V_reg_617;
                y_V_reg_617_pp0_iter21_reg <= y_V_reg_617_pp0_iter20_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln1027_reg_607 <= icmp_ln1027_fu_315_p2;
                icmp_ln1027_reg_607_pp0_iter1_reg <= icmp_ln1027_reg_607;
                rhs_1_cast_reg_575 <= rhs_1_cast_fu_282_p1;
                rhs_V_1_cast_reg_555 <= rhs_V_1_cast_fu_266_p1;
                rhs_V_3_cast_reg_545 <= rhs_V_3_cast_fu_258_p1;
                rhs_V_4_cast_reg_535 <= rhs_V_4_cast_fu_250_p1;
                rhs_V_cast_reg_565 <= rhs_V_cast_fu_274_p1;
                rhs_cast_reg_585 <= rhs_cast_fu_290_p1;
                    triangle_2d_same_x0_cast_cast_reg_590(7 downto 0) <= triangle_2d_same_x0_cast_cast_fu_294_p1(7 downto 0);
                    triangle_2d_same_x1_cast_cast_reg_570(7 downto 0) <= triangle_2d_same_x1_cast_cast_fu_278_p1(7 downto 0);
                    triangle_2d_same_x2_cast_cast_reg_550(7 downto 0) <= triangle_2d_same_x2_cast_cast_fu_262_p1(7 downto 0);
                    triangle_2d_same_y0_cast_cast_reg_580(7 downto 0) <= triangle_2d_same_y0_cast_cast_fu_286_p1(7 downto 0);
                    triangle_2d_same_y1_cast_cast_reg_560(7 downto 0) <= triangle_2d_same_y1_cast_cast_fu_270_p1(7 downto 0);
                    triangle_2d_same_y2_cast_cast_reg_540(7 downto 0) <= triangle_2d_same_y2_cast_cast_fu_254_p1(7 downto 0);
            end if;
        end if;
    end process;
    triangle_2d_same_y2_cast_cast_reg_540(8) <= '0';
    triangle_2d_same_x2_cast_cast_reg_550(8) <= '0';
    triangle_2d_same_y1_cast_cast_reg_560(8) <= '0';
    triangle_2d_same_x1_cast_cast_reg_570(8) <= '0';
    triangle_2d_same_y0_cast_cast_reg_580(8) <= '0';
    triangle_2d_same_x0_cast_cast_reg_590(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln840_fu_321_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_V_1) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_315_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_315_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter21_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_V_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, k_V_fu_80, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_k_V_1 <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_k_V_1 <= k_V_fu_80;
        end if; 
    end process;

    fragment2_color_address0 <= zext_ln541_fu_458_p1(9 - 1 downto 0);

    fragment2_color_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fragment2_color_ce0 <= ap_const_logic_1;
        else 
            fragment2_color_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_color_d0 <= ap_const_lv6_24;

    fragment2_color_we0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001, tmp_fu_447_p3)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (tmp_fu_447_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fragment2_color_we0 <= ap_const_logic_1;
        else 
            fragment2_color_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_x_address0 <= zext_ln541_fu_458_p1(9 - 1 downto 0);

    fragment2_x_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fragment2_x_ce0 <= ap_const_logic_1;
        else 
            fragment2_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_x_d0 <= x_V_reg_611_pp0_iter21_reg;

    fragment2_x_we0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001, tmp_fu_447_p3)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (tmp_fu_447_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fragment2_x_we0 <= ap_const_logic_1;
        else 
            fragment2_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_y_address0 <= zext_ln541_fu_458_p1(9 - 1 downto 0);

    fragment2_y_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fragment2_y_ce0 <= ap_const_logic_1;
        else 
            fragment2_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_y_d0 <= y_V_reg_617_pp0_iter21_reg;

    fragment2_y_we0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001, tmp_fu_447_p3)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (tmp_fu_447_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fragment2_y_we0 <= ap_const_logic_1;
        else 
            fragment2_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_z_address0 <= zext_ln541_fu_458_p1(9 - 1 downto 0);

    fragment2_z_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fragment2_z_ce0 <= ap_const_logic_1;
        else 
            fragment2_z_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_z_d0 <= triangle_2d_same_z;

    fragment2_z_we0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001, tmp_fu_447_p3)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (tmp_fu_447_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            fragment2_z_we0 <= ap_const_logic_1;
        else 
            fragment2_z_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_327_p1 <= p_read3_cast_cast_fu_298_p1(8 - 1 downto 0);
    grp_fu_333_p1 <= p_read3_cast_cast_fu_298_p1(8 - 1 downto 0);
    grp_fu_481_p1 <= rhs_1_cast_reg_575(9 - 1 downto 0);
    grp_fu_489_p1 <= rhs_V_1_cast_reg_555(9 - 1 downto 0);
    grp_fu_497_p1 <= rhs_V_4_cast_reg_535(9 - 1 downto 0);
    i_V_2_fu_466_p2 <= std_logic_vector(unsigned(i_V_fu_84) + unsigned(ap_const_lv16_1));
    i_V_out <= i_V_fu_84;

    i_V_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln1027_reg_607_pp0_iter20_reg)
    begin
        if (((icmp_ln1027_reg_607_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            i_V_out_ap_vld <= ap_const_logic_1;
        else 
            i_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1027_fu_315_p2 <= "1" when (ap_sig_allocacmp_k_V_1 = p_read4) else "0";
    or_ln61_1_fu_442_p2 <= (or_ln61_fu_438_p2 or grp_fu_497_p3);
    or_ln61_fu_438_p2 <= (grp_fu_489_p3 or grp_fu_481_p3);
    p_read3_cast_cast_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_read3_cast),16));
    ret_V_17_fu_396_p2 <= std_logic_vector(unsigned(zext_ln1496_fu_393_p1) - unsigned(triangle_2d_same_x0_cast_cast_reg_590));
    ret_V_18_fu_405_p1 <= rhs_cast_reg_585(9 - 1 downto 0);
    ret_V_19_fu_366_p2 <= std_logic_vector(unsigned(zext_ln1496_1_fu_362_p1) - unsigned(triangle_2d_same_y0_cast_cast_reg_580));
    ret_V_21_fu_410_p2 <= std_logic_vector(unsigned(zext_ln1496_fu_393_p1) - unsigned(triangle_2d_same_x1_cast_cast_reg_570));
    ret_V_22_fu_419_p1 <= rhs_V_cast_reg_565(9 - 1 downto 0);
    ret_V_23_fu_375_p2 <= std_logic_vector(unsigned(zext_ln1496_1_fu_362_p1) - unsigned(triangle_2d_same_y1_cast_cast_reg_560));
    ret_V_25_fu_424_p2 <= std_logic_vector(unsigned(zext_ln1496_fu_393_p1) - unsigned(triangle_2d_same_x2_cast_cast_reg_550));
    ret_V_26_fu_433_p1 <= rhs_V_3_cast_reg_545(9 - 1 downto 0);
    ret_V_27_fu_384_p2 <= std_logic_vector(unsigned(zext_ln1496_1_fu_362_p1) - unsigned(triangle_2d_same_y2_cast_cast_reg_540));
    ret_V_fu_344_p1 <= grp_fu_327_p2(8 - 1 downto 0);
        rhs_1_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_1),18));

        rhs_V_1_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1),18));

        rhs_V_3_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_3),18));

        rhs_V_4_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4),18));

        rhs_V_cast_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V),18));

        rhs_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs),18));

    tmp_fu_447_p3 <= or_ln61_1_fu_442_p2(17 downto 17);
    triangle_2d_same_x0_cast_cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_x0_cast),9));
    triangle_2d_same_x1_cast_cast_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_x1_cast),9));
    triangle_2d_same_x2_cast_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_x2_cast),9));
    triangle_2d_same_y0_cast_cast_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_y0_cast),9));
    triangle_2d_same_y1_cast_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_y1_cast),9));
    triangle_2d_same_y2_cast_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_y2_cast),9));
    trunc_ln186_fu_353_p1 <= grp_fu_333_p2(8 - 1 downto 0);
    x_V_fu_348_p2 <= std_logic_vector(unsigned(ret_V_fu_344_p1) + unsigned(p_read1));
    y_V_fu_357_p2 <= std_logic_vector(unsigned(trunc_ln186_fu_353_p1) + unsigned(p_read2));
    zext_ln1496_1_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_357_p2),9));
    zext_ln1496_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_reg_611_pp0_iter20_reg),9));
    zext_ln541_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_84),64));
end behav;

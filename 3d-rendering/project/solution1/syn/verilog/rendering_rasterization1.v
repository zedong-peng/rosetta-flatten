// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rendering_rasterization1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        triangle_2d_x0,
        triangle_2d_y0,
        triangle_2d_x1,
        triangle_2d_y1,
        triangle_2d_x2,
        triangle_2d_y2,
        triangle_2d_z,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        triangle_2d_same_x0_V_read,
        triangle_2d_same_y0_V_read,
        triangle_2d_same_x1_V_read,
        triangle_2d_same_y1_V_read,
        triangle_2d_same_x2_V_read,
        triangle_2d_same_y2_V_read,
        triangle_2d_same_z_V_read,
        p_read11,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] triangle_2d_x0;
input  [7:0] triangle_2d_y0;
input  [7:0] triangle_2d_x1;
input  [7:0] triangle_2d_y1;
input  [7:0] triangle_2d_x2;
input  [7:0] triangle_2d_y2;
input  [7:0] triangle_2d_z;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] triangle_2d_same_x0_V_read;
input  [7:0] triangle_2d_same_y0_V_read;
input  [7:0] triangle_2d_same_x1_V_read;
input  [7:0] triangle_2d_same_y1_V_read;
input  [7:0] triangle_2d_same_x2_V_read;
input  [7:0] triangle_2d_same_y2_V_read;
input  [7:0] triangle_2d_same_z_V_read;
input  [15:0] p_read11;
output  [1:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [15:0] ap_return_13;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;
reg[7:0] ap_return_12;
reg[15:0] ap_return_13;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln152_fu_252_p2;
reg   [0:0] icmp_ln152_reg_670;
wire   [7:0] in1_V_1_fu_266_p3;
reg   [7:0] in1_V_1_reg_688;
wire   [7:0] in1_V_fu_274_p3;
reg   [7:0] in1_V_reg_699;
wire   [7:0] in0_V_1_fu_282_p3;
reg   [7:0] in0_V_1_reg_710;
wire   [7:0] in0_V_fu_290_p3;
reg   [7:0] in0_V_reg_721;
wire    ap_CS_fsm_state2;
wire   [8:0] zext_ln186_fu_170_p1;
wire   [8:0] zext_ln1496_fu_174_p1;
wire   [8:0] zext_ln186_3_fu_184_p1;
wire   [8:0] zext_ln1496_2_fu_188_p1;
wire  signed [8:0] ret_V_37_fu_178_p2;
wire  signed [8:0] ret_V_38_fu_192_p2;
wire   [8:0] zext_ln1496_3_fu_212_p1;
wire   [8:0] zext_ln1496_4_fu_222_p1;
wire  signed [8:0] ret_V_40_fu_216_p2;
wire  signed [8:0] ret_V_41_fu_226_p2;
wire   [17:0] ret_V_39_fu_206_p2;
wire   [17:0] ret_V_42_fu_240_p2;
wire   [17:0] ret_V_fu_246_p2;
wire   [0:0] tmp_fu_258_p3;
wire   [0:0] icmp_ln1027_3_fu_302_p2;
wire   [0:0] icmp_ln1027_4_fu_312_p2;
wire   [0:0] icmp_ln1027_fu_298_p2;
wire   [7:0] select_ln69_fu_316_p3;
wire   [7:0] select_ln76_fu_306_p3;
wire   [0:0] icmp_ln1035_1_fu_334_p2;
wire   [0:0] icmp_ln1035_2_fu_344_p2;
wire   [0:0] icmp_ln1035_fu_330_p2;
wire   [7:0] select_ln89_fu_348_p3;
wire   [7:0] select_ln96_fu_338_p3;
wire   [0:0] icmp_ln1027_6_fu_366_p2;
wire   [0:0] icmp_ln1027_7_fu_376_p2;
wire   [0:0] icmp_ln1027_5_fu_362_p2;
wire   [7:0] select_ln69_1_fu_380_p3;
wire   [7:0] select_ln76_1_fu_370_p3;
wire   [0:0] icmp_ln1035_4_fu_398_p2;
wire   [0:0] icmp_ln1035_5_fu_408_p2;
wire   [0:0] icmp_ln1035_3_fu_394_p2;
wire   [7:0] select_ln89_1_fu_412_p3;
wire   [7:0] select_ln96_1_fu_402_p3;
wire   [7:0] lhs_5_fu_354_p3;
wire   [7:0] rhs_5_fu_322_p3;
wire   [8:0] zext_ln186_4_fu_426_p1;
wire   [8:0] zext_ln186_5_fu_430_p1;
wire  signed [8:0] ret_V_35_fu_434_p2;
wire   [7:0] lhs_6_fu_418_p3;
wire   [7:0] rhs_6_fu_386_p3;
wire   [8:0] zext_ln186_6_fu_444_p1;
wire   [8:0] zext_ln186_7_fu_448_p1;
wire  signed [8:0] ret_V_36_fu_452_p2;
wire   [7:0] trunc_ln186_fu_440_p1;
wire   [15:0] mul_ln186_fu_466_p2;
wire   [1:0] zext_ln152_fu_557_p1;
wire   [7:0] select_ln152_10_fu_538_p3;
wire   [7:0] select_ln152_7_fu_520_p3;
wire   [7:0] select_ln152_6_fu_514_p3;
wire   [7:0] select_ln152_8_fu_526_p3;
wire   [7:0] select_ln152_9_fu_532_p3;
wire   [7:0] select_ln152_11_fu_544_p3;
wire   [7:0] select_ln152_12_fu_550_p3;
wire   [7:0] select_ln152_5_fu_507_p3;
wire   [7:0] select_ln152_2_fu_486_p3;
wire   [7:0] select_ln152_fu_472_p3;
wire   [7:0] select_ln152_1_fu_479_p3;
wire   [7:0] select_ln152_3_fu_493_p3;
wire   [15:0] select_ln152_4_fu_500_p3;
reg   [1:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [7:0] ap_return_12_preg;
reg   [15:0] ap_return_13_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_0_preg = 2'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
#0 ap_return_12_preg = 8'd0;
#0 ap_return_13_preg = 16'd0;
end

rendering_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U14(
    .din0(ret_V_37_fu_178_p2),
    .din1(ret_V_38_fu_192_p2),
    .dout(ret_V_39_fu_206_p2)
);

rendering_mul_9s_9s_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
mul_9s_9s_18_1_1_U15(
    .din0(ret_V_40_fu_216_p2),
    .din1(ret_V_41_fu_226_p2),
    .dout(ret_V_42_fu_240_p2)
);

rendering_mul_9s_9s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mul_9s_9s_16_1_1_U16(
    .din0(ret_V_35_fu_434_p2),
    .din1(ret_V_36_fu_452_p2),
    .dout(mul_ln186_fu_466_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
                        ap_return_0_preg[0] <= zext_ln152_fu_557_p1[0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_10_preg <= select_ln152_fu_472_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_11_preg <= select_ln152_1_fu_479_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_12_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_12_preg <= select_ln152_3_fu_493_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_13_preg <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_13_preg <= select_ln152_4_fu_500_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_1_preg <= select_ln152_10_fu_538_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_2_preg <= select_ln152_7_fu_520_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_3_preg <= select_ln152_6_fu_514_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_4_preg <= select_ln152_8_fu_526_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_5_preg <= select_ln152_9_fu_532_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_6_preg <= select_ln152_11_fu_544_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_7_preg <= select_ln152_12_fu_550_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_8_preg <= select_ln152_5_fu_507_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_9_preg <= select_ln152_2_fu_486_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln152_reg_670 <= icmp_ln152_fu_252_p2;
        in0_V_1_reg_710 <= in0_V_1_fu_282_p3;
        in0_V_reg_721 <= in0_V_fu_290_p3;
        in1_V_1_reg_688 <= in1_V_1_fu_266_p3;
        in1_V_reg_699 <= in1_V_fu_274_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_0 = zext_ln152_fu_557_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_1 = select_ln152_10_fu_538_p3;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_10 = select_ln152_fu_472_p3;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_11 = select_ln152_1_fu_479_p3;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_12 = select_ln152_3_fu_493_p3;
    end else begin
        ap_return_12 = ap_return_12_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_13 = select_ln152_4_fu_500_p3;
    end else begin
        ap_return_13 = ap_return_13_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_2 = select_ln152_7_fu_520_p3;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_3 = select_ln152_6_fu_514_p3;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_4 = select_ln152_8_fu_526_p3;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_5 = select_ln152_9_fu_532_p3;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_6 = select_ln152_11_fu_544_p3;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_7 = select_ln152_12_fu_550_p3;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_8 = select_ln152_5_fu_507_p3;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_9 = select_ln152_2_fu_486_p3;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln1027_3_fu_302_p2 = ((in1_V_reg_699 < triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln1027_4_fu_312_p2 = ((in0_V_reg_721 < triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln1027_5_fu_362_p2 = ((in0_V_1_reg_710 < in1_V_1_reg_688) ? 1'b1 : 1'b0);

assign icmp_ln1027_6_fu_366_p2 = ((in1_V_1_reg_688 < triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln1027_7_fu_376_p2 = ((in0_V_1_reg_710 < triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_298_p2 = ((in0_V_reg_721 < in1_V_reg_699) ? 1'b1 : 1'b0);

assign icmp_ln1035_1_fu_334_p2 = ((in1_V_reg_699 > triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln1035_2_fu_344_p2 = ((in0_V_reg_721 > triangle_2d_x2) ? 1'b1 : 1'b0);

assign icmp_ln1035_3_fu_394_p2 = ((in0_V_1_reg_710 > in1_V_1_reg_688) ? 1'b1 : 1'b0);

assign icmp_ln1035_4_fu_398_p2 = ((in1_V_1_reg_688 > triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln1035_5_fu_408_p2 = ((in0_V_1_reg_710 > triangle_2d_y2) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_330_p2 = ((in0_V_reg_721 > in1_V_reg_699) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_252_p2 = ((ret_V_39_fu_206_p2 == ret_V_42_fu_240_p2) ? 1'b1 : 1'b0);

assign in0_V_1_fu_282_p3 = ((tmp_fu_258_p3[0:0] == 1'b1) ? triangle_2d_y1 : triangle_2d_y0);

assign in0_V_fu_290_p3 = ((tmp_fu_258_p3[0:0] == 1'b1) ? triangle_2d_x1 : triangle_2d_x0);

assign in1_V_1_fu_266_p3 = ((tmp_fu_258_p3[0:0] == 1'b1) ? triangle_2d_y0 : triangle_2d_y1);

assign in1_V_fu_274_p3 = ((tmp_fu_258_p3[0:0] == 1'b1) ? triangle_2d_x0 : triangle_2d_x1);

assign lhs_5_fu_354_p3 = ((icmp_ln1035_fu_330_p2[0:0] == 1'b1) ? select_ln89_fu_348_p3 : select_ln96_fu_338_p3);

assign lhs_6_fu_418_p3 = ((icmp_ln1035_3_fu_394_p2[0:0] == 1'b1) ? select_ln89_1_fu_412_p3 : select_ln96_1_fu_402_p3);

assign ret_V_35_fu_434_p2 = (zext_ln186_4_fu_426_p1 - zext_ln186_5_fu_430_p1);

assign ret_V_36_fu_452_p2 = (zext_ln186_6_fu_444_p1 - zext_ln186_7_fu_448_p1);

assign ret_V_37_fu_178_p2 = (zext_ln186_fu_170_p1 - zext_ln1496_fu_174_p1);

assign ret_V_38_fu_192_p2 = (zext_ln186_3_fu_184_p1 - zext_ln1496_2_fu_188_p1);

assign ret_V_40_fu_216_p2 = (zext_ln1496_3_fu_212_p1 - zext_ln1496_2_fu_188_p1);

assign ret_V_41_fu_226_p2 = (zext_ln1496_4_fu_222_p1 - zext_ln1496_fu_174_p1);

assign ret_V_fu_246_p2 = (ret_V_39_fu_206_p2 - ret_V_42_fu_240_p2);

assign rhs_5_fu_322_p3 = ((icmp_ln1027_fu_298_p2[0:0] == 1'b1) ? select_ln69_fu_316_p3 : select_ln76_fu_306_p3);

assign rhs_6_fu_386_p3 = ((icmp_ln1027_5_fu_362_p2[0:0] == 1'b1) ? select_ln69_1_fu_380_p3 : select_ln76_1_fu_370_p3);

assign select_ln152_10_fu_538_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? triangle_2d_same_x0_V_read : in0_V_reg_721);

assign select_ln152_11_fu_544_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? triangle_2d_same_y2_V_read : triangle_2d_y2);

assign select_ln152_12_fu_550_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? triangle_2d_same_z_V_read : triangle_2d_z);

assign select_ln152_1_fu_479_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? p_read4 : lhs_6_fu_418_p3);

assign select_ln152_2_fu_486_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? p_read2 : lhs_5_fu_354_p3);

assign select_ln152_3_fu_493_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? p_read5 : trunc_ln186_fu_440_p1);

assign select_ln152_4_fu_500_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? p_read11 : mul_ln186_fu_466_p2);

assign select_ln152_5_fu_507_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? p_read1 : rhs_5_fu_322_p3);

assign select_ln152_6_fu_514_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? triangle_2d_same_x1_V_read : in1_V_reg_699);

assign select_ln152_7_fu_520_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? triangle_2d_same_y0_V_read : in0_V_1_reg_710);

assign select_ln152_8_fu_526_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? triangle_2d_same_y1_V_read : in1_V_1_reg_688);

assign select_ln152_9_fu_532_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? triangle_2d_same_x2_V_read : triangle_2d_x2);

assign select_ln152_fu_472_p3 = ((icmp_ln152_reg_670[0:0] == 1'b1) ? p_read3 : rhs_6_fu_386_p3);

assign select_ln69_1_fu_380_p3 = ((icmp_ln1027_7_fu_376_p2[0:0] == 1'b1) ? in0_V_1_reg_710 : triangle_2d_y2);

assign select_ln69_fu_316_p3 = ((icmp_ln1027_4_fu_312_p2[0:0] == 1'b1) ? in0_V_reg_721 : triangle_2d_x2);

assign select_ln76_1_fu_370_p3 = ((icmp_ln1027_6_fu_366_p2[0:0] == 1'b1) ? in1_V_1_reg_688 : triangle_2d_y2);

assign select_ln76_fu_306_p3 = ((icmp_ln1027_3_fu_302_p2[0:0] == 1'b1) ? in1_V_reg_699 : triangle_2d_x2);

assign select_ln89_1_fu_412_p3 = ((icmp_ln1035_5_fu_408_p2[0:0] == 1'b1) ? in0_V_1_reg_710 : triangle_2d_y2);

assign select_ln89_fu_348_p3 = ((icmp_ln1035_2_fu_344_p2[0:0] == 1'b1) ? in0_V_reg_721 : triangle_2d_x2);

assign select_ln96_1_fu_402_p3 = ((icmp_ln1035_4_fu_398_p2[0:0] == 1'b1) ? in1_V_1_reg_688 : triangle_2d_y2);

assign select_ln96_fu_338_p3 = ((icmp_ln1035_1_fu_334_p2[0:0] == 1'b1) ? in1_V_reg_699 : triangle_2d_x2);

assign tmp_fu_258_p3 = ret_V_fu_246_p2[32'd17];

assign trunc_ln186_fu_440_p1 = ret_V_35_fu_434_p2[7:0];

assign zext_ln1496_2_fu_188_p1 = triangle_2d_y0;

assign zext_ln1496_3_fu_212_p1 = triangle_2d_y2;

assign zext_ln1496_4_fu_222_p1 = triangle_2d_x1;

assign zext_ln1496_fu_174_p1 = triangle_2d_x0;

assign zext_ln152_fu_557_p1 = icmp_ln152_reg_670;

assign zext_ln186_3_fu_184_p1 = triangle_2d_y1;

assign zext_ln186_4_fu_426_p1 = lhs_5_fu_354_p3;

assign zext_ln186_5_fu_430_p1 = rhs_5_fu_322_p3;

assign zext_ln186_6_fu_444_p1 = lhs_6_fu_418_p3;

assign zext_ln186_7_fu_448_p1 = rhs_6_fu_386_p3;

assign zext_ln186_fu_170_p1 = triangle_2d_x2;

always @ (posedge ap_clk) begin
    ap_return_0_preg[1] <= 1'b0;
end

endmodule //rendering_rasterization1

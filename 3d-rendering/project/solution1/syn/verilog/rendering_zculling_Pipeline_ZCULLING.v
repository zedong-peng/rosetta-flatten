// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rendering_zculling_Pipeline_ZCULLING (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size,
        fragments_y_address0,
        fragments_y_ce0,
        fragments_y_q0,
        fragments_x_address0,
        fragments_x_ce0,
        fragments_x_q0,
        fragments_z_address0,
        fragments_z_ce0,
        fragments_z_q0,
        pixels_x_address0,
        pixels_x_ce0,
        pixels_x_we0,
        pixels_x_d0,
        pixels_y_address0,
        pixels_y_ce0,
        pixels_y_we0,
        pixels_y_d0,
        fragments_color_address0,
        fragments_color_ce0,
        fragments_color_q0,
        pixels_color_address0,
        pixels_color_ce0,
        pixels_color_we0,
        pixels_color_d0,
        agg_result_0_out,
        agg_result_0_out_ap_vld,
        z_buffer_V_address0,
        z_buffer_V_ce0,
        z_buffer_V_we0,
        z_buffer_V_d0,
        z_buffer_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] size;
output  [8:0] fragments_y_address0;
output   fragments_y_ce0;
input  [7:0] fragments_y_q0;
output  [8:0] fragments_x_address0;
output   fragments_x_ce0;
input  [7:0] fragments_x_q0;
output  [8:0] fragments_z_address0;
output   fragments_z_ce0;
input  [7:0] fragments_z_q0;
output  [8:0] pixels_x_address0;
output   pixels_x_ce0;
output   pixels_x_we0;
output  [7:0] pixels_x_d0;
output  [8:0] pixels_y_address0;
output   pixels_y_ce0;
output   pixels_y_we0;
output  [7:0] pixels_y_d0;
output  [8:0] fragments_color_address0;
output   fragments_color_ce0;
input  [5:0] fragments_color_q0;
output  [8:0] pixels_color_address0;
output   pixels_color_ce0;
output   pixels_color_we0;
output  [5:0] pixels_color_d0;
output  [15:0] agg_result_0_out;
output   agg_result_0_out_ap_vld;
output  [15:0] z_buffer_V_address0;
output   z_buffer_V_ce0;
output   z_buffer_V_we0;
output  [7:0] z_buffer_V_d0;
input  [7:0] z_buffer_V_q0;

reg ap_idle;
reg fragments_y_ce0;
reg fragments_x_ce0;
reg fragments_z_ce0;
reg pixels_x_ce0;
reg pixels_x_we0;
reg pixels_y_ce0;
reg pixels_y_we0;
reg fragments_color_ce0;
reg pixels_color_ce0;
reg pixels_color_we0;
reg agg_result_0_out_ap_vld;
reg[15:0] z_buffer_V_address0;
reg z_buffer_V_ce0;
reg z_buffer_V_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln1027_reg_288;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [0:0] icmp_ln1027_fu_196_p2;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln1027_fu_208_p1;
reg   [63:0] zext_ln1027_reg_292;
reg   [7:0] fragments_y_load_reg_312;
wire    ap_block_pp0_stage1_11001;
reg   [7:0] fragments_x_load_reg_317;
reg   [15:0] z_buffer_V_addr_reg_322;
reg   [7:0] fragments_z_load_reg_327;
wire   [0:0] icmp_ln1027_2_fu_233_p2;
reg   [0:0] icmp_ln1027_2_reg_333;
wire   [63:0] zext_ln541_fu_241_p1;
reg   [63:0] zext_ln541_reg_337;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1027_1_fu_228_p1;
wire    ap_block_pp0_stage1;
reg   [15:0] n_V_fu_48;
wire   [15:0] add_ln840_fu_202_p2;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_n_V_1;
reg   [15:0] pixel_cntr_V_1_fu_52;
wire   [15:0] pixel_cntr_V_fu_247_p2;
reg   [15:0] pixel_cntr_V_2_fu_56;
wire    ap_block_pp0_stage1_01001;
wire   [15:0] tmp_1_fu_220_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

rendering_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1027_fu_196_p2 == 1'd0))) begin
            n_V_fu_48 <= add_ln840_fu_202_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_V_fu_48 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            pixel_cntr_V_1_fu_52 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1027_2_fu_233_p2 == 1'd1))) begin
            pixel_cntr_V_1_fu_52 <= pixel_cntr_V_fu_247_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            pixel_cntr_V_2_fu_56 <= 16'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln1027_2_fu_233_p2 == 1'd1))) begin
            pixel_cntr_V_2_fu_56 <= pixel_cntr_V_fu_247_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1027_reg_288 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fragments_x_load_reg_317 <= fragments_x_q0;
        fragments_y_load_reg_312 <= fragments_y_q0;
        fragments_z_load_reg_327 <= fragments_z_q0;
        z_buffer_V_addr_reg_322 <= zext_ln1027_1_fu_228_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1027_2_reg_333 <= icmp_ln1027_2_fu_233_p2;
        icmp_ln1027_reg_288 <= icmp_ln1027_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_fu_196_p2 == 1'd0))) begin
        zext_ln1027_reg_292[15 : 0] <= zext_ln1027_fu_208_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_2_fu_233_p2 == 1'd1))) begin
        zext_ln541_reg_337[15 : 0] <= zext_ln541_fu_241_p1[15 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_288 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        agg_result_0_out_ap_vld = 1'b1;
    end else begin
        agg_result_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1027_reg_288 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_n_V_1 = 16'd0;
    end else begin
        ap_sig_allocacmp_n_V_1 = n_V_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fragments_color_ce0 = 1'b1;
    end else begin
        fragments_color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fragments_x_ce0 = 1'b1;
    end else begin
        fragments_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fragments_y_ce0 = 1'b1;
    end else begin
        fragments_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fragments_z_ce0 = 1'b1;
    end else begin
        fragments_z_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        pixels_color_ce0 = 1'b1;
    end else begin
        pixels_color_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln1027_2_reg_333 == 1'd1))) begin
        pixels_color_we0 = 1'b1;
    end else begin
        pixels_color_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixels_x_ce0 = 1'b1;
    end else begin
        pixels_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_2_fu_233_p2 == 1'd1))) begin
        pixels_x_we0 = 1'b1;
    end else begin
        pixels_x_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixels_y_ce0 = 1'b1;
    end else begin
        pixels_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_2_fu_233_p2 == 1'd1))) begin
        pixels_y_we0 = 1'b1;
    end else begin
        pixels_y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        z_buffer_V_address0 = z_buffer_V_addr_reg_322;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        z_buffer_V_address0 = zext_ln1027_1_fu_228_p1;
    end else begin
        z_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        z_buffer_V_ce0 = 1'b1;
    end else begin
        z_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1027_2_fu_233_p2 == 1'd1))) begin
        z_buffer_V_we0 = 1'b1;
    end else begin
        z_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln840_fu_202_p2 = (ap_sig_allocacmp_n_V_1 + 16'd1);

assign agg_result_0_out = pixel_cntr_V_2_fu_56;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign fragments_color_address0 = zext_ln1027_reg_292;

assign fragments_x_address0 = zext_ln1027_fu_208_p1;

assign fragments_y_address0 = zext_ln1027_fu_208_p1;

assign fragments_z_address0 = zext_ln1027_fu_208_p1;

assign icmp_ln1027_2_fu_233_p2 = ((fragments_z_load_reg_327 < z_buffer_V_q0) ? 1'b1 : 1'b0);

assign icmp_ln1027_fu_196_p2 = ((ap_sig_allocacmp_n_V_1 == size) ? 1'b1 : 1'b0);

assign pixel_cntr_V_fu_247_p2 = (pixel_cntr_V_1_fu_52 + 16'd1);

assign pixels_color_address0 = zext_ln541_reg_337;

assign pixels_color_d0 = fragments_color_q0;

assign pixels_x_address0 = zext_ln541_fu_241_p1;

assign pixels_x_d0 = fragments_x_load_reg_317;

assign pixels_y_address0 = zext_ln541_fu_241_p1;

assign pixels_y_d0 = fragments_y_load_reg_312;

assign tmp_1_fu_220_p3 = {{fragments_y_q0}, {fragments_x_q0}};

assign z_buffer_V_d0 = fragments_z_load_reg_327;

assign zext_ln1027_1_fu_228_p1 = tmp_1_fu_220_p3;

assign zext_ln1027_fu_208_p1 = ap_sig_allocacmp_n_V_1;

assign zext_ln541_fu_241_p1 = pixel_cntr_V_1_fu_52;

always @ (posedge ap_clk) begin
    zext_ln1027_reg_292[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    zext_ln541_reg_337[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //rendering_zculling_Pipeline_ZCULLING

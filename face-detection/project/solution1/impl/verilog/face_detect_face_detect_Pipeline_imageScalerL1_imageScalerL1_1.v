// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module face_detect_face_detect_Pipeline_imageScalerL1_imageScalerL1_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        result_V_16,
        y_ratio,
        IMG1_data_address0,
        IMG1_data_ce0,
        IMG1_data_we0,
        IMG1_data_d0,
        result_V_15,
        sext_ln3379_2,
        Data_address0,
        Data_ce0,
        Data_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] result_V_16;
input  [23:0] y_ratio;
output  [16:0] IMG1_data_address0;
output   IMG1_data_ce0;
output   IMG1_data_we0;
output  [7:0] IMG1_data_d0;
input  [31:0] result_V_15;
input  [26:0] sext_ln3379_2;
output  [16:0] Data_address0;
output   Data_ce0;
input  [7:0] Data_q0;

reg ap_idle;
reg IMG1_data_ce0;
reg IMG1_data_we0;
reg Data_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln3383_fu_176_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sext_ln3379_2_cast_fu_136_p1;
reg  signed [31:0] sext_ln3379_2_cast_reg_442;
wire   [8:0] select_ln3383_fu_203_p3;
reg   [8:0] select_ln3383_reg_451;
reg   [8:0] select_ln3383_reg_451_pp0_iter2_reg;
reg   [8:0] select_ln3383_reg_451_pp0_iter3_reg;
wire   [7:0] select_ln3383_1_fu_211_p3;
reg   [7:0] select_ln3383_1_reg_456;
reg   [7:0] select_ln3383_1_reg_456_pp0_iter2_reg;
reg   [7:0] select_ln3383_1_reg_456_pp0_iter3_reg;
wire   [31:0] zext_ln3384_fu_246_p1;
wire   [0:0] or_ln3386_fu_261_p2;
reg   [0:0] or_ln3386_reg_472;
reg   [0:0] or_ln3386_reg_472_pp0_iter2_reg;
reg   [0:0] or_ln3386_reg_472_pp0_iter3_reg;
reg   [0:0] or_ln3386_reg_472_pp0_iter4_reg;
reg   [16:0] IMG1_data_addr_reg_476;
wire   [63:0] zext_ln3387_5_fu_364_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln3387_6_fu_388_p1;
reg   [8:0] j_2_fu_74;
wire   [8:0] add_ln3384_fu_267_p2;
wire    ap_loop_init;
reg   [7:0] i_fu_78;
reg   [16:0] indvar_flatten_fu_82;
wire   [16:0] add_ln3383_1_fu_182_p2;
wire   [31:0] zext_ln3383_fu_161_p1;
wire   [0:0] slt_fu_165_p2;
wire   [0:0] icmp_ln3384_fu_197_p2;
wire   [7:0] add_ln3383_fu_191_p2;
wire   [31:0] zext_ln3383_1_fu_219_p1;
wire   [0:0] slt21_fu_227_p2;
wire   [0:0] rev22_fu_232_p2;
wire   [0:0] rev20_fu_170_p2;
wire   [0:0] icmp_ln3386_fu_250_p2;
wire   [0:0] xor_ln3386_fu_255_p2;
wire   [0:0] select_ln3383_2_fu_238_p3;
wire   [15:0] tmp_s_fu_288_p3;
wire   [13:0] tmp_7_fu_299_p3;
wire   [16:0] zext_ln3387_fu_295_p1;
wire   [16:0] zext_ln3387_1_fu_306_p1;
wire  signed [23:0] grp_fu_393_p2;
wire   [7:0] idxprom_i_mid2_v_fu_316_p4;
wire   [15:0] tmp_8_fu_325_p3;
wire   [13:0] tmp_9_fu_337_p3;
wire   [16:0] zext_ln3387_2_fu_333_p1;
wire   [16:0] zext_ln3387_3_fu_345_p1;
wire   [16:0] add_ln3387_fu_310_p2;
wire   [16:0] zext_ln3387_4_fu_355_p1;
wire   [16:0] add_ln3387_2_fu_358_p2;
wire  signed [31:0] grp_fu_399_p2;
wire   [15:0] trunc_ln8_fu_369_p4;
wire   [16:0] add_ln3387_1_fu_349_p2;
wire  signed [16:0] sext_ln3387_fu_378_p1;
wire   [16:0] add_ln3387_3_fu_382_p2;
wire   [7:0] grp_fu_393_p0;
wire   [8:0] grp_fu_399_p0;
wire  signed [26:0] grp_fu_399_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [23:0] grp_fu_393_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

face_detect_mul_mul_8ns_24s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mul_mul_8ns_24s_24_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_393_p0),
    .din1(y_ratio),
    .ce(1'b1),
    .dout(grp_fu_393_p2)
);

face_detect_mul_mul_9ns_27s_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 27 ),
    .dout_WIDTH( 32 ))
mul_mul_9ns_27s_32_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_399_p0),
    .din1(grp_fu_399_p1),
    .ce(1'b1),
    .dout(grp_fu_399_p2)
);

face_detect_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_78 <= 8'd0;
        end else if (((icmp_ln3383_fu_176_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_78 <= select_ln3383_1_fu_211_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_82 <= 17'd0;
        end else if (((icmp_ln3383_fu_176_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_82 <= add_ln3383_1_fu_182_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_2_fu_74 <= 9'd0;
        end else if (((icmp_ln3383_fu_176_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_2_fu_74 <= add_ln3384_fu_267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        IMG1_data_addr_reg_476 <= zext_ln3387_5_fu_364_p1;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        or_ln3386_reg_472_pp0_iter2_reg <= or_ln3386_reg_472;
        or_ln3386_reg_472_pp0_iter3_reg <= or_ln3386_reg_472_pp0_iter2_reg;
        or_ln3386_reg_472_pp0_iter4_reg <= or_ln3386_reg_472_pp0_iter3_reg;
        select_ln3383_1_reg_456_pp0_iter2_reg <= select_ln3383_1_reg_456;
        select_ln3383_1_reg_456_pp0_iter3_reg <= select_ln3383_1_reg_456_pp0_iter2_reg;
        select_ln3383_reg_451_pp0_iter2_reg <= select_ln3383_reg_451;
        select_ln3383_reg_451_pp0_iter3_reg <= select_ln3383_reg_451_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        sext_ln3379_2_cast_reg_442 <= sext_ln3379_2_cast_fu_136_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln3383_fu_176_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln3386_reg_472 <= or_ln3386_fu_261_p2;
        select_ln3383_1_reg_456 <= select_ln3383_1_fu_211_p3;
        select_ln3383_reg_451 <= select_ln3383_fu_203_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        IMG1_data_ce0 = 1'b1;
    end else begin
        IMG1_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (or_ln3386_reg_472_pp0_iter4_reg == 1'd0))) begin
        IMG1_data_we0 = 1'b1;
    end else begin
        IMG1_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln3383_fu_176_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_address0 = zext_ln3387_6_fu_388_p1;

assign IMG1_data_address0 = IMG1_data_addr_reg_476;

assign IMG1_data_d0 = Data_q0;

assign add_ln3383_1_fu_182_p2 = (indvar_flatten_fu_82 + 17'd1);

assign add_ln3383_fu_191_p2 = (i_fu_78 + 8'd1);

assign add_ln3384_fu_267_p2 = (select_ln3383_fu_203_p3 + 9'd1);

assign add_ln3387_1_fu_349_p2 = (zext_ln3387_2_fu_333_p1 + zext_ln3387_3_fu_345_p1);

assign add_ln3387_2_fu_358_p2 = (add_ln3387_fu_310_p2 + zext_ln3387_4_fu_355_p1);

assign add_ln3387_3_fu_382_p2 = ($signed(add_ln3387_1_fu_349_p2) + $signed(sext_ln3387_fu_378_p1));

assign add_ln3387_fu_310_p2 = (zext_ln3387_fu_295_p1 + zext_ln3387_1_fu_306_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_393_p0 = grp_fu_393_p00;

assign grp_fu_393_p00 = select_ln3383_1_fu_211_p3;

assign grp_fu_399_p0 = zext_ln3384_fu_246_p1;

assign grp_fu_399_p1 = sext_ln3379_2_cast_reg_442;

assign icmp_ln3383_fu_176_p2 = ((indvar_flatten_fu_82 == 17'd76800) ? 1'b1 : 1'b0);

assign icmp_ln3384_fu_197_p2 = ((j_2_fu_74 == 9'd320) ? 1'b1 : 1'b0);

assign icmp_ln3386_fu_250_p2 = (($signed(zext_ln3384_fu_246_p1) < $signed(result_V_15)) ? 1'b1 : 1'b0);

assign idxprom_i_mid2_v_fu_316_p4 = {{grp_fu_393_p2[23:16]}};

assign or_ln3386_fu_261_p2 = (xor_ln3386_fu_255_p2 | select_ln3383_2_fu_238_p3);

assign rev20_fu_170_p2 = (slt_fu_165_p2 ^ 1'd1);

assign rev22_fu_232_p2 = (slt21_fu_227_p2 ^ 1'd1);

assign select_ln3383_1_fu_211_p3 = ((icmp_ln3384_fu_197_p2[0:0] == 1'b1) ? add_ln3383_fu_191_p2 : i_fu_78);

assign select_ln3383_2_fu_238_p3 = ((icmp_ln3384_fu_197_p2[0:0] == 1'b1) ? rev22_fu_232_p2 : rev20_fu_170_p2);

assign select_ln3383_fu_203_p3 = ((icmp_ln3384_fu_197_p2[0:0] == 1'b1) ? 9'd0 : j_2_fu_74);

assign sext_ln3379_2_cast_fu_136_p1 = $signed(sext_ln3379_2);

assign sext_ln3387_fu_378_p1 = $signed(trunc_ln8_fu_369_p4);

assign slt21_fu_227_p2 = (($signed(zext_ln3383_1_fu_219_p1) < $signed(result_V_16)) ? 1'b1 : 1'b0);

assign slt_fu_165_p2 = (($signed(zext_ln3383_fu_161_p1) < $signed(result_V_16)) ? 1'b1 : 1'b0);

assign tmp_7_fu_299_p3 = {{select_ln3383_1_reg_456_pp0_iter3_reg}, {6'd0}};

assign tmp_8_fu_325_p3 = {{idxprom_i_mid2_v_fu_316_p4}, {8'd0}};

assign tmp_9_fu_337_p3 = {{idxprom_i_mid2_v_fu_316_p4}, {6'd0}};

assign tmp_s_fu_288_p3 = {{select_ln3383_1_reg_456_pp0_iter3_reg}, {8'd0}};

assign trunc_ln8_fu_369_p4 = {{grp_fu_399_p2[31:16]}};

assign xor_ln3386_fu_255_p2 = (icmp_ln3386_fu_250_p2 ^ 1'd1);

assign zext_ln3383_1_fu_219_p1 = add_ln3383_fu_191_p2;

assign zext_ln3383_fu_161_p1 = i_fu_78;

assign zext_ln3384_fu_246_p1 = select_ln3383_fu_203_p3;

assign zext_ln3387_1_fu_306_p1 = tmp_7_fu_299_p3;

assign zext_ln3387_2_fu_333_p1 = tmp_8_fu_325_p3;

assign zext_ln3387_3_fu_345_p1 = tmp_9_fu_337_p3;

assign zext_ln3387_4_fu_355_p1 = select_ln3383_reg_451_pp0_iter3_reg;

assign zext_ln3387_5_fu_364_p1 = add_ln3387_2_fu_358_p2;

assign zext_ln3387_6_fu_388_p1 = add_ln3387_3_fu_382_p2;

assign zext_ln3387_fu_295_p1 = tmp_s_fu_288_p3;

endmodule //face_detect_face_detect_Pipeline_imageScalerL1_imageScalerL1_1

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SgdLR_dataflow_parent_loop_proc (
        data_address0,
        data_ce0,
        data_d0,
        data_q0,
        data_we0,
        data_address1,
        data_ce1,
        data_d1,
        data_q1,
        data_we1,
        theta_local_V_address0,
        theta_local_V_ce0,
        theta_local_V_d0,
        theta_local_V_q0,
        theta_local_V_we0,
        theta_local_V_address1,
        theta_local_V_ce1,
        theta_local_V_d1,
        theta_local_V_q1,
        theta_local_V_we1,
        label_local_V_address0,
        label_local_V_ce0,
        label_local_V_d0,
        label_local_V_q0,
        label_local_V_we0,
        label_local_V_address1,
        label_local_V_ce1,
        label_local_V_d1,
        label_local_V_q1,
        label_local_V_we1,
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output  [17:0] data_address0;
output   data_ce0;
output  [511:0] data_d0;
input  [511:0] data_q0;
output   data_we0;
output  [17:0] data_address1;
output   data_ce1;
output  [511:0] data_d1;
input  [511:0] data_q1;
output   data_we1;
output  [9:0] theta_local_V_address0;
output   theta_local_V_ce0;
output  [31:0] theta_local_V_d0;
input  [31:0] theta_local_V_q0;
output   theta_local_V_we0;
output  [9:0] theta_local_V_address1;
output   theta_local_V_ce1;
output  [31:0] theta_local_V_d1;
input  [31:0] theta_local_V_q1;
output   theta_local_V_we1;
output  [12:0] label_local_V_address0;
output   label_local_V_ce0;
output  [7:0] label_local_V_d0;
input  [7:0] label_local_V_q0;
output   label_local_V_we0;
output  [12:0] label_local_V_address1;
output   label_local_V_ce1;
output  [7:0] label_local_V_d1;
input  [7:0] label_local_V_q1;
output   label_local_V_we1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire   [17:0] dataflow_in_loop_TRAINING_INST_U0_data_address0;
wire    dataflow_in_loop_TRAINING_INST_U0_data_ce0;
wire   [511:0] dataflow_in_loop_TRAINING_INST_U0_data_d0;
wire    dataflow_in_loop_TRAINING_INST_U0_data_we0;
wire   [17:0] dataflow_in_loop_TRAINING_INST_U0_data_address1;
wire    dataflow_in_loop_TRAINING_INST_U0_data_ce1;
wire   [511:0] dataflow_in_loop_TRAINING_INST_U0_data_d1;
wire    dataflow_in_loop_TRAINING_INST_U0_data_we1;
wire   [9:0] dataflow_in_loop_TRAINING_INST_U0_theta_local_V_address0;
wire    dataflow_in_loop_TRAINING_INST_U0_theta_local_V_ce0;
wire   [31:0] dataflow_in_loop_TRAINING_INST_U0_theta_local_V_d0;
wire    dataflow_in_loop_TRAINING_INST_U0_theta_local_V_we0;
wire   [9:0] dataflow_in_loop_TRAINING_INST_U0_theta_local_V_address1;
wire    dataflow_in_loop_TRAINING_INST_U0_theta_local_V_ce1;
wire   [31:0] dataflow_in_loop_TRAINING_INST_U0_theta_local_V_d1;
wire    dataflow_in_loop_TRAINING_INST_U0_theta_local_V_we1;
wire   [12:0] dataflow_in_loop_TRAINING_INST_U0_label_local_V_address0;
wire    dataflow_in_loop_TRAINING_INST_U0_label_local_V_ce0;
wire   [7:0] dataflow_in_loop_TRAINING_INST_U0_label_local_V_d0;
wire    dataflow_in_loop_TRAINING_INST_U0_label_local_V_we0;
wire   [12:0] dataflow_in_loop_TRAINING_INST_U0_label_local_V_address1;
wire    dataflow_in_loop_TRAINING_INST_U0_label_local_V_ce1;
wire   [7:0] dataflow_in_loop_TRAINING_INST_U0_label_local_V_d1;
wire    dataflow_in_loop_TRAINING_INST_U0_label_local_V_we1;
wire    dataflow_in_loop_TRAINING_INST_U0_ap_start;
wire    dataflow_in_loop_TRAINING_INST_U0_ap_done;
wire    dataflow_in_loop_TRAINING_INST_U0_ap_ready;
wire    dataflow_in_loop_TRAINING_INST_U0_ap_idle;
reg    dataflow_in_loop_TRAINING_INST_U0_ap_continue;
reg   [12:0] loop_dataflow_input_count;
reg   [12:0] loop_dataflow_output_count;
wire   [12:0] bound_minus_1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 loop_dataflow_input_count = 13'd0;
#0 loop_dataflow_output_count = 13'd0;
end

SgdLR_dataflow_in_loop_TRAINING_INST dataflow_in_loop_TRAINING_INST_U0(
    .trunc_ln280(loop_dataflow_input_count),
    .data_address0(dataflow_in_loop_TRAINING_INST_U0_data_address0),
    .data_ce0(dataflow_in_loop_TRAINING_INST_U0_data_ce0),
    .data_d0(dataflow_in_loop_TRAINING_INST_U0_data_d0),
    .data_q0(data_q0),
    .data_we0(dataflow_in_loop_TRAINING_INST_U0_data_we0),
    .data_address1(dataflow_in_loop_TRAINING_INST_U0_data_address1),
    .data_ce1(dataflow_in_loop_TRAINING_INST_U0_data_ce1),
    .data_d1(dataflow_in_loop_TRAINING_INST_U0_data_d1),
    .data_q1(512'd0),
    .data_we1(dataflow_in_loop_TRAINING_INST_U0_data_we1),
    .theta_local_V_address0(dataflow_in_loop_TRAINING_INST_U0_theta_local_V_address0),
    .theta_local_V_ce0(dataflow_in_loop_TRAINING_INST_U0_theta_local_V_ce0),
    .theta_local_V_d0(dataflow_in_loop_TRAINING_INST_U0_theta_local_V_d0),
    .theta_local_V_q0(theta_local_V_q0),
    .theta_local_V_we0(dataflow_in_loop_TRAINING_INST_U0_theta_local_V_we0),
    .theta_local_V_address1(dataflow_in_loop_TRAINING_INST_U0_theta_local_V_address1),
    .theta_local_V_ce1(dataflow_in_loop_TRAINING_INST_U0_theta_local_V_ce1),
    .theta_local_V_d1(dataflow_in_loop_TRAINING_INST_U0_theta_local_V_d1),
    .theta_local_V_q1(theta_local_V_q1),
    .theta_local_V_we1(dataflow_in_loop_TRAINING_INST_U0_theta_local_V_we1),
    .label_local_V_address0(dataflow_in_loop_TRAINING_INST_U0_label_local_V_address0),
    .label_local_V_ce0(dataflow_in_loop_TRAINING_INST_U0_label_local_V_ce0),
    .label_local_V_d0(dataflow_in_loop_TRAINING_INST_U0_label_local_V_d0),
    .label_local_V_q0(label_local_V_q0),
    .label_local_V_we0(dataflow_in_loop_TRAINING_INST_U0_label_local_V_we0),
    .label_local_V_address1(dataflow_in_loop_TRAINING_INST_U0_label_local_V_address1),
    .label_local_V_ce1(dataflow_in_loop_TRAINING_INST_U0_label_local_V_ce1),
    .label_local_V_d1(dataflow_in_loop_TRAINING_INST_U0_label_local_V_d1),
    .label_local_V_q1(8'd0),
    .label_local_V_we1(dataflow_in_loop_TRAINING_INST_U0_label_local_V_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .trunc_ln280_ap_vld(1'b0),
    .ap_start(dataflow_in_loop_TRAINING_INST_U0_ap_start),
    .ap_done(dataflow_in_loop_TRAINING_INST_U0_ap_done),
    .ap_ready(dataflow_in_loop_TRAINING_INST_U0_ap_ready),
    .ap_idle(dataflow_in_loop_TRAINING_INST_U0_ap_idle),
    .ap_continue(dataflow_in_loop_TRAINING_INST_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 13'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_TRAINING_INST_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 13'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_TRAINING_INST_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 13'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_TRAINING_INST_U0_ap_continue == 1'b1) & (dataflow_in_loop_TRAINING_INST_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 13'd1);
        end else if (((dataflow_in_loop_TRAINING_INST_U0_ap_continue == 1'b1) & (dataflow_in_loop_TRAINING_INST_U0_ap_done == 1'b1) & (loop_dataflow_output_count == bound_minus_1))) begin
            loop_dataflow_output_count <= 13'd0;
        end
    end
end

always @ (*) begin
    if (((dataflow_in_loop_TRAINING_INST_U0_ap_done == 1'b1) & (loop_dataflow_output_count == bound_minus_1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (dataflow_in_loop_TRAINING_INST_U0_ap_idle == 1'b1) & (loop_dataflow_output_count == 13'd0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_TRAINING_INST_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_TRAINING_INST_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_TRAINING_INST_U0_ap_continue = 1'b0;
    end
end

assign bound_minus_1 = (13'd4500 - 13'd1);

assign data_address0 = dataflow_in_loop_TRAINING_INST_U0_data_address0;

assign data_address1 = 18'd0;

assign data_ce0 = dataflow_in_loop_TRAINING_INST_U0_data_ce0;

assign data_ce1 = 1'b0;

assign data_d0 = 512'd0;

assign data_d1 = 512'd0;

assign data_we0 = 1'b0;

assign data_we1 = 1'b0;

assign dataflow_in_loop_TRAINING_INST_U0_ap_start = ap_start;

assign label_local_V_address0 = dataflow_in_loop_TRAINING_INST_U0_label_local_V_address0;

assign label_local_V_address1 = 13'd0;

assign label_local_V_ce0 = dataflow_in_loop_TRAINING_INST_U0_label_local_V_ce0;

assign label_local_V_ce1 = 1'b0;

assign label_local_V_d0 = 8'd0;

assign label_local_V_d1 = 8'd0;

assign label_local_V_we0 = 1'b0;

assign label_local_V_we1 = 1'b0;

assign theta_local_V_address0 = dataflow_in_loop_TRAINING_INST_U0_theta_local_V_address0;

assign theta_local_V_address1 = dataflow_in_loop_TRAINING_INST_U0_theta_local_V_address1;

assign theta_local_V_ce0 = dataflow_in_loop_TRAINING_INST_U0_theta_local_V_ce0;

assign theta_local_V_ce1 = dataflow_in_loop_TRAINING_INST_U0_theta_local_V_ce1;

assign theta_local_V_d0 = dataflow_in_loop_TRAINING_INST_U0_theta_local_V_d0;

assign theta_local_V_d1 = 32'd0;

assign theta_local_V_we0 = dataflow_in_loop_TRAINING_INST_U0_theta_local_V_we0;

assign theta_local_V_we1 = 1'b0;

endmodule //SgdLR_dataflow_parent_loop_proc

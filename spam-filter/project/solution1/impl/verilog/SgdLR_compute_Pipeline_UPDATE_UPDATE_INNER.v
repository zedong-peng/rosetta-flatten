// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SgdLR_compute_Pipeline_UPDATE_UPDATE_INNER (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        gradient_V_address0,
        gradient_V_ce0,
        gradient_V_q0,
        theta_local_V_address0,
        theta_local_V_ce0,
        theta_local_V_we0,
        theta_local_V_d0,
        theta_local_V_address1,
        theta_local_V_ce1,
        theta_local_V_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] gradient_V_address0;
output   gradient_V_ce0;
input  [31:0] gradient_V_q0;
output  [9:0] theta_local_V_address0;
output   theta_local_V_ce0;
output   theta_local_V_we0;
output  [31:0] theta_local_V_d0;
output  [9:0] theta_local_V_address1;
output   theta_local_V_ce1;
input  [31:0] theta_local_V_q1;

reg ap_idle;
reg gradient_V_ce0;
reg theta_local_V_ce0;
reg theta_local_V_we0;
reg theta_local_V_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln196_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [9:0] theta_local_V_addr_reg_273;
wire   [63:0] zext_ln1273_fu_182_p1;
wire    ap_block_pp0_stage0;
reg   [5:0] j_fu_54;
wire   [5:0] add_ln199_fu_188_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_58;
wire   [5:0] select_ln196_1_fu_152_p3;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten19_fu_62;
wire   [10:0] add_ln196_fu_120_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten19_load;
wire   [0:0] icmp_ln199_fu_132_p2;
wire   [5:0] add_ln196_1_fu_146_p2;
wire   [4:0] trunc_ln196_fu_160_p1;
wire   [5:0] select_ln196_fu_138_p3;
wire   [9:0] p_mid1_fu_164_p3;
wire   [9:0] j_2_cast_i_i_fu_172_p1;
wire   [9:0] add_ln200_fu_176_p2;
wire  signed [31:0] r_V_fu_213_p1;
wire   [50:0] lhs_V_1_fu_219_p3;
wire   [50:0] r_V_fu_213_p2;
wire   [50:0] ret_V_fu_227_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

SgdLR_mul_32s_32s_51_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 51 ))
mul_32s_32s_51_1_1_U16(
    .din0(gradient_V_q0),
    .din1(r_V_fu_213_p1),
    .dout(r_V_fu_213_p2)
);

SgdLR_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln196_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_58 <= select_ln196_1_fu_152_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_58 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln196_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten19_fu_62 <= add_ln196_fu_120_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_62 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln196_fu_114_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_54 <= add_ln199_fu_188_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_54 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln196_fu_114_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        theta_local_V_addr_reg_273 <= zext_ln1273_fu_182_p1;
    end
end

always @ (*) begin
    if (((icmp_ln196_fu_114_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_58;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten19_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten19_load = indvar_flatten19_fu_62;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_54;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gradient_V_ce0 = 1'b1;
    end else begin
        gradient_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        theta_local_V_ce0 = 1'b1;
    end else begin
        theta_local_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        theta_local_V_ce1 = 1'b1;
    end else begin
        theta_local_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        theta_local_V_we0 = 1'b1;
    end else begin
        theta_local_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln196_1_fu_146_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln196_fu_120_p2 = (ap_sig_allocacmp_indvar_flatten19_load + 11'd1);

assign add_ln199_fu_188_p2 = (select_ln196_fu_138_p3 + 6'd1);

assign add_ln200_fu_176_p2 = (p_mid1_fu_164_p3 + j_2_cast_i_i_fu_172_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign gradient_V_address0 = zext_ln1273_fu_182_p1;

assign icmp_ln196_fu_114_p2 = ((ap_sig_allocacmp_indvar_flatten19_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln199_fu_132_p2 = ((ap_sig_allocacmp_j_load == 6'd32) ? 1'b1 : 1'b0);

assign j_2_cast_i_i_fu_172_p1 = select_ln196_fu_138_p3;

assign lhs_V_1_fu_219_p3 = {{theta_local_V_q1}, {19'd0}};

assign p_mid1_fu_164_p3 = {{trunc_ln196_fu_160_p1}, {5'd0}};

assign r_V_fu_213_p1 = 51'd2251798421176320;

assign ret_V_fu_227_p2 = (lhs_V_1_fu_219_p3 + r_V_fu_213_p2);

assign select_ln196_1_fu_152_p3 = ((icmp_ln199_fu_132_p2[0:0] == 1'b1) ? add_ln196_1_fu_146_p2 : ap_sig_allocacmp_i_load);

assign select_ln196_fu_138_p3 = ((icmp_ln199_fu_132_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign theta_local_V_address0 = theta_local_V_addr_reg_273;

assign theta_local_V_address1 = zext_ln1273_fu_182_p1;

assign theta_local_V_d0 = {{ret_V_fu_227_p2[50:19]}};

assign trunc_ln196_fu_160_p1 = select_ln196_1_fu_152_p3[4:0];

assign zext_ln1273_fu_182_p1 = add_ln200_fu_176_p2;

endmodule //SgdLR_compute_Pipeline_UPDATE_UPDATE_INNER

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SgdLR_READ_TRAINING_DATA_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        trunc_ln280,
        data_address0,
        data_ce0,
        data_q0,
        training_instance_V_address0,
        training_instance_V_ce0,
        training_instance_V_we0,
        training_instance_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [12:0] trunc_ln280;
output  [17:0] data_address0;
output   data_ce0;
input  [511:0] data_q0;
output  [9:0] training_instance_V_address0;
output   training_instance_V_ce0;
output   training_instance_V_we0;
output  [15:0] training_instance_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_ce0;
reg training_instance_V_ce0;
reg training_instance_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] add_ln104_fu_109_p2;
reg   [5:0] add_ln104_reg_209;
wire    ap_CS_fsm_state2;
wire   [4:0] trunc_ln107_fu_115_p1;
reg   [4:0] trunc_ln107_reg_214;
wire   [0:0] icmp_ln104_fu_103_p2;
reg   [511:0] tmp_data_V_reg_224;
wire    ap_CS_fsm_state3;
wire   [9:0] tmp_7_fu_131_p3;
reg   [9:0] tmp_7_reg_229;
wire   [5:0] add_ln108_fu_148_p2;
wire    ap_CS_fsm_state4;
reg   [5:0] j_reg_84;
wire   [0:0] icmp_ln108_fu_142_p2;
wire   [63:0] zext_ln107_fu_126_p1;
wire   [63:0] zext_ln628_fu_159_p1;
reg   [5:0] i_fu_48;
reg    ap_block_state1;
wire   [17:0] or_ln_fu_119_p3;
wire   [9:0] zext_ln108_fu_138_p1;
wire   [9:0] add_ln109_fu_154_p2;
wire   [4:0] trunc_ln628_fu_164_p1;
wire   [8:0] shl_ln_fu_168_p3;
wire   [511:0] zext_ln628_3_fu_176_p1;
wire   [511:0] lshr_ln628_fu_180_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln104_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_48 <= 6'd0;
    end else if (((icmp_ln108_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_fu_48 <= add_ln104_reg_209;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln108_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_84 <= add_ln108_fu_148_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_84 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln104_reg_209 <= add_ln104_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_7_reg_229[9 : 5] <= tmp_7_fu_131_p3[9 : 5];
        tmp_data_V_reg_224 <= data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_103_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln107_reg_214 <= trunc_ln107_fu_115_p1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln104_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_ce0 = 1'b1;
    end else begin
        data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        training_instance_V_ce0 = 1'b1;
    end else begin
        training_instance_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln108_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        training_instance_V_we0 = 1'b1;
    end else begin
        training_instance_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln104_fu_103_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln108_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln104_fu_109_p2 = (i_fu_48 + 6'd1);

assign add_ln108_fu_148_p2 = (j_reg_84 + 6'd1);

assign add_ln109_fu_154_p2 = (tmp_7_reg_229 + zext_ln108_fu_138_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign data_address0 = zext_ln107_fu_126_p1;

assign icmp_ln104_fu_103_p2 = ((i_fu_48 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln108_fu_142_p2 = ((j_reg_84 == 6'd32) ? 1'b1 : 1'b0);

assign lshr_ln628_fu_180_p2 = tmp_data_V_reg_224 >> zext_ln628_3_fu_176_p1;

assign or_ln_fu_119_p3 = {{trunc_ln280}, {trunc_ln107_fu_115_p1}};

assign shl_ln_fu_168_p3 = {{trunc_ln628_fu_164_p1}, {4'd0}};

assign tmp_7_fu_131_p3 = {{trunc_ln107_reg_214}, {5'd0}};

assign training_instance_V_address0 = zext_ln628_fu_159_p1;

assign training_instance_V_d0 = lshr_ln628_fu_180_p2[15:0];

assign trunc_ln107_fu_115_p1 = i_fu_48[4:0];

assign trunc_ln628_fu_164_p1 = j_reg_84[4:0];

assign zext_ln107_fu_126_p1 = or_ln_fu_119_p3;

assign zext_ln108_fu_138_p1 = j_reg_84;

assign zext_ln628_3_fu_176_p1 = shl_ln_fu_168_p3;

assign zext_ln628_fu_159_p1 = add_ln109_fu_154_p2;

always @ (posedge ap_clk) begin
    tmp_7_reg_229[4:0] <= 5'b00000;
end

endmodule //SgdLR_READ_TRAINING_DATA_proc

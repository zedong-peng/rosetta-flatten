// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SgdLR_compute_Pipeline_GRAD_GRAD_INNER (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln177,
        gradient_V_address0,
        gradient_V_ce0,
        gradient_V_we0,
        gradient_V_d0,
        training_instance_V_address0,
        training_instance_V_ce0,
        training_instance_V_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [27:0] sext_ln177;
output  [9:0] gradient_V_address0;
output   gradient_V_ce0;
output   gradient_V_we0;
output  [31:0] gradient_V_d0;
output  [9:0] training_instance_V_address0;
output   training_instance_V_ce0;
input  [15:0] training_instance_V_q0;

reg ap_idle;
reg gradient_V_ce0;
reg gradient_V_we0;
reg training_instance_V_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln177_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire  signed [43:0] sext_ln177_cast_fu_96_p1;
reg  signed [43:0] sext_ln177_cast_reg_253;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln1270_fu_186_p1;
reg   [63:0] zext_ln1270_reg_262;
reg   [63:0] zext_ln1270_reg_262_pp0_iter1_reg;
reg   [63:0] zext_ln1270_reg_262_pp0_iter2_reg;
reg   [63:0] zext_ln1270_reg_262_pp0_iter3_reg;
wire    ap_block_pp0_stage0;
reg   [5:0] j_fu_52;
wire   [5:0] add_ln180_fu_191_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_56;
wire   [5:0] select_ln177_1_fu_156_p3;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten9_fu_60;
wire   [10:0] add_ln177_fu_124_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten9_load;
wire   [0:0] icmp_ln180_fu_136_p2;
wire   [5:0] add_ln177_1_fu_150_p2;
wire   [4:0] trunc_ln177_fu_164_p1;
wire   [5:0] select_ln177_fu_142_p3;
wire   [9:0] p_mid_fu_168_p3;
wire   [9:0] j_1_cast_i_i_fu_176_p1;
wire   [9:0] add_ln181_fu_180_p2;
wire  signed [43:0] grp_fu_226_p2;
wire  signed [27:0] grp_fu_226_p0;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

SgdLR_mul_mul_28s_16s_44_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 44 ))
mul_mul_28s_16s_44_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_226_p0),
    .din1(training_instance_V_q0),
    .ce(1'b1),
    .dout(grp_fu_226_p2)
);

SgdLR_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln177_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_56 <= select_ln177_1_fu_156_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_56 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln177_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten9_fu_60 <= add_ln177_fu_124_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten9_fu_60 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln177_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_52 <= add_ln180_fu_191_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_52 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        sext_ln177_cast_reg_253 <= sext_ln177_cast_fu_96_p1;
        zext_ln1270_reg_262_pp0_iter1_reg[9 : 0] <= zext_ln1270_reg_262[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        zext_ln1270_reg_262_pp0_iter2_reg[9 : 0] <= zext_ln1270_reg_262_pp0_iter1_reg[9 : 0];
        zext_ln1270_reg_262_pp0_iter3_reg[9 : 0] <= zext_ln1270_reg_262_pp0_iter2_reg[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln177_fu_118_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln1270_reg_262[9 : 0] <= zext_ln1270_fu_186_p1[9 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln177_fu_118_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_56;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten9_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten9_load = indvar_flatten9_fu_60;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        gradient_V_ce0 = 1'b1;
    end else begin
        gradient_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        gradient_V_we0 = 1'b1;
    end else begin
        gradient_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        training_instance_V_ce0 = 1'b1;
    end else begin
        training_instance_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln177_1_fu_150_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln177_fu_124_p2 = (ap_sig_allocacmp_indvar_flatten9_load + 11'd1);

assign add_ln180_fu_191_p2 = (select_ln177_fu_142_p3 + 6'd1);

assign add_ln181_fu_180_p2 = (p_mid_fu_168_p3 + j_1_cast_i_i_fu_176_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign gradient_V_address0 = zext_ln1270_reg_262_pp0_iter3_reg;

assign gradient_V_d0 = {{grp_fu_226_p2[43:12]}};

assign grp_fu_226_p0 = sext_ln177_cast_reg_253;

assign icmp_ln177_fu_118_p2 = ((ap_sig_allocacmp_indvar_flatten9_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln180_fu_136_p2 = ((ap_sig_allocacmp_j_load == 6'd32) ? 1'b1 : 1'b0);

assign j_1_cast_i_i_fu_176_p1 = select_ln177_fu_142_p3;

assign p_mid_fu_168_p3 = {{trunc_ln177_fu_164_p1}, {5'd0}};

assign select_ln177_1_fu_156_p3 = ((icmp_ln180_fu_136_p2[0:0] == 1'b1) ? add_ln177_1_fu_150_p2 : ap_sig_allocacmp_i_load);

assign select_ln177_fu_142_p3 = ((icmp_ln180_fu_136_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign sext_ln177_cast_fu_96_p1 = $signed(sext_ln177);

assign training_instance_V_address0 = zext_ln1270_fu_186_p1;

assign trunc_ln177_fu_164_p1 = select_ln177_1_fu_156_p3[4:0];

assign zext_ln1270_fu_186_p1 = add_ln181_fu_180_p2;

always @ (posedge ap_clk) begin
    zext_ln1270_reg_262[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln1270_reg_262_pp0_iter1_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln1270_reg_262_pp0_iter2_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    zext_ln1270_reg_262_pp0_iter3_reg[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //SgdLR_compute_Pipeline_GRAD_GRAD_INNER

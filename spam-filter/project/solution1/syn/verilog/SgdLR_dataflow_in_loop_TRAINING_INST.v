// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SgdLR_dataflow_in_loop_TRAINING_INST (
        trunc_ln280,
        data_address0,
        data_ce0,
        data_d0,
        data_q0,
        data_we0,
        data_address1,
        data_ce1,
        data_d1,
        data_q1,
        data_we1,
        theta_local_V_address0,
        theta_local_V_ce0,
        theta_local_V_d0,
        theta_local_V_q0,
        theta_local_V_we0,
        theta_local_V_address1,
        theta_local_V_ce1,
        theta_local_V_d1,
        theta_local_V_q1,
        theta_local_V_we1,
        label_local_V_address0,
        label_local_V_ce0,
        label_local_V_d0,
        label_local_V_q0,
        label_local_V_we0,
        label_local_V_address1,
        label_local_V_ce1,
        label_local_V_d1,
        label_local_V_q1,
        label_local_V_we1,
        ap_clk,
        ap_rst,
        trunc_ln280_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [12:0] trunc_ln280;
output  [17:0] data_address0;
output   data_ce0;
output  [511:0] data_d0;
input  [511:0] data_q0;
output   data_we0;
output  [17:0] data_address1;
output   data_ce1;
output  [511:0] data_d1;
input  [511:0] data_q1;
output   data_we1;
output  [9:0] theta_local_V_address0;
output   theta_local_V_ce0;
output  [31:0] theta_local_V_d0;
input  [31:0] theta_local_V_q0;
output   theta_local_V_we0;
output  [9:0] theta_local_V_address1;
output   theta_local_V_ce1;
output  [31:0] theta_local_V_d1;
input  [31:0] theta_local_V_q1;
output   theta_local_V_we1;
output  [12:0] label_local_V_address0;
output   label_local_V_ce0;
output  [7:0] label_local_V_d0;
input  [7:0] label_local_V_q0;
output   label_local_V_we0;
output  [12:0] label_local_V_address1;
output   label_local_V_ce1;
output  [7:0] label_local_V_d1;
input  [7:0] label_local_V_q1;
output   label_local_V_we1;
input   ap_clk;
input   ap_rst;
input   trunc_ln280_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    READ_TRAINING_DATA_proc_U0_ap_start;
wire    READ_TRAINING_DATA_proc_U0_ap_done;
wire    READ_TRAINING_DATA_proc_U0_ap_continue;
wire    READ_TRAINING_DATA_proc_U0_ap_idle;
wire    READ_TRAINING_DATA_proc_U0_ap_ready;
wire   [17:0] READ_TRAINING_DATA_proc_U0_data_address0;
wire    READ_TRAINING_DATA_proc_U0_data_ce0;
wire   [9:0] READ_TRAINING_DATA_proc_U0_training_instance_V_address0;
wire    READ_TRAINING_DATA_proc_U0_training_instance_V_ce0;
wire    READ_TRAINING_DATA_proc_U0_training_instance_V_we0;
wire   [15:0] READ_TRAINING_DATA_proc_U0_training_instance_V_d0;
wire    compute_U0_ap_start;
wire    compute_U0_ap_done;
wire    compute_U0_ap_continue;
wire    compute_U0_ap_idle;
wire    compute_U0_ap_ready;
wire   [12:0] compute_U0_label_local_V_address0;
wire    compute_U0_label_local_V_ce0;
wire   [9:0] compute_U0_theta_local_V_address0;
wire    compute_U0_theta_local_V_ce0;
wire    compute_U0_theta_local_V_we0;
wire   [31:0] compute_U0_theta_local_V_d0;
wire   [9:0] compute_U0_theta_local_V_address1;
wire    compute_U0_theta_local_V_ce1;
wire   [9:0] compute_U0_training_instance_V_address0;
wire    compute_U0_training_instance_V_ce0;
wire   [15:0] training_instance_V_i_q0;
wire   [15:0] training_instance_V_t_q0;
wire    training_instance_V_i_full_n;
wire    training_instance_V_t_empty_n;
wire    ap_sync_ready;
reg    ap_sync_reg_READ_TRAINING_DATA_proc_U0_ap_ready;
wire    ap_sync_READ_TRAINING_DATA_proc_U0_ap_ready;
reg    ap_sync_reg_compute_U0_ap_ready;
wire    ap_sync_compute_U0_ap_ready;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_READ_TRAINING_DATA_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_compute_U0_ap_ready = 1'b0;
end

SgdLR_READ_TRAINING_DATA_proc READ_TRAINING_DATA_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(READ_TRAINING_DATA_proc_U0_ap_start),
    .ap_done(READ_TRAINING_DATA_proc_U0_ap_done),
    .ap_continue(READ_TRAINING_DATA_proc_U0_ap_continue),
    .ap_idle(READ_TRAINING_DATA_proc_U0_ap_idle),
    .ap_ready(READ_TRAINING_DATA_proc_U0_ap_ready),
    .trunc_ln280(trunc_ln280),
    .data_address0(READ_TRAINING_DATA_proc_U0_data_address0),
    .data_ce0(READ_TRAINING_DATA_proc_U0_data_ce0),
    .data_q0(data_q0),
    .training_instance_V_address0(READ_TRAINING_DATA_proc_U0_training_instance_V_address0),
    .training_instance_V_ce0(READ_TRAINING_DATA_proc_U0_training_instance_V_ce0),
    .training_instance_V_we0(READ_TRAINING_DATA_proc_U0_training_instance_V_we0),
    .training_instance_V_d0(READ_TRAINING_DATA_proc_U0_training_instance_V_d0)
);

SgdLR_compute compute_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(compute_U0_ap_start),
    .ap_done(compute_U0_ap_done),
    .ap_continue(compute_U0_ap_continue),
    .ap_idle(compute_U0_ap_idle),
    .ap_ready(compute_U0_ap_ready),
    .label_local_V_address0(compute_U0_label_local_V_address0),
    .label_local_V_ce0(compute_U0_label_local_V_ce0),
    .label_local_V_q0(label_local_V_q0),
    .trunc_ln280(trunc_ln280),
    .theta_local_V_address0(compute_U0_theta_local_V_address0),
    .theta_local_V_ce0(compute_U0_theta_local_V_ce0),
    .theta_local_V_we0(compute_U0_theta_local_V_we0),
    .theta_local_V_d0(compute_U0_theta_local_V_d0),
    .theta_local_V_q0(theta_local_V_q0),
    .theta_local_V_address1(compute_U0_theta_local_V_address1),
    .theta_local_V_ce1(compute_U0_theta_local_V_ce1),
    .theta_local_V_q1(theta_local_V_q1),
    .training_instance_V_address0(compute_U0_training_instance_V_address0),
    .training_instance_V_ce0(compute_U0_training_instance_V_ce0),
    .training_instance_V_q0(training_instance_V_t_q0)
);

SgdLR_dataflow_in_loop_TRAINING_INST_training_instance_V_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
training_instance_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .i_address0(READ_TRAINING_DATA_proc_U0_training_instance_V_address0),
    .i_ce0(READ_TRAINING_DATA_proc_U0_training_instance_V_ce0),
    .i_we0(READ_TRAINING_DATA_proc_U0_training_instance_V_we0),
    .i_d0(READ_TRAINING_DATA_proc_U0_training_instance_V_d0),
    .i_q0(training_instance_V_i_q0),
    .t_address0(compute_U0_training_instance_V_address0),
    .t_ce0(compute_U0_training_instance_V_ce0),
    .t_we0(1'b0),
    .t_d0(16'd0),
    .t_q0(training_instance_V_t_q0),
    .i_ce(1'b1),
    .t_ce(1'b1),
    .i_full_n(training_instance_V_i_full_n),
    .i_write(READ_TRAINING_DATA_proc_U0_ap_done),
    .t_empty_n(training_instance_V_t_empty_n),
    .t_read(compute_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_READ_TRAINING_DATA_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_READ_TRAINING_DATA_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_READ_TRAINING_DATA_proc_U0_ap_ready <= ap_sync_READ_TRAINING_DATA_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_compute_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_compute_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_compute_U0_ap_ready <= ap_sync_compute_U0_ap_ready;
        end
    end
end

assign READ_TRAINING_DATA_proc_U0_ap_continue = training_instance_V_i_full_n;

assign READ_TRAINING_DATA_proc_U0_ap_start = ((ap_sync_reg_READ_TRAINING_DATA_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign ap_done = compute_U0_ap_done;

assign ap_idle = ((training_instance_V_t_empty_n ^ 1'b1) & compute_U0_ap_idle & READ_TRAINING_DATA_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

assign ap_sync_READ_TRAINING_DATA_proc_U0_ap_ready = (ap_sync_reg_READ_TRAINING_DATA_proc_U0_ap_ready | READ_TRAINING_DATA_proc_U0_ap_ready);

assign ap_sync_compute_U0_ap_ready = (compute_U0_ap_ready | ap_sync_reg_compute_U0_ap_ready);

assign ap_sync_ready = (ap_sync_compute_U0_ap_ready & ap_sync_READ_TRAINING_DATA_proc_U0_ap_ready);

assign compute_U0_ap_continue = ap_continue;

assign compute_U0_ap_start = (training_instance_V_t_empty_n & (ap_sync_reg_compute_U0_ap_ready ^ 1'b1) & ap_start);

assign data_address0 = READ_TRAINING_DATA_proc_U0_data_address0;

assign data_address1 = 18'd0;

assign data_ce0 = READ_TRAINING_DATA_proc_U0_data_ce0;

assign data_ce1 = 1'b0;

assign data_d0 = 512'd0;

assign data_d1 = 512'd0;

assign data_we0 = 1'b0;

assign data_we1 = 1'b0;

assign label_local_V_address0 = compute_U0_label_local_V_address0;

assign label_local_V_address1 = 13'd0;

assign label_local_V_ce0 = compute_U0_label_local_V_ce0;

assign label_local_V_ce1 = 1'b0;

assign label_local_V_d0 = 8'd0;

assign label_local_V_d1 = 8'd0;

assign label_local_V_we0 = 1'b0;

assign label_local_V_we1 = 1'b0;

assign theta_local_V_address0 = compute_U0_theta_local_V_address0;

assign theta_local_V_address1 = compute_U0_theta_local_V_address1;

assign theta_local_V_ce0 = compute_U0_theta_local_V_ce0;

assign theta_local_V_ce1 = compute_U0_theta_local_V_ce1;

assign theta_local_V_d0 = compute_U0_theta_local_V_d0;

assign theta_local_V_d1 = 32'd0;

assign theta_local_V_we0 = compute_U0_theta_local_V_we0;

assign theta_local_V_we1 = 1'b0;

endmodule //SgdLR_dataflow_in_loop_TRAINING_INST

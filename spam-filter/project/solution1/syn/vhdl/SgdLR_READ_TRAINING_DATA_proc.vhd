-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SgdLR_READ_TRAINING_DATA_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    trunc_ln280 : IN STD_LOGIC_VECTOR (12 downto 0);
    data_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    data_ce0 : OUT STD_LOGIC;
    data_q0 : IN STD_LOGIC_VECTOR (511 downto 0);
    training_instance_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    training_instance_V_ce0 : OUT STD_LOGIC;
    training_instance_V_we0 : OUT STD_LOGIC;
    training_instance_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of SgdLR_READ_TRAINING_DATA_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln104_fu_109_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln104_reg_209 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln107_fu_115_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln107_reg_214 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln104_fu_103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_224 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_7_fu_131_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_229 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln108_fu_148_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_reg_84 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln108_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln107_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln628_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_48 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal or_ln_fu_119_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln108_fu_138_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln109_fu_154_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln628_fu_164_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_168_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln628_3_fu_176_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln628_fu_180_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln104_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_48 <= ap_const_lv6_0;
            elsif (((icmp_ln108_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_fu_48 <= add_ln104_reg_209;
            end if; 
        end if;
    end process;

    j_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln108_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_84 <= add_ln108_fu_148_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_84 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln104_reg_209 <= add_ln104_fu_109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_7_reg_229(9 downto 5) <= tmp_7_fu_131_p3(9 downto 5);
                tmp_data_V_reg_224 <= data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_103_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln107_reg_214 <= trunc_ln107_fu_115_p1;
            end if;
        end if;
    end process;
    tmp_7_reg_229(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln104_fu_103_p2, ap_CS_fsm_state4, icmp_ln108_fu_142_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln104_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln108_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln104_fu_109_p2 <= std_logic_vector(unsigned(i_fu_48) + unsigned(ap_const_lv6_1));
    add_ln108_fu_148_p2 <= std_logic_vector(unsigned(j_reg_84) + unsigned(ap_const_lv6_1));
    add_ln109_fu_154_p2 <= std_logic_vector(unsigned(tmp_7_reg_229) + unsigned(zext_ln108_fu_138_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln104_fu_103_p2)
    begin
        if (((icmp_ln104_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln104_fu_103_p2)
    begin
        if (((icmp_ln104_fu_103_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data_address0 <= zext_ln107_fu_126_p1(18 - 1 downto 0);

    data_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_ce0 <= ap_const_logic_1;
        else 
            data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln104_fu_103_p2 <= "1" when (i_fu_48 = ap_const_lv6_20) else "0";
    icmp_ln108_fu_142_p2 <= "1" when (j_reg_84 = ap_const_lv6_20) else "0";
    lshr_ln628_fu_180_p2 <= std_logic_vector(shift_right(unsigned(tmp_data_V_reg_224),to_integer(unsigned('0' & zext_ln628_3_fu_176_p1(31-1 downto 0)))));
    or_ln_fu_119_p3 <= (trunc_ln280 & trunc_ln107_fu_115_p1);
    shl_ln_fu_168_p3 <= (trunc_ln628_fu_164_p1 & ap_const_lv4_0);
    tmp_7_fu_131_p3 <= (trunc_ln107_reg_214 & ap_const_lv5_0);
    training_instance_V_address0 <= zext_ln628_fu_159_p1(10 - 1 downto 0);

    training_instance_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            training_instance_V_ce0 <= ap_const_logic_1;
        else 
            training_instance_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    training_instance_V_d0 <= lshr_ln628_fu_180_p2(16 - 1 downto 0);

    training_instance_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln108_fu_142_p2)
    begin
        if (((icmp_ln108_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            training_instance_V_we0 <= ap_const_logic_1;
        else 
            training_instance_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln107_fu_115_p1 <= i_fu_48(5 - 1 downto 0);
    trunc_ln628_fu_164_p1 <= j_reg_84(5 - 1 downto 0);
    zext_ln107_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_119_p3),64));
    zext_ln108_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_84),10));
    zext_ln628_3_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_168_p3),512));
    zext_ln628_fu_159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln109_fu_154_p2),64));
end behav;

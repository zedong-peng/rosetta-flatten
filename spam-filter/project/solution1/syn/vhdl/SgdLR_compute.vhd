-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SgdLR_compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    label_local_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    label_local_V_ce0 : OUT STD_LOGIC;
    label_local_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    trunc_ln280 : IN STD_LOGIC_VECTOR (12 downto 0);
    theta_local_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    theta_local_V_ce0 : OUT STD_LOGIC;
    theta_local_V_we0 : OUT STD_LOGIC;
    theta_local_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    theta_local_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    theta_local_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    theta_local_V_ce1 : OUT STD_LOGIC;
    theta_local_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    training_instance_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    training_instance_V_ce0 : OUT STD_LOGIC;
    training_instance_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of SgdLR_compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_200000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_const_lv32_FFE00000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111000000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv20_80000 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lut_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lut_V_ce0 : STD_LOGIC;
    signal lut_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln1649_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1649_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1650_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1650_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal scale_V_fu_262_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal scale_V_reg_296 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gradient_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal gradient_V_ce0 : STD_LOGIC;
    signal gradient_V_we0 : STD_LOGIC;
    signal gradient_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start : STD_LOGIC;
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_done : STD_LOGIC;
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_idle : STD_LOGIC;
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_ready : STD_LOGIC;
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_result_V_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_result_V_out_ap_vld : STD_LOGIC;
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_theta_local_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_theta_local_V_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_training_instance_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_training_instance_V_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start : STD_LOGIC;
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_done : STD_LOGIC;
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_idle : STD_LOGIC;
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_ready : STD_LOGIC;
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_we0 : STD_LOGIC;
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_training_instance_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_training_instance_V_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start : STD_LOGIC;
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done : STD_LOGIC;
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_idle : STD_LOGIC;
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_ready : STD_LOGIC;
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_gradient_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_gradient_V_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_ce0 : STD_LOGIC;
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_we0 : STD_LOGIC;
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_ce1 : STD_LOGIC;
    signal grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call6 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln274_fu_122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln541_fu_198_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_142_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_V_fu_152_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_V_1_fu_168_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln_fu_174_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_V_fu_184_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal index_V_1_fu_190_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal prob_V_fu_203_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal xor_ln1649_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1650_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1650_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1650_fu_225_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln234_fu_211_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal prob_V_1_fu_238_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln_fu_250_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln234_1_fu_246_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln813_fu_258_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component SgdLR_compute_Pipeline_DOT_DOT_INNER IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_V_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_V_out_ap_vld : OUT STD_LOGIC;
        theta_local_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        theta_local_V_ce0 : OUT STD_LOGIC;
        theta_local_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        training_instance_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        training_instance_V_ce0 : OUT STD_LOGIC;
        training_instance_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component SgdLR_compute_Pipeline_GRAD_GRAD_INNER IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln177 : IN STD_LOGIC_VECTOR (27 downto 0);
        gradient_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        gradient_V_ce0 : OUT STD_LOGIC;
        gradient_V_we0 : OUT STD_LOGIC;
        gradient_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        training_instance_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        training_instance_V_ce0 : OUT STD_LOGIC;
        training_instance_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component SgdLR_compute_Pipeline_UPDATE_UPDATE_INNER IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gradient_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        gradient_V_ce0 : OUT STD_LOGIC;
        gradient_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        theta_local_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        theta_local_V_ce0 : OUT STD_LOGIC;
        theta_local_V_we0 : OUT STD_LOGIC;
        theta_local_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        theta_local_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        theta_local_V_ce1 : OUT STD_LOGIC;
        theta_local_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component SgdLR_compute_lut_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component SgdLR_compute_gradient_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lut_V_U : component SgdLR_compute_lut_V_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lut_V_address0,
        ce0 => lut_V_ce0,
        q0 => lut_V_q0);

    gradient_V_U : component SgdLR_compute_gradient_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradient_V_address0,
        ce0 => gradient_V_ce0,
        we0 => gradient_V_we0,
        d0 => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_d0,
        q0 => gradient_V_q0);

    grp_compute_Pipeline_DOT_DOT_INNER_fu_98 : component SgdLR_compute_Pipeline_DOT_DOT_INNER
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start,
        ap_done => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_done,
        ap_idle => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_idle,
        ap_ready => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_ready,
        result_V_out => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_result_V_out,
        result_V_out_ap_vld => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_result_V_out_ap_vld,
        theta_local_V_address0 => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_theta_local_V_address0,
        theta_local_V_ce0 => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_theta_local_V_ce0,
        theta_local_V_q0 => theta_local_V_q0,
        training_instance_V_address0 => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_training_instance_V_address0,
        training_instance_V_ce0 => grp_compute_Pipeline_DOT_DOT_INNER_fu_98_training_instance_V_ce0,
        training_instance_V_q0 => training_instance_V_q0);

    grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107 : component SgdLR_compute_Pipeline_GRAD_GRAD_INNER
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start,
        ap_done => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_done,
        ap_idle => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_idle,
        ap_ready => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_ready,
        sext_ln177 => scale_V_reg_296,
        gradient_V_address0 => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_address0,
        gradient_V_ce0 => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_ce0,
        gradient_V_we0 => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_we0,
        gradient_V_d0 => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_d0,
        training_instance_V_address0 => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_training_instance_V_address0,
        training_instance_V_ce0 => grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_training_instance_V_ce0,
        training_instance_V_q0 => training_instance_V_q0);

    grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115 : component SgdLR_compute_Pipeline_UPDATE_UPDATE_INNER
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start,
        ap_done => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done,
        ap_idle => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_idle,
        ap_ready => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_ready,
        gradient_V_address0 => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_gradient_V_address0,
        gradient_V_ce0 => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_gradient_V_ce0,
        gradient_V_q0 => gradient_V_q0,
        theta_local_V_address0 => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_address0,
        theta_local_V_ce0 => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_ce0,
        theta_local_V_we0 => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_we0,
        theta_local_V_d0 => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_d0,
        theta_local_V_address1 => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_address1,
        theta_local_V_ce1 => grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_ce1,
        theta_local_V_q1 => theta_local_V_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_ready = ap_const_logic_1)) then 
                    grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_ready = ap_const_logic_1)) then 
                    grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_ready = ap_const_logic_1)) then 
                    grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln1649_reg_280 <= icmp_ln1649_fu_130_p2;
                icmp_ln1650_reg_286 <= icmp_ln1650_fu_136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    scale_V_reg_296(27 downto 9) <= scale_V_fu_262_p2(27 downto 9);
            end if;
        end if;
    end process;
    scale_V_reg_296(8 downto 0) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_done, grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_done, grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    and_ln1650_fu_220_p2 <= (xor_ln1649_fu_215_p2 and icmp_ln1650_reg_286);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_done)
    begin
        if ((grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_done)
    begin
        if ((grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done)
    begin
        if ((grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call6_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call6 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gradient_V_address0_assign_proc : process(grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_address0, grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_gradient_V_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            gradient_V_address0 <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_gradient_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gradient_V_address0 <= grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_address0;
        else 
            gradient_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    gradient_V_ce0_assign_proc : process(grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_ce0, grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_gradient_V_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            gradient_V_ce0 <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_gradient_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gradient_V_ce0 <= grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_ce0;
        else 
            gradient_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradient_V_we0_assign_proc : process(grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gradient_V_we0 <= grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_gradient_V_we0;
        else 
            gradient_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start <= grp_compute_Pipeline_DOT_DOT_INNER_fu_98_ap_start_reg;
    grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start <= grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_ap_start_reg;
    grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_ap_start_reg;
    icmp_ln1649_fu_130_p2 <= "1" when (signed(grp_compute_Pipeline_DOT_DOT_INNER_fu_98_result_V_out) > signed(ap_const_lv32_200000)) else "0";
    icmp_ln1650_fu_136_p2 <= "1" when (signed(grp_compute_Pipeline_DOT_DOT_INNER_fu_98_result_V_out) < signed(ap_const_lv32_FFE00000)) else "0";
    in_V_1_fu_168_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(in_V_fu_152_p3));
    in_V_fu_152_p3 <= (trunc_ln1_fu_142_p4 & ap_const_lv11_0);
    index_V_1_fu_190_p3 <= 
        index_V_fu_184_p2 when (tmp_fu_160_p3(0) = '1') else 
        trunc_ln1_fu_142_p4;
    index_V_fu_184_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(trunc_ln_fu_174_p4));
    label_local_V_address0 <= zext_ln274_fu_122_p1(13 - 1 downto 0);

    label_local_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            label_local_V_ce0 <= ap_const_logic_1;
        else 
            label_local_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_V_address0 <= zext_ln541_fu_198_p1(11 - 1 downto 0);

    lut_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            lut_V_ce0 <= ap_const_logic_1;
        else 
            lut_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1650_fu_233_p2 <= (icmp_ln1649_reg_280 or and_ln1650_fu_220_p2);
    prob_V_1_fu_238_p3 <= 
        select_ln1650_fu_225_p3 when (or_ln1650_fu_233_p2(0) = '1') else 
        zext_ln234_fu_211_p1;
    prob_V_fu_203_p3 <= (lut_V_q0 & ap_const_lv9_0);
    scale_V_fu_262_p2 <= std_logic_vector(unsigned(zext_ln234_1_fu_246_p1) - unsigned(zext_ln813_fu_258_p1));
    select_ln1650_fu_225_p3 <= 
        ap_const_lv20_0 when (and_ln1650_fu_220_p2(0) = '1') else 
        ap_const_lv20_80000;
    shl_ln_fu_250_p3 <= (label_local_V_q0 & ap_const_lv19_0);

    theta_local_V_address0_assign_proc : process(grp_compute_Pipeline_DOT_DOT_INNER_fu_98_theta_local_V_address0, grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_address0, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            theta_local_V_address0 <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            theta_local_V_address0 <= grp_compute_Pipeline_DOT_DOT_INNER_fu_98_theta_local_V_address0;
        else 
            theta_local_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    theta_local_V_address1 <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_address1;

    theta_local_V_ce0_assign_proc : process(grp_compute_Pipeline_DOT_DOT_INNER_fu_98_theta_local_V_ce0, grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            theta_local_V_ce0 <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            theta_local_V_ce0 <= grp_compute_Pipeline_DOT_DOT_INNER_fu_98_theta_local_V_ce0;
        else 
            theta_local_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    theta_local_V_ce1_assign_proc : process(grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_ce1, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            theta_local_V_ce1 <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_ce1;
        else 
            theta_local_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    theta_local_V_d0 <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_d0;

    theta_local_V_we0_assign_proc : process(grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            theta_local_V_we0 <= grp_compute_Pipeline_UPDATE_UPDATE_INNER_fu_115_theta_local_V_we0;
        else 
            theta_local_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_160_p3 <= grp_compute_Pipeline_DOT_DOT_INNER_fu_98_result_V_out(22 downto 22);

    training_instance_V_address0_assign_proc : process(grp_compute_Pipeline_DOT_DOT_INNER_fu_98_training_instance_V_address0, grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_training_instance_V_address0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_instance_V_address0 <= grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_training_instance_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            training_instance_V_address0 <= grp_compute_Pipeline_DOT_DOT_INNER_fu_98_training_instance_V_address0;
        else 
            training_instance_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    training_instance_V_ce0_assign_proc : process(grp_compute_Pipeline_DOT_DOT_INNER_fu_98_training_instance_V_ce0, grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_training_instance_V_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            training_instance_V_ce0 <= grp_compute_Pipeline_GRAD_GRAD_INNER_fu_107_training_instance_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            training_instance_V_ce0 <= grp_compute_Pipeline_DOT_DOT_INNER_fu_98_training_instance_V_ce0;
        else 
            training_instance_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1_fu_142_p4 <= grp_compute_Pipeline_DOT_DOT_INNER_fu_98_result_V_out(21 downto 11);
    trunc_ln_fu_174_p4 <= in_V_1_fu_168_p2(21 downto 11);
    xor_ln1649_fu_215_p2 <= (icmp_ln1649_reg_280 xor ap_const_lv1_1);
    zext_ln234_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(prob_V_1_fu_238_p3),28));
    zext_ln234_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(prob_V_fu_203_p3),20));
    zext_ln274_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln280),64));
    zext_ln541_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_V_1_fu_190_p3),64));
    zext_ln813_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_250_p3),28));
end behav;
